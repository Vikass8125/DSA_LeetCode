1332. Remove Palindromic Subsequences [EASY]

You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.
Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".
Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".
 

Constraints:

1 <= s.length <= 1000
s[i] is either 'a' or 'b'.


MY_SOLUTION
Idea:
The trick to this problem is realizing that since we're dealing with subsequences and only 2 possible characters, the answer cannot possible be larger than 2. 
In fact, the answer will always be 2 unless S is already a palindrome, in which case the answer is 1, or S is an empty string, in which case the answer is 0.

It's important to understand the distinction between a substring and a subsequence. A substring is a contiguous block of characters between one index and and 
another in the input string. A subsequence, which we're dealing with here, is any sequence of characters from the string, as long as they're in their original order.
But you can pick and choose which characters you want in a subsequence, even if there are gaps between.

So in this situation I could, for example, create a subsequence of every single 'a' in the string. A string of all 'a' s would naturally be palindromic, 
so it could be removed from the original string. Since there are only 'a' s and 'b' s, that would leave only 'b' s remaining in the original string, which could 
be then removed in a second operation.

     S = "b b a a b a a a"                 // Input string
              ^ ^   ^ ^ ^                  // Characters for the first subsequence
   sub = "    a a   a a a" = "a a a a a"   // Palindromic, so it can be removed
     S = "b b     b      " = "b b b"       // Remaining string is now palindromic and can be removed
     
     
    ===============================================================================================================================
    
    What is a Subsequence?
This is quite important to understand. Below are the main string sub-types (literally) that could be mentioned in a question.

Substring: A contiguous sequence of characters in a string.
Subsequence: Any sequence of characters in a string with their relative order is maintained.
In particular, this question is asking to remove subsequences in the string. Therefore, we don't actually care where these subsequences 
are as long as they maintain 
their original relative ordering in the string. For example, a subsequence of "leetcode" could be "toe".


Algorithm:
If string is empty: return 0
If string is a palindrome: return 1
Else return 2



class Solution {
    public int removePalindromeSub(String s) {
        if(s.isBlank()) return 0;
        if(isPalindrome(s)) return 1;
        return 2;
    }
    
    boolean isPalindrome(String s){
        int start = 0;
        int end = s.length() -1;
        while(start < end){
            if(s.charAt(start) != s.charAt(end)) return false;
            start++;
            end--;
        }
        return true;
    }
}



class Solution {
    public int removePalindromeSub(String S) {
        if (S.length() == 0) return 0;
        for (int i = 0, j = S.length() - 1; i < j; i++, j--)
            if (S.charAt(i) != S.charAt(j)) return 2;
        return 1;
    }
}
     
     
