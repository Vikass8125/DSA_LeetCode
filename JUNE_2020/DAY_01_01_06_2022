1480. Running Sum of 1d Array [EASY]
Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).

Return the running sum of nums.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].
Example 2:

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].
Example 3:

Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]
 

Constraints:

1 <= nums.length <= 1000
-10^6 <= nums[i] <= 10^6




MY_SOLUTION




class Solution {
    public int[] runningSum(int[] nums) {
        
        int sum = 0;
        int[] finalSum = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            sum = sum + nums[i];
            finalSum[i] = sum;
        }
        return finalSum;
    }
}

ANOTHER_SOLUTION

Intuition

We are required to find the running sum of numbers nums[i] in the input array where i ranges from 0 to n-1 
and n is the size of the input array. We can see that the running sum is the sum of all of the elements from index 0 to index i inclusive. 
Since we start building our output array at index 0, at each index i we have already calculated the sum of all numbers up to and including index i-1. 
Thus, instead of recalculating the sum, we can get the result for index i by simply adding the element at index i to the previously 
calculated running sum for index i-1.

Algorithm

Define an array result.
Initialize the first element of result with the first element of the input array.
At index i append the sum of the element nums[i] and previous running sum result[i - 1] to the result array.
We repeat step 3 for all indices from 1 to n-1.

class Solution {
public int[] runningSum(int[] nums) {
        int[] result = new int[nums.length];

        // Initialize first element of result array with first element in nums.
        result[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            // Result at index `i` is sum of result at `i-1` and element at `i`.
            result[i] = result[i - 1] + nums[i];
        }
        return result;
    }
}


ANOTHER_SOLUTION
Intuition

In the previous approach we created an extra array to store our results. 
However, we do not actually need to do so. We can obtain the same result without using extra space by 
performing the same operations on the input array instead.

Algorithm

Increase nums[i] by the previous index's running sum. 
The previous index's running sum is stored at index i-1 in the input array.
We repeat step 1 for all indices from 1 to n-1.


class Solution {
public int[] runningSum(int[] nums) {
        for (int i = 1; i < nums.length; i++) {
            // Result at index `i` is sum of result at `i-1` and element at `i`.
            nums[i] += nums[i - 1];
        }
        return nums;
    }
}



ANOTHER_SOLUTION
Idea:
While this is not a terribly challenging problem, it's a good introduction to the concept of a prefix sum array. 
Prefix sum arrays have many uses in more complex algorithms and can sometimes help reduce the time complexity of a advanced solution by an order of magnitude.

In a prefix sum array, we will create a duplicate array which contains the running sum of the elements 0 to i of 
our original array (nums) for each index i of our prefix sum array (ans). (Note: We can lower the space complexity by using 
an in-place approach with nums directly and mutating it into its own prefix sum array, if there is no compelling reason to avoid modifying a function argument.)

Since we'll need to build on a previous running total, we should start our iteration at i = 1 and copy over the first element from nums to ans. 
Then we just iterate through nums and add each element (nums[i]) to the previous running total (ans[i-1]) to create the new running total (ans[i]).

When we're done, we can return ans.

Time Complexity: O(N) where N is the length of nums
Space Complexity: O(N) for our running sum array
or O(1) with an in-place approach


class Solution {
    public int[] runningSum(int[] nums) {
    int[] ans = new int[nums.length];
    ans[0] = nums[0];
    for (int i = 1; i < nums.length; i++)
        ans[i] = ans[i-1] + nums[i];
    return ans;
    }
}




