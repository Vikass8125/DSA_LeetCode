1354. Construct Target Array With Multiple Sums  [HARD]
You are given an array target of n integers. From a starting array arr consisting of n 1's, you may perform the following procedure :

let x be the sum of all elements currently in your array.
choose index i, such that 0 <= i < n and set the value of arr at index i to x.
You may repeat this procedure as many times as needed.
Return true if it is possible to construct the target array from arr, otherwise, return false.

 

Example 1:

Input: target = [9,3,5]
Output: true
Explanation: Start with arr = [1, 1, 1] 
[1, 1, 1], sum = 3 choose index 1
[1, 3, 1], sum = 5 choose index 2
[1, 3, 5], sum = 9 choose index 0
[9, 3, 5] Done
Example 2:

Input: target = [1,1,1,2]
Output: false
Explanation: Impossible to create target array from [1,1,1,1].
Example 3:

Input: target = [8,5]
Output: true
 

Constraints:

n == target.length
1 <= n <= 5 * 104
1 <= target[i] <= 109


MY_SOLUTION\

How would this work in code?
It's actually quite simple! We need the largest number each time, so we can just put all our numbers in a max-heap. 
In the below, assume curr represents the current largest number.

To get x, we can simply do x = curr % (sum - curr) since sum - curr represents the sum of all numbers in the array except the current max.
Once we have x, we'll update sum to sum - curr + x to get our new sum.
Before adding x to the priority queue, we need to check a couple of things:
If x == 0, that implies it was impossible to get to this point with an array of ones. We return false.
If x == curr, that implies our modulus operator did not change our value. We return false.
We return true once our priority queue only has 1s in it.
We also need to account for a couple special cases:

If n == 1, we can return true if target[0] == 1. Otherwise, return false.
In our while-loop, if n == 2, we return true if sum - curr == 1 which only happens when n == 2.

CODE:

public boolean isPossible(int[] target) {
	if (target.length == 1) return target[0] == 1;

	PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
	int sum = 0;
	for (int t: target) {
		pq.add(t);
		sum += t;
	}

	while (pq.peek() != 1) {
		int curr = pq.poll();
		if (sum - curr == 1) return true;

		int x = curr % (sum - curr);
		sum = sum - curr + x;

		if (x == 0 || x == curr) return false;
		else pq.add(x);
	}

	return true;
}
Time complexity: O(nlogn) due to the priority queue.
Space complexity: O(n)

=============================================================================================================================================


class Solution {
    public boolean isPossible(int[] target) {
        
        // RECURSIVE
        /*
        long totalSum = 0;
        int maxInd = 0;
        
        for(int i = 0; i < target.length; i++){
            totalSum += target[i];
            if(target[i] > target[maxInd]){
                maxInd = i;
            }
        }
        
        long diffSum = totalSum - target[maxInd];
        
        //BASE CASE
        if(target[maxInd] == 1 || diffSum == 1) return true;
    
        if(diffSum > target[maxInd] || diffSum == 0 || target[maxInd] % diffSum == 0) return false;
        target[maxInd] %= diffSum;
        
        return isPossible(target
                          
        */
        

=============================================================================================================================================

        // ITERATIVE
        
        long totalSum = 0;
        
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
           
        
        for(int i = 0; i < target.length; i++){
            totalSum += target[i];
            maxHeap.offer(target[i]);
        }
        
        while(maxHeap.peek() != 1){
            
            int value = maxHeap.poll();
            long diffSum = totalSum - value;

            //BASE CASE
            
            if(diffSum == 1) return true;

            if(diffSum > value || diffSum == 0 || value % diffSum == 0) return false;
            
            value %= diffSum;
            totalSum = diffSum + value;
            maxHeap.offer(value);

            
        }
        return true;

        
    }
}


=============================================================================================================================================

ANOTHER-SOLUTION
class Solution {
    public boolean isPossible(int[] target) {
        int n = target.length;
        
        //Approach : Reverse Engineering 
        //try to contruct initial array [1, 1, 1] from the target array
        
        //base case 
        if (n == 1) return target[0] == 1;
        
        //Max Heap
        PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>((a, b) -> (b - a));
        
        long totalSum = 0;
        for(int i = 0; i < n; i++){
            totalSum += target[i];
            
            //ignore 1
            if(target[i] == 1) continue;
            
            maxHeap.add(target[i]);
        }
        
        
        while (!maxHeap.isEmpty()) {
            int largest = maxHeap.remove();
        
            //total sum except current laregest number
            long remainingSum = (totalSum - largest);
            
            //Edge case
            //when n = 2,
            if(remainingSum == 1) return true;
            
            //invalid case, largest numbers must be greater than 
            //sum of other number except largest number
            if(remainingSum >= largest) return false;
            
            int newLargest = (int)(largest % remainingSum);
            
            //newLargest can't be less 1
            if(newLargest < 1) return false;
            
            //no need to 1, in maxheap 
            //avoid unnecessary adding and removing from heap
            if(newLargest > 1)
                maxHeap.add(newLargest);
            
            totalSum = totalSum  - largest + newLargest;
        }
        
        return true;
    }
}
