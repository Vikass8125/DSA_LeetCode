665. Non-decreasing Array  [MEDIUM]
Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.

We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).

 

Example 1:

Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.
Example 2:

Input: nums = [4,2,1]
Output: false
Explanation: You can't get a non-decreasing array by modify at most one element.
 

Constraints:

n == nums.length
1 <= n <= 104
-105 <= nums[i] <= 105


SOLUUTION

class Solution {
    public boolean checkPossibility(int[] nums) {
        if (nums.length == 1) return true;
        
        int count = 0;
        for (int i = 1; i < nums.length && count < 2; i++) {
            if (nums[i] >= nums[i - 1]) {
                continue; // non-decrease
            }
            
            if (i - 2 >= 0 && nums[i - 2] > nums[i]) {
                nums[i] = nums[i - 1]; // corner case
            } else {
                nums[i - 1] = nums[i]; // set them equal, wont affect future height
            }
            count++; 
        }
        return count < 2; // if modify more than once
    }
}

ANOTHER_SOLUTION
class Solution {
    public boolean checkPossibility(int[] nums) {
        int count = 0;
        int size = nums.length;
        int minVal = Integer.MIN_VALUE;
        for(int i = 0; i < size - 1; i++){
            if(nums[i] <= nums[i+1]){
                minVal = nums[i];
            }
            else{
                if(nums[i+1] < minVal){
                    nums[i+1] = nums[i];
                }
                count++;
                if(count > 1) return false;
            }
        }
        
        return true;
    }
}
