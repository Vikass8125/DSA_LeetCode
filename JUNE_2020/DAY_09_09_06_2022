167. Two Sum II - Input Array Is Sorted  [MEDIUM]
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
 

Constraints:

2 <= numbers.length <= 3 * 104
-1000 <= numbers[i] <= 1000
numbers is sorted in non-decreasing order.
-1000 <= target <= 1000
The tests are generated such that there is exactly one solution.



MY_SOLUTION
When the sum is:

smaller than the target:

we move l to the right by 1. we can't make r smaller because that's gonna make the sum even smaller.
bigger than target:

move r to the left by 1. we can't make l bigger because that's gonna make the sum even bigger.
equal to the target:

we found the answer and return.

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int start = 0;
        int last = numbers.length - 1;
        while(numbers[start] + numbers[last] != target){
            if(numbers[start] + numbers[last] > target ){
                last--;
            }
            else{
                start++;
                
            }
        
       }
         return new int[] {start + 1,last + 1};
    }
}


ANOTHER_SOLUTION


First, set the two pointers i to index 0 and j to index length - 1 respectively.
If the sum of i + j is greater than the target, find the biggest number that is smaller than target - numbers[left]

First, check if the number on the left of the right pointer is smaller than target - numbers[left]. If it is, then move the right pointer one to the left.
However, if it is not, then use binary search to find the biggest number smaller than target - numbers[left].
On the other hand, if the sum is smaller than the target, then find the smallest number that is larger than target - nums[right]

Check if the number on the right of the left pointer is greater than target - nums[right]. If it is, move the left pointer one to the right.
However, if it is not, then use binary search to find the smallest number that is larger than target - nums[right].
In this way, the average case would be O(logn), since we divide by half every time. However, the worst case scenario would be O(n), if the pointers have to move by 1 every single time.

Note that it is not doing binary search for every move, but only for moves where the number to the left of the right pointer OR the number to the right of the left pointer do not fulfill the condition.

If you didn't understand, maybe checking @samuelkanezhao2's explanation might help

public int[] twoSum(int[] numbers, int target) {
    int l = 0, r = numbers.length - 1;
    while (numbers[l] + numbers[r] != target) {
        if (numbers[l] + numbers[r] > target) {
            if (numbers[r - 1] > target - numbers[l])
                r = binarySearch(numbers, l + 1, r - 1, target - numbers[l]);
            else
                r--;
        } 
		else {
            if (numbers[l + 1] < target - numbers[r])
                l = binarySearch(numbers, l + 1, r - 1, target - numbers[r]);
            else
                l++;
        }
    }
    return new int[] { l + 1, r + 1 };
}

private int binarySearch(int[] nums, int lo, int hi, int target) {
    int mid = (lo + hi) / 2;
    if (hi <= lo)
        return mid;
    if (nums[mid] == target)
        return mid;
    else if (nums[mid] > target)
        return binarySearch(nums, lo, (mid - 1), target);
    else if (nums[mid] < target)
        return binarySearch(nums, (mid + 1), hi, target);
    return mid;
}
