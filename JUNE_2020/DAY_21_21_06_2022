1642. Furthest Building You Can Reach   [MEDIUM]
You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.

You start your journey from building 0 and move to the next building by possibly using bricks or ladders.

While moving from building i to building i+1 (0-indexed),

If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.
If the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.
Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.

 

Example 1:


Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1
Output: 4
Explanation: Starting at building 0, you can follow these steps:
- Go to building 1 without using ladders nor bricks since 4 >= 2.
- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.
- Go to building 3 without using ladders nor bricks since 7 >= 6.
- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.
It is impossible to go beyond building 4 because you do not have any more bricks or ladders.
Example 2:

Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2
Output: 7
Example 3:

Input: heights = [14,3,19,3], bricks = 17, ladders = 0
Output: 3
 

Constraints:

1 <= heights.length <= 105
1 <= heights[i] <= 106
0 <= bricks <= 109
0 <= ladders <= heights.length


MY_SOLUTION


MIN_HEAP

Idea:
The first realization should be that we always want to use our ladders to their best effect: where they would save us the most amount of bricks. 
Unfortunately, we can't just save the ladders for the largest gaps in the building heights, because we may not be able to reach them by using bricks.

Since we can't find out how far we can go until we figure out where to place the ladders, and we can't figure out where to put the ladders until we see how 
far we can go, we'll have to move the ladders around as we go in order to maintain their maximum effect.

To put this in terms of a coding solution, as we iterate through the building heights array (H), we'll want to continuously make sure that the largest L number 
of positive differences are occupied with ladders, allowing us the best use of our B number of bricks.

In general, this means that we should start iterating through H, ignoring any difference (diff) that is 0 or less, and place a ladder whenever we have a positive 

difference. Once we've used up all the ladders, then we can start using bricks. If we come across a diff that is larger than the smallest ladder that we're currently 
using, we should replace that ladder with bricks and move the ladder forwad to the current diff. Otherwise we should use bricks for the current diff.

The second big realization at this point is that we need a min-heap or min priority queue in order to keep track of the heights of the ladders in use, so that we 
can always take the smallest one, thus keeping the ladders always on the largest diff values.

If at any point we run out bricks, then we can't reach the next building and should return i. If we're able to reach the end of H without running out of bricks, we 
can return H.length - 1, signifying that we reached the last building.

Time Complexity: O(N * log N) where N is the length of H, due to the use of a min-heap
Space Complexity: O(L) to keep track of L number of ladder lengths


class Solution {
    public int furthestBuilding(int[] H, int B, int L) {
        int len = H.length - 1;
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int i = 0; i < len; i++) {
            int diff = H[i+1] - H[i];
            if (diff > 0) {
                if (L > 0) {
                    pq.add(diff);
                    L--;
                } else if (pq.size() > 0 && diff > pq.peek()) {
                    pq.add(diff);
                    B -= pq.poll();
                } else B -= diff;
                if (B < 0) return i;
            }
        }
        return len;
    }
}


====================================================================================================================================================
MAX_HEAP

class Solution {
    
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        //max heap
        //it help to get the previous laegest jump taken by using bricks
        PriorityQueue<Integer> jumpsTaken = new PriorityQueue<Integer>((a, b) -> (b - a));
        
        for(int i = 0; i < heights.length - 1; i++){
            int jump = heights[i + 1] - heights[i];
            
            //+ve mean, here we have to use ladder or bricks to move in next building
            if(jump > 0){
                
                //just add jump
                jumpsTaken.add(jump);
                
                //remove bricks, as much needed for this jump
                bricks -= jump;
                
                //-ve bricks, means we are using more as available
                //to fix, we have to user the ladder, where we have maximum brick
                if(bricks < 0){
                    
                    //check ladder is avaivle  
                    if(ladders <= 0) return i;
                    
                    //use a ladder
                    ladders--;
                    
                    //get the maximum jump, which done by bricks
                    int lastMaxJump = jumpsTaken.remove();
                   
                    //now restore the bricks
                    bricks += lastMaxJump;
                    
                }
            }
        }
        
        return heights.length - 1;
    }
}
