304. Range Sum Query 2D - Immutable [MEDIUM]
Given a 2D matrix matrix, handle multiple queries of the following type:

Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
Implement the NumMatrix class:

NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.
int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
 

Example 1:


Input
["NumMatrix", "sumRegion", "sumRegion", "sumRegion"]
[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]
Output
[null, 8, 11, 12]

Explanation
NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);
numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)
numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)
numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 200
-105 <= matrix[i][j] <= 105
0 <= row1 <= row2 < m
0 <= col1 <= col2 < n
At most 104 calls will be made to sumRegion.


MY_SOLUTION

class NumMatrix {
   private int[][] data;

    public NumMatrix(int[][] matrix) {
        data = matrix;
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int sum = 0;
        for(int i = row1; i <= row2; i++){
            for(int j = col1; j <= col2; j++){
                sum += data[i][j];
            }
        }
        return sum;
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */


OIPTIMISED_SOLUTION
https://www.youtube.com/watch?v=rkLDDxOcJxU

class NumMatrix {
    int[][] matrix;

    public NumMatrix(int[][] matrix) {
        for(int i = 0; i < matrix.length; i++){
            for(int j = 1; j < matrix[0].length; j++){
                matrix[i][j] += matrix[i][j-1];
            }
        }
        for(int i = 1; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                matrix[i][j] += matrix[i-1][j];
            }
        }
        
        this.matrix = matrix;
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int total = matrix[row2][col2];
        int extra = (col1 != 0 ? matrix[row2][col1-1]:0) + (row1 != 0 ? matrix[row1-1][col2] : 0) - ((row1 != 0 && col1 != 0) ? matrix[row1-1][col1-1] : 0);
        
        return total - extra;
       
    }
}

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix obj = new NumMatrix(matrix);
 * int param_1 = obj.sumRegion(row1,col1,row2,col2);
 */
 
 
 
 OTHER_APPROACH
 Intutive Brute Force
The most obvious approach is to iterate the given sub-rectangle and add its element to your answer.

class NumMatrix {
	private int[][] arr;   //declaring a private 2D Array
	
	public NumMatrix(int[][] matrix) {
		arr = matrix;    //initialising the private array each time when the function is called with the provided matrix
	}    
	public int sumRegion(int row1, int col1, int row2, int col2) {
		int ans = 0;     //travelling to all rows and columns in the given range to calculate their sum
		for(int i = row1; i <= row2; i++){
			for(int j = col1; j <= col2; j++){
				 ans += arr[i][j];
			 }
		 }
		 return ans;
	 }
}
Using prefixSum strategy on each row
Here we will calculate prefixSum for each row. Then will travel on the provided rows and calculate the sum by 
just subtracting the sum on col2 - sum on (col1-1)
Approach idea ==>

Given Matrix :-
3 0 1 4 2
5 6 3 2 1
1 2 0 1 5
4 1 0 1 7
1 0 3 0 5

PrefixSum Matrix:-
3___3___ 4___8___10
5___11__14__16__17
1___3____3___4___9
4___5____5___6___11
1___1____4___4___9

Given
row1 = 2, col1 = 1
row2 = 4, col2 = 3

Now we will just pick up the sum that we require from each row.
on row2 --> arr[2][3] - arr[2][0] = 4 - 1 = 3
on row3 --> arr[3][3] - arr[3][0] = 6 - 4 = 2
on row4 --> arr[4][3] - arr[4][0] = 4 - 1 = 3
So total required Sum is 3 + 2 + 3 = 8
We did not have to travel the whole row in this case.

class NumMatrix {
	private int[][] arr;
	public NumMatrix(int[][] matrix) {
		arr = matrix;
		for(int i = 0; i < arr.length; i++){
			for(int j = 1; j < arr[0].length; j++){
				arr[i][j] += arr[i][j-1]; //finding prefixSum of each row by adding the previous element with the current one and storing the result at current position  
			}
		}
	}    
	public int sumRegion(int row1, int col1, int row2, int col2) {
		int ans = 0;
		for(int i = row1; i <= row2; i++){
			if(col1 == 0){
				ans = ans + arr[i][col2]; //we dont need to subtract anything if col1 is 0th column
			}else{
				ans = ans + arr[i][col2] - arr[i][col1-1];
			}
		}
		return ans;
	}
}
Using prefixSum on 2D Matrix
Here we will perform prefixSum operation not only on rows but also on column so that value at any position specifies the 
total sum of rectangle from (0,0) to that position.
Approach idea ==>

Given Matrix :-
3 0 1 4 2
5 6 3 2 1
1 2 0 1 5
4 1 0 1 7
1 0 3 0 5

Matrix after performing prefixSum operation on rows:-
3___3___ 4___8___10
5___11__14__16__17
1___3____3___4___9
4___5____5___6___11
1___1____4___4___9

Matrix after performing prefixSum operation on columns:-
3___3___ 4___8___10
8___14__18__24__27
9___17__21__28__36
13__22__26__34__47
14__23__30__38__56

Given row1, col1 and row2,col2; below is how our matrix will be like

  |___|_r1-1, c1-1_|_______|___|___|_r1-1,c2_|___|

  |___|____________|_r1,c1_|___|___|_________|___|

  |___|____________|_______|___|___|_________|___|

  |___|____________|_______|___|___|_________|___|

  |___|_r2, c1-1___|_______|___|___|_r2,c2___|___|
So to calculate sum we will take r2,c2(which represents sum till row2, col2 from 0,0) and subtract the part which is not needed.
Extra part will be sum till (r1-1,c2) and (r2,c1-1) rectangles. 
But in this process we eliminated the sum till (r1-1,c1-1) twice so we will add it one time ourself.

Given
row1 = 2, col1 = 1
row2 = 4, col2 = 3

total sum = 38
noNeed = 24 + 14 - 8 = 30
RequiredSum = totalSum - noNeed

class NumMatrix {    
    private int[][] arr;
    public NumMatrix(int[][] matrix) {
        arr = matrix;
        for(int i = 0; i < arr.length; i++){
            for(int j = 1; j < arr[0].length; j++){
                arr[i][j] += arr[i][j-1];
            }
        }        
        for(int i = 1; i < arr.length; i++){
            for(int j = 0; j < arr[0].length; j++){
                arr[i][j] += arr[i-1][j];
            }
        }
    }    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        int sum = arr[row2][col2];
        int noNeed = 0;  //put all the checks wherever needed
        if(row1 != 0){
            noNeed += arr[row1-1][col2];
        }
        if(col1 != 0){
            noNeed += arr[row2][col1-1];
        }
        if(row1 != 0 && col1 != 0){
            noNeed -= arr[row1-1][col1-1];
        }        
        return sum - noNeed;
    }
}
