160. Intersection of Two Linked Lists  [EASY]
Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

For example, the following two linked lists begin to intersect at node c1:


The test cases are generated such that there are no cycles anywhere in the entire linked structure.

Note that the linked lists must retain their original structure after the function returns.

Custom Judge:

The inputs to the judge are given as follows (your program is not given these inputs):

intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.
listA - The first linked list.
listB - The second linked list.
skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.
skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.
The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.

 

Example 1:


Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
Example 2:


Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Intersected at '2'
Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
Example 3:


Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: No intersection
Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
Explanation: The two lists do not intersect, so return null.
 

Constraints:

The number of nodes of listA is in the m.
The number of nodes of listB is in the n.
1 <= m, n <= 3 * 104
1 <= Node.val <= 105
0 <= skipA < m
0 <= skipB < n
intersectVal is 0 if listA and listB do not intersect.
intersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.


MY_SOLUTION
Actually we don't care about the "value" of difference, we just want to make sure two pointers reach the intersection node at the same time.

We can use two iterations to do that. In the first iteration, we will reset the pointer of one linkedlist to the head of another linkedlist after 
it reaches the tail node. In the second iteration, we will move two pointers until they points to the same node. Our operations in first iteration 
will help us counteract the difference. So if two linkedlist intersects, the meeting point in second iteration must be the intersection point. 
If the two linked lists have no intersection at all, then the meeting pointer in second iteration must be the tail node of both lists, which is null

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    //boundary check
    if(headA == null || headB == null) return null;
    
    ListNode a = headA;
    ListNode b = headB;
    
    //if a & b have different len, then we will stop the loop after second iteration
    while( a != b){
    	//for the end of first iteration, we just reset the pointer to the head of another linkedlist
        a = a == null? headB : a.next;
        b = b == null? headA : b.next;    
    }
    
    return a;
}



ANOTHER_SOLUTION
As a reminder:

A:         a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:    b1 → b2 → b3
Based on this I construct a structure that has a cycle in it:

A:         a1 → a2
                   ↘
                     c1 → c2 → c3 \
                   ↗              |
B:    b1 → b2 → b3                /
        ↖------------------------
Then starting from a1 I try to find a cycle (fast iterator would wrap around to itself [slow]).
If that's found the take some steps until the starting point is found.
(A good explanation of this can be found here)

public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
	if (headA == null || headB == null) return null;
	// find last node of list A (c3)
	ListNode endA = headA;
	while (endA.next != null) {
		endA = endA.next;
	}
	// join c3 to b1 making a c1...c3-b1...b3-c1 loop (if b3 indeed points to c1)
	endA.next = headB;

	ListNode start = null; // if there's no cycle this will stay null
	// Floyd's cycle finder
	ListNode slow = headA, fast = headA;
	while (fast != null && fast.next != null) {
		slow = slow.next;
		fast = fast.next.next;
		if (slow == fast) { // found a cycle
			// reset to beginning to find cycle start point (c1)
			start = headA;
			while (slow != start) {
				slow = slow.next;
				start = start.next;
			}
			break;
		}
	}
	// unjoin c3-b1
	endA.next = null;
	return start;
}
If there's no cycle it simply concats B after A and traverese to the end via the fast pointer.



OTHER_OPTIMISED_SOLUTION
Approach I - Brute Force
Time - O(mn), Space - O(1)

public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        while(headA!=null)
        {
            ListNode temp = headB;
            while(temp!=null)
            {
                if(temp==headA)
                    return headA;
                temp = temp.next;
            }
            headA = headA.next;
        }
        return null;
    }
Approach II - Using Hashing
Time - O(m+n), Space - O(m)

public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        HashSet<ListNode> st=new HashSet<>();
        while(headA != null)
        {
            st.add(headA);
            headA = headA.next;
        }
        
        while(headB != null)
        {
            if(st.contains(headB)) 
                return headB;
            headB = headB.next;
        }
        return null;
    }
Approach III - (Using difference of length between lists)
Time - O((m+n)+(l1-l2)+min(m,n), space - O(1)

public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int l1 = length(headA);
        int l2 = length(headB);
        int d = 0;
        ListNode ptr1;
        ListNode ptr2;
    
        if (l1>l2)
        {
            d = l1-l2;
            ptr1 = headA;
            ptr2 = headB;
        }
        else
        {
            d = l2-l1;
            ptr1 = headB;
            ptr2 = headA;
        }
    
        while(d>0)
        {
            if (ptr1==null)
            {
                return null;
            }
            ptr1 = ptr1.next;
            d--;
        }
        while (ptr1!=null && ptr2!=null)
        {
            if (ptr1==ptr2)
                return ptr1;
            
            ptr1 = ptr1.next;
            ptr2 = ptr2.next;
        }
        return null;
    }
    
    public int length(ListNode head)
    {
        int i = 0;
        while(head!=null)
        {
            i++;
            head = head.next;
        }
        return i;
    }
Approach IV - Optimised
Time - O(2max(m,n)), space - O(1)

public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode d1 = headA, d2 = headB;
        while(d1!=d2)
        {
            if(d1==null)
                d1 = headB;
            else
                d1 = d1.next;
            
            if(d2==null)
                d2 = headA;
            else
                d2 = d2.next;
        }
        return d1;
    }



