88. Merge Sorted Array [EASY]
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.
 

Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109
 

Follow up: Can you come up with an algorithm that runs in O(m + n) time?


MY_SOLUTION
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
       /* m = m+n;
        for(int i = 0; i < n; i++){
            nums1[i + m - n] = nums2[i];
        }
        Arrays.sort(nums1); */
        
        
        int len1 = m - 1;
        int len2 = n - 1;
        int finalLen = m + n - 1;
        
        while(len1 >= 0 && len2 >= 0){
            if(nums1[len1] > nums2[len2]){
                nums1[finalLen--] = nums1[len1--];
            }
            else
                nums1[finalLen--] = nums2[len2--];
        }
        
        
        while(len2 >= 0){
            nums1[finalLen--] = nums2[len2--];
        }
        
        
    }
}

ANOTHER_SOLUTION

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        m = m + n;
        for(int i = 0; i<n;i++){
            nums1[i + m - n] = nums2[i];
        }
    
        insertion(nums1);
        
    }
    
    public static void insertion(int[] arr){
        for(int i = 0 ; i < arr.length - 1;i++){
            for(int j = i+1; j>0; j--){
                if(arr[j] < arr[j-1]){
                    swap(arr,j,j-1);
                }else{
                    break;
                }
            }
        }
    }
    
    public static void swap(int[] arr, int first,int second){
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }
}


ANOTHER_SOLUTION

This is not my solution. It's a tweak of the solution in Cracking the Code Interview. But I wanted to share it, since it's clever and I didn't see it 
mentioned in the top discussions. Everything I saw had more than 2 conditionals or loops, or ternaries that made the solution harder to read.

Here's how it works. Instead of starting at the beginning, then having to shift the array over when you've inserted into the first array, work backwards. 
Start at the end of both arrays, you know that the biggest of these two must be the last one in the merged array, so replace the (empty) spot at the end of 
the merged array, then move your indexes to the left and repeat. Also, keep an index on the current spot to insert at. Eventually you'll run out of empty spots, 
and start overwriting spots in nums1. This is OK though, because at the point this happens, all the elements that are bigger than the index at which you're 
inserting area already present in the array where there used to be empty space!

Here's what it looks like at the point we start overwriting values in the first array
a = 3, 4, 5, 4, 5, 6
b = 1, 2, 6
aPointer = 3 (index 0)
bPointer = 2 (index 1)
insertAt = the first 5 (index 2)

Then, we start replacing, and the first replacement will actually be from a itself, since it's the next biggest
a = 3, 4, 3, 4, 5, 6
b = 1, 2, 6
aPointer = null (index -1)
bPointer = 2 (index 1)
insertAt = the first 4 (index 1)

Then all that's left is the last 2 (1 and 2) from b, which replace the first 3 and 4, giving us the final result.
a = 1, 2, 3, 4, 5, 6
b = 1, 2, 6
aPointer = null (index -1)
bPointer = null (index -1)
insertAt = null (index -1)

public void merge(int[] a, int aLength, int[] b, int bLength) {
    int aIndex = aLength - 1;  // initialize to the end of a, not including empty space
    int bIndex = bLength - 1;  // initialize to end of b
    int insertAt = aLength + bLength - 1;  // initialize to end of a, including empty space
    while (bIndex >= 0)  // looping over b, because once we're out of b's, the a's remaining are already sorted (since input is sorted)
        if (aIndex >= 0 && a[aIndex] >= b[bIndex])  // a >= b
            a[insertAt--] = a[aIndex--];  // insert value from a, then shift indexes for a and insert
        else  // b < a
            a[insertAt--] = b[bIndex--];  // insert value from b, then shift indexes for b and insert
}
Analysis
Time:
    Worst Case: O(m + n), we iterate over each of m and n once.
    Best Case: O(n), we insert b's into a, and they all happen to fit exactly at the end.
Memory: O(1)
    We introduce 3 variables. If we used aLength and bLength instead of making new variables of aIndex and bIndex, it would actually be just 1 variable, 
    but this is less readable.


