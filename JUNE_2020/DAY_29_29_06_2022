406. Queue Reconstruction by Height [MEDIUM]
You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.

Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).

 

Example 1:

Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
Explanation:
Person 0 has height 5 with no other people taller or the same height in front.
Person 1 has height 7 with no other people taller or the same height in front.
Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.
Person 3 has height 6 with one person taller or the same height in front, which is person 1.
Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.
Person 5 has height 7 with one person taller or the same height in front, which is person 1.
Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.
Example 2:

Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
 

Constraints:

1 <= people.length <= 2000
0 <= hi <= 106
0 <= ki < people.length
It is guaranteed that the queue can be reconstructed.


MY-SOLUTION

// https://leetcode.com/problems/queue-reconstruction-by-height/discuss/2211641/Visual-Explanation-or-JAVA-Greedy

Solution 1. Sort() to get the same height (h) persons, lower-order (k) come first. When we come to the 2nd height level, we insert them to the list based on the index. Because we order (k) will always specify where this person should be located, we will end that perfect order we were looking for:

Visualization for solution 1:
I: 7,0 - 4,4 - 7,1 - 5,0 - 6,1 - 5,2
O after sort(): 7,0 - 7,1 - 6,1 - 5,0 - 5,2 - 4,4
1: 7,0
2: 7,0 - 7,1
3: 7,0 - 6,1 - 7,1
4: 5,0 - 7,0 - 6,1 - 7,1
5: 5,0 - 7,0 - 5,2 - 6,1 - 7,1
6: 5,0 - 7,0 - 5,2 - 4,4 - 6,1 - 7,1

class Solution {
    public int[][] reconstructQueue(int[][] people) {

        Arrays.sort(people, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                if (o1[0] != o2[0]) { // diff height, compare order
                    return o2[0] - o1[0]; // higher first  
                } else {
                    return o1[1] - o2[1]; // smaller order first
                }
            }
        });

        LinkedList<int[]> list = new LinkedList<>();
        for (int i = 0; i < people.length; i++){
            list.add(people[i][1], people[i]);
        }
        return list.toArray(people);
    }
}


public int[][] reconstructQueue(int[][] people) {
	Arrays.sort(people, (a,b) -> a[0] == b[0] ? a[1] - b[1] : b[0] - a[0]);

	List<int[]> ordered = new LinkedList<>();
	for (int[] p: people) ordered.add(p[1], p);

	return ordered.toArray(new int[people.length][2]);
}
Time Complexity: O(nlogn + n^2) = O(n^2): We sort the array in O(nlogn) time and list insertion will take O(n^2) for n insertions at worst.
Space Complexity: O(n)

======================================================================================================================================================

Intuition
A person only knows about the people in front that are taller. If we add people in order of non-decreasing height (tallest to shortest), then the next person's position in the array is just their k value.

Also, adding shorter people to the queue does not affect the relative order of the taller people.

Implementation
Let person represent an element in people.

Sort people by height (person[0]) from tallest to shortest. Break ties using their k value (person[1]).
Insert into the resulting array using person[1](their k-value or the number of people that are taller in front of them) as the index we must insert the person to the resulting queue.

======================================================================================================================================================


EXPLANATION AND IDEA:
people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
queue[j] = [hj, kj]
where hj:my height && kj:this number of people are allowed to come on left of me with height greater or equal to me.

Steps to Follow:

step1: sort on the basis of height (put maximum height person on left)

step2: if two person have same height put that person 1st(means on left side) who require less number of people with height greater or equal in left.

now after sorting people array will look like :
people = [[7,0],[7,1],[6,1],[5,0],[5,2],[4,4]]
now make a result arraylist and start putting people on the basis of how many people he/she required on left i.e k .(greedly approch)

DRY RUN after Sorting:
[7,0],[7,1]
[6,1] means that this person want 1 person greater than him/her. and all person in left are greater than him/her(this is what main motive of sorting on basis os height).so just insert it at 1st idx.this will not interfare with [7,1] as 6 is less than 7.
[7,0],[6,1],[7,1]
[5,0],[7,0],[6,1],[7,1]
[5,0],[7,0],[5,2],[6,1],[7,1]
[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]
now just look at code your all doubts will be resolved.

class Solution {
    public int[][] reconstructQueue(int[][] people) {
        
        Arrays.sort(people,new peopleComparator());
        
        List<int[]> result=new ArrayList<int[]>();
        
        for(int[] p:people){
            result.add(p[1],p);
        }
        
        return result.toArray(new int[people.length][2]);
    }
    
    public class peopleComparator implements Comparator<int[]>{
        public int compare(int[] one,int[] two){
            if(one[0]==two[0]) return one[1]-two[1];
            return two[0]-one[0];
        }
    }
    
======================================================================================================================================================


==============Transparent Dividing Line=====================

Solution 2. Sort() to get a shorter person by height (h) with higher-order (k) comes first. Then we build a 2D array with people.length. The core-logic is placing this person according to his/her order (k). This order (k) will indicate the index of this person on this 2D array. Precondition: mark the filled index, so we will not overcount in the following insertion:

Visualization for solution 2:
I: 7,0 - 4,4 - 7,1 - 5,0 - 6,1 - 5,2
O after sort(): 4,4 - 5,2 - 5,0 - 6,1 - 7,1 - 7,0
1: __ __ __ __ 4,4 __
2: __ __ 5,2 __ 4,4 __
3: 5,0 __ 5,2 __ 4,4 __
4: 5,0 __ 5,2 6,1 4,4 __
5: 5,0 __ 5,2 6,1 4,4 7,1
6: 5,0 7,0 5,2 6,1 4,4 7,1

class Solution {
    public int[][] reconstructQueue(int[][] people) {

        Arrays.sort(people, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                if (o1[0] != o2[0]) {
                    return o1[0] - o2[0]; // shorter first
                } else {
                    return o2[1] - o1[1]; // higher order first
                }
            }
        });

        int[][] ans = new int[people.length][];
        for (int i = 0; i < people.length; i++) {
            int current = 0, j=0;
            for (; j < ans.length; j++) {
                if(ans[j] == null) {
                    if(current == people[i][1]) {
                        break;
                    }
                    current++;
                }
            }
            ans[j] = people[i];
        }
        return ans;
    }
}

