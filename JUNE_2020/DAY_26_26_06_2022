1423. Maximum Points You Can Obtain from Cards [MEDIUM]

There are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.

In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.

Your score is the sum of the points of the cards you have taken.

Given the integer array cardPoints and the integer k, return the maximum score you can obtain.

 

Example 1:

Input: cardPoints = [1,2,3,4,5,6,1], k = 3
Output: 12
Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.
Example 2:

Input: cardPoints = [2,2,2], k = 2
Output: 4
Explanation: Regardless of which two cards you take, your score will always be 4.
Example 3:

Input: cardPoints = [9,7,7,9,7,7,9], k = 7
Output: 55
Explanation: You have to take all the cards. Your score is the sum of points of all cards.
 

Constraints:

1 <= cardPoints.length <= 105
1 <= cardPoints[i] <= 104
1 <= k <= cardPoints.length

MY_SOLUTION

//// https://www.youtube.com/watch?v=GIO9YRFmMXA


When taking a card from either left or right k times, there will have 3 cases:

All selected cards from the left.
All selected cards from the right.
Selected cards taken from both sides.
The first 2 cases are the same.

Considering taking sum of all k cards on the left, we swap each k - i card with every n - i card, w
here n is size of card pile; then, we can compare which one gives larger sum.

public int maxScore(int[] cardPoints, int k) {
    int sumfront = 0;
    int sumback = 0;
    int max = 0;
    
    int front = 0,back = cardPoints.length-1;
    
    for(int i =0;i<k;i++){ //get sum of just the front
        sumfront += cardPoints[front++];
    }
    max = sumfront; //put front sum as max
	
    for(int i=0;i<k;i++){ //get sum of (back + front) sum one by one
        sumback += cardPoints[back--];
        sumfront -= cardPoints[--front];
        max = Math.max(max,sumback+sumfront); //check for max
    }
    
    return max;
    
}


==============================================================================================================================

class Solution {
    public int maxScore(int[] cardPoints, int k) {
        int sum = 0;
        for(int num : cardPoints){
            sum += num;
        }
        
        int ans = 0, window = 0;
        int len = cardPoints.length;
        
        if(len == k) return sum;
        
        for(int i = 0; i < len - k - 1; i++){
            window += cardPoints[i];
        }
        
        for(int i = len - k - 1; i < len; i++){
            window += cardPoints[i];
            ans = Math.max(ans, sum - window);
            window -= cardPoints[i-(len-k-1)];
        }
        return ans;
        
    }
}



