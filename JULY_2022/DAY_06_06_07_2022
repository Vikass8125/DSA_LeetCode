509. Fibonacci Number [EASY]
The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 

Constraints:

0 <= n <= 30


MY_SOLUTION

class Solution {
    /*int[] dp = new int[31]; // Global Variable
    public int fib(int n) {
        //RECIRSION

        if(n <= 1) return n;
        return fib(n-1) + fib(n-2);
    
    
    ===================================================================
        //DYNAMIC PROGRAMING
        if(n <= 1) return n;
        
        if(dp[n] != 0) return dp[n];
        
        dp[n] = fib(n-1) + fib(n-2);
        
        return dp[n];
         */
             
        
        
        public int fib(int n) {
            /*
            if(n <= 1) return n; // Edge Case
            
            int[] dp = new int[n+1];
            dp[0] = 0;
            dp[1] = 1;
            
            for(int i = 2; i < dp.length; i++){
                dp[i] = dp[i-1] + dp[i-2];
            }
            
            return dp[n];
            */
           
            // Iterative
            if(n <= 1) return n; // Edge Case
            
            int prev = 0;
            int cur = 1;
            
            for(int i = 2; i <= n; i++){
                int temp = cur;
                cur = prev + cur;
                prev = temp;
            }
            return cur;
               
    }
}


==============================================================================================================================


Recursion

class Solution {
    public int fib(int n) {
        if(n < 2){
            return n;
        }
        return fib(n - 1) + fib(n - 2);
    }
}
Tabulation space complexity O(n)

class Solution {
    public int fib(int n) {
        if(n == 0) return 0;
        if(n == 1) return 1;
        int[]arr = new int[n+1];
        arr[0] = 0;
        arr[1] = 1;
        for(int i = 2; i <= n; i++){
            arr[i] = arr[i-1] + arr[i-2];
        }
        return arr[n];
    }
}
Tabulation space complexity O(1)

class Solution {
    public int fib(int n) {
        if(n == 0) return 0;
        if(n == 1) return 1;
       int prev = 0 , cur = 1 , next = 0;
        for(int i = 2; i <= n; i++){
            next = prev + cur;
			prev = cur;
			cur = next;
        }
        return cur;
    }
}
