92. Reverse Linked List II  [MEDIUM]
Given the head of a singly linked list and two integers left and right where left <= right, 
reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
 

Follow up: Could you do it in one pass?

MY_SOLITION


Approach 1: Recursion
Intuition

The idea for linked list reversal using recursion springs from a similar idea that we use for reversing an array. 
If we want to reverse an array, the huge advantage that we have is the availability of indexes.
So, what we can do there is to simply have two pointers, one at the beginning of the array and one at the end.
We repeatedly swap elements pointed to by these two pointers and we move both the pointers towards the center of the array. 
Let's quickly look at this simple algorithm on a sample array before we move on to linked lists.
The first approach for reversing a portion of the given linked list is based on the similar idea expressed above. 
Essentially, we want two different pointers, one at the m^{th} node from the beginning and another one from the n^{th} node from the beginning. 
Once we have such pointers in place, we can repeatedly swap the data between the nodes and progress these pointers towards each other like we saw in the case of an array.

However, we don't have any backward pointers in our linked list and neither do we have any indexes. 
So, we rely on recursion to simulate the backward pointer. Essentially, the backtracking process in a recursion will help us in simulating the backward movement 
of the pointer from the n^{th} node in the linked list towards the center.
 
Algorithm

We define a recursion function that will do the job of reversing a portion of the linked list.
Let's call this function recurse. The function takes in 3 parameters: m being the starting point of the reversal, n being the ending point for the reversal, 
and a pointer right which will start at the n^{th} node in the linked list and move backwards with the backtracking of the recursion. 
If this is not clear at the moment, the diagrams that follow will help.
Additionally, we have a pointer called left which starts from the m^{th} node in the linked list and moves forward.
In Python, we have to take a global variable for this which get's changed with recursion. In other languages, where changes made in function calls persist, 
we can consider this pointer as an additional variable for the function recurse.
In a recursion call, given m, n, and right, we check if n == 1. If this is the case, we don't need to go any further.

Until we reach n = 1, we keep moving the right pointer one step forward and after doing that, we make a recursive call with the value of n decreased by 1. 
At the same time, we keep on moving the left pointer forward until m == 1. When we refer to a pointer being moved forward, it essentially means pointer.next.
So we backtrack as soon as n reaches 1. 
At that point of time, the right pointer is at the last node of the sublist we want to reverse and the left has already reached the first node of this sublist. 
So, we swap out the data and move the left pointer one step forward using left = left.next. We need this change to persist across the backtracking process.
From there on, every time we backtrack, the right pointer moves one step backwards. This is the simulation we've been mentioning all along. 
The backward movement is simulated by backtracking.
We stop the swaps when either right == left, which happens if the sublist size is odd, or, right.next == left which happens when during the backtracking 
process for an even sized sublist, the right pointer crosses left. We use a global boolean flag for stopping the swaps once these conditions are met.


class Solution {

    // Object level variables since we need the changes
    // to persist across recursive calls and Java is pass by value.
    private boolean stop;
    private ListNode left;

    public void recurseAndReverse(ListNode right, int m, int n) {

        // base case. Don't proceed any further
        if (n == 1) {
            return;
        }

        // Keep moving the right pointer one step forward until (n == 1)
        right = right.next;

        // Keep moving left pointer to the right until we reach the proper node
        // from where the reversal is to start.
        if (m > 1) {
            this.left = this.left.next;
        }

        // Recurse with m and n reduced.
        this.recurseAndReverse(right, m - 1, n - 1);

        // In case both the pointers cross each other or become equal, we
        // stop i.e. don't swap data any further. We are done reversing at this
        // point.
        if (this.left == right || right.next == this.left) {
            this.stop = true;            
        }

        // Until the boolean stop is false, swap data between the two pointers
        if (!this.stop) {
            int t = this.left.val;
            this.left.val = right.val;
            right.val = t;

            // Move left one step to the right.
            // The right pointer moves one step back via backtracking.
            this.left = this.left.next;
        }
    }

    public ListNode reverseBetween(ListNode head, int m, int n) {
        this.left = head;
        this.stop = false;
        this.recurseAndReverse(head, m, n);
        return head;
    }
}
Complexity Analysis

Time Complexity: O(N) since we process all the nodes at-most twice. 
Once during the normal recursion process and once during the backtracking process. 
During the backtracking process we only just swap half of the list if you think about it, but the overall complexity is O(N).
Space Complexity: O(N) in the worst case when we have to reverse the entire list. This is the space occupied by the recursion stack.


Approach 2: Iterative Link Reversal.
Intuition

In the previous approach, we looked at an algorithm for reversing a portion of the given linked list such that the underlying structure doesn't change. 
We only modified the values of the nodes for achieving the reversal. 
However, it may so happen that you cannot change the data available in the nodes. In that scenario, we have to modify the links themselves to achieve the reversal.

Essentially, starting from the node at position m and all the way up to n, we reverse the next pointers for all the nodes in between. 
Let's look at the algorithm for achieving this.

Algorithm

Before looking at the algorithm, it's important to understand how the link reversal will work and what set of pointers will be required for the same.
Let's say we have a linked list consisting of three different nodes, A → B → C and we want to reverse the links between the nodes and obtain A ← B ← C.

Suppose we have at our disposal, two pointers. One of them points to the node A and the other one points to the node B. 
Let's call these pointers prev and cur respectively. We can simply use these two pointers to reverse the link between A and B.

cur.next = prev
The only problem with this is, we don't have a way of progressing further i.e. once we do this, we can't reach the node C. 
That's why we need a third pointer that will help us continue the link reversal process. So, we do the following instead.

third = cur.next
cur.next = prev
prev = cur
cur = third
We do the above iteratively and we will achieve what the question asks us to do. Let's look at the steps for the algorithm now.

We need two pointers, prev and cur as explained above.

The prev pointer should be initialized to None initially while cur is initialized to the head of the linked list.

We progress the cur pointer one step at a time and the prev pointer follows it.

We keep progressing the two pointers in this way until the cur pointer reaches the m^{th} node from the beginning of the list. 
This is the point from where we start reversing our linked list.

An important thing to note here is the usage of two additional pointers which we will call as tail and con. 
The tail pointer points to the m^{th} node from the beginning of the linked list and we call it a tail pointer since this node becomes the tail of the reverse sublist. 
The con points to the node one before m^{th} node and this connects to the new head of the reversed sublist. 
Let's take a look at a figure to understand these two pointers better.


The tail and the con pointers are set once initially and then used in the end to finish the linked list reversal.

Once we reach the m^{th} node, we iteratively reverse the links as explained before using the two pointers. 
We keep on doing this until we are done reversing the link (next pointer) for the n^{th} node. At that point, the prev pointer would point to the n^{th} node.

We use the con pointer to attach to the prev pointer since the node now pointed to by 
the prev pointer (the n^{th} node from the beginning) will come in place of the m^{th} node due after the reversal. 
Similarly, we will make use of the tail pointer to connect to the node next to the prev node i.e. (n+1)^{th} node from the beginning.
  
  class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {

        // Empty list
        if (head == null) {
            return null;
        }

        // Move the two pointers until they reach the proper starting point
        // in the list.
        ListNode cur = head, prev = null;
        while (m > 1) {
            prev = cur;
            cur = cur.next;
            m--;
            n--;
        }

        // The two pointers that will fix the final connections.
        ListNode con = prev, tail = cur;

        // Iteratively reverse the nodes until n becomes 0.
        ListNode third = null;
        while (n > 0) {
            third = cur.next;
            cur.next = prev;
            prev = cur;
            cur = third;
            n--;
        }

        // Adjust the final connections as explained in the algorithm
        if (con != null) {
            con.next = prev;
        } else {
            head = prev;
        }

        tail.next = cur;
        return head;
    }
}
Complexity Analysis

Time Complexity: O(N) considering the list consists of N nodes. 
We process each of the nodes at most once (we don't process the nodes after the n^{th} node from the beginning.
Space Complexity: O(1) since we simply adjust some pointers in the original linked list and only use O(1) additional memory for achieving the final result.

=======================================================================
public ListNode reverseBetween(ListNode head, int m, int n) {
    if(head == null) return null;
    ListNode dummy = new ListNode(0); // create a dummy node to mark the head of this list
    dummy.next = head;
    ListNode pre = dummy; // make a pointer pre as a marker for the node before reversing
    for(int i = 0; i<m-1; i++) pre = pre.next;
    
    ListNode start = pre.next; // a pointer to the beginning of a sub-list that will be reversed
    ListNode then = start.next; // a pointer to a node that will be reversed
    
    // 1 - 2 -3 - 4 - 5 ; m=2; n =4 ---> pre = 1, start = 2, then = 3
    // dummy-> 1 -> 2 -> 3 -> 4 -> 5
    
    for(int i=0; i<n-m; i++)
    {
        start.next = then.next;
        then.next = pre.next;
        pre.next = then;
        then = start.next;
    }
    
    // first reversing : dummy->1 - 3 - 2 - 4 - 5; pre = 1, start = 2, then = 4
    // second reversing: dummy->1 - 4 - 3 - 2 - 5; pre = 1, start = 2, then = 5 (finish)
    
    return dummy.next;
    
}
===================================================================

// https://leetcode.com/problems/reverse-linked-list-ii/discuss/2311084/JavaC%2B%2B-Tried-to-Explain-every-step

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode dummy = new ListNode(0); // created dummy node
        dummy.next = head;
        ListNode prev = dummy; // intialising prev pointer on dummy node
        
        for(int i = 0; i < left - 1; i++)
            prev = prev.next; // adjusting the prev pointer on it's actual index
        
        ListNode curr = prev.next; // curr pointer will be just after prev
        // reversing
        for(int i = 0; i < right - left; i++){
            ListNode forw = curr.next; // forw pointer will be after curr
            curr.next = forw.next;
            forw.next = prev.next;
            prev.next = forw;
        }
        return dummy.next;
    }
}
==========================================================================

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */


/*  Approach:  

                                                   reverse
    Input: m = 4, n = 6                      m  <----------->  n
    
                  a   ->   b   ->   c   ->   d   ->   e   ->   f   ->   g   ->   h
                 head       
    
    
    i. Store preHead as parent of head to return (preHead.next) at last.
       It will return the updated list with new head at that position.

     
          0  ->   a   ->   b   ->   c   ->   d   ->   e   ->   f   ->   g   ->   h
       preHead   head


    ii. Loop prev till reaches position m - 1
    
                                            m                 n
         0  ->   a   ->   b   ->   c   ->   d   ->   e   ->   f   ->   g   ->   h
       preHead   head             prev
       


    iii. Reverse list from m to n
    
                                            m                 n
         0  ->   a   ->   b   ->   c   ->   d   ->   e   ->   f   ->   g   ->   h
       preHead   head             prev     curr     temp
       
    
        reverseHead = null
        
                                            d   ->   e   ->   f   ->   g
                                           curr     temp                   temp = curr.next
                                           
                                  revH  <-  d        e   ->   f   ->   g
                                   --      curr     temp                   curr.next = revH
                                           
                                        <-  d        e   ->   f   ->   g
                                   --      revH     curr                   revH = curr, curr = temp
                                   
                                        <-  d        e   ->   f   ->   g
                                   --      revH     curr     temp          temp = curr.next
                                   
                            -----------------------------------------------------------------------------------
                            
                                        <-   d   <-  e        f   ->   g
                                   --      revH     curr     temp           curr.next = revH
                                   
                                        <-   d   <-  e        f   ->   g
                                   --               revH     curr           revH = curr, curr = temp
                                   
                                        <-   d   <-  e        f   ->   g
                                   --               revH     curr     temp  temp = curr.next
                                   
                            -----------------------------------------------------------------------------------           
                                   
                                   
                                        <-   d   <-  e   <-   f        g
                                   --               revH     curr     temp    curr.next = revH
                                    
                                        <-   d   <-  e   <-   f        g
                                   --                        revH     curr    revH = curr, curr = temp
                                   
                                   
    
               Reversed sublist :  __   <-   d   <-  e   <-   f     <=>   f  ->  e  ->  d  -> __
    
    
    iv. Connect the reversed list


    
    
            
            
*/

class Solution {
    
    public ListNode reverseBetween(ListNode head, int left, int right) {
        
        
        int m = left, n = right;
        
        /*  Corner Case */
        
        if (head == null || head.next == null || m <= 0 || n <= 0 || m == n) {
            return head;
        }
        
        // to store the head index, to return the final updated head at this index.
        
        ListNode preHead = new ListNode(0);  
        preHead.next = head;
        
        // Traverse the list till position m. Position m -> index m-1 => loop till 0 to m-2.
        
        ListNode prev = preHead;
        
        for (int i = 0; i <= m-2; i++) {
            prev = prev.next;
        }
        
        // Reverse the list from position m to n.
        
        ListNode curr = prev.next;
        ListNode temp = null;
        
        ListNode reverseHead = null;
        
        for (int i = 0; i <= n-m; i++) {
            
            temp = curr.next;         // save next of current for next iteration
            curr.next = reverseHead;  // reset current to point back not forward
            
            reverseHead = curr;       // make current as head of new reverseHead list
            curr = temp;              // move to next node
            
        }
        
        
        // Connect the reversed list with the prev node (position m-1)
        
        prev.next.next = curr;
        prev.next = reverseHead;
        
     
    return preHead.next;
        
        
    }
}

=============================================================================================
Approach 1 Using Stack,it takes two traversals(using data change)

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(left == right) return head;
     
        ListNode ptr = head;
        int count = 1;
        Stack<Integer> st = new Stack<>();
        while(count <= right){
            if(count >= left && count <= right){
                st.push(ptr.val);
            }
            ptr = ptr.next;
            count++;
        }
        
        count = 1;
        ptr = head;
        while(count <= right){
            if(count >= left && count <= right){
                ptr.val = st.pop();
            }
            ptr = ptr.next;
            count++;
        }
        
        return head;
    }
}
Single Traversal Solution,Using Link Change

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(left == right) return head;
        
        int count = 0;
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode ptr = dummy;    //ptr for iteration
        ListNode h1 = null;
        
        while(ptr != null){
            if(count == left - 1){
                 h1 = ptr;  //store it as we have to change its next pointer
            }
            
            if(count == left){
                ListNode h2 = ptr;      //store it as we have to change its next pointer
                reverse(h2,right - left,h1,h2);
                return dummy.next;
            }
            ptr = ptr.next;
            count++;
        }
        return dummy.next;
    }
    
    private void reverse(ListNode head,int con,ListNode h1,ListNode h2){
        //function for reversing the sub list and after that 
        //add it to main list using h1 and h2 pointers
        
        ListNode prev = head;
        ListNode cur = prev.next;
        ListNode next = null ;
        
        for(int i = 1;i<=con;i++){ //reverse the sub list
            next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }
        
        h1.next = prev;
        h2.next = cur;
    }
}
===================================================================================
public ListNode reverseBetween(ListNode head, int left, int right) {

        // In case of empty list return null
        if (head == null) {
            return null;
        }

        int count = 1;

        // Move curr and prev until they reach proper starting point in the list
        ListNode curr = head;

        ListNode prev = null;

        while (curr != null && count < left) {
            prev = curr;
            curr = curr.next;
            count++;
        }

        // A node before the subList's node
        ListNode beforeNode = prev;

        // Sublist's first node
        ListNode subHead = curr;

        ListNode next;

        // Reverse the sublist
        while (curr != null && count <= right) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
            count++;
        }

        // Fix the connections
        if (beforeNode != null) {
            beforeNode.next = prev;
        } else {
            head = prev;
        }

        subHead.next = curr;

        return head;
    }
