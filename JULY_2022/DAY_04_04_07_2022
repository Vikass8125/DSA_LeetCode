135. Candy  [HARD]

There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

 

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
Example 2:

Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.
 

Constraints:

n == ratings.length
1 <= n <= 2 * 104
0 <= ratings[i] <= 2 * 104

MY_SOLUTION

class Solution {
    public int candy(int[] ratings) {
        int candies = 0;
        int len = ratings.length;
        
        int[] left = new int[len];
        int[] right = new int[len];
        
        Arrays.fill(left, 1);
        Arrays.fill(right, 1);
        
        // Left Array
        for(int i = 1; i < len; i++){
            if(ratings[i] > ratings[i-1]) left[i] = left[i-1] + 1;
        }
        
        // Right Array
        
        for(int i = len-2; i >=0; i--){
            if(ratings[i] > ratings[i+1]) right[i] = right[i+1] + 1;
        }
        
        // Merging
        for(int i = 0; i < len; i++){
            candies += Math.max(left[i], right[i]);
        }
        return candies;
        
    }
}


ANOTHER_SOLUTION
This solution picks each element from the input array only once. First, we give a candy to the first child. Then for each child we have three cases:

His/her rating is equal to the previous one -> give 1 candy.
His/her rating is greater than the previous one -> give him (previous + 1) candies.
His/her rating is less than the previous one -> don't know what to do yet, let's just count the number of such consequent cases.
When we enter 1 or 2 condition we can check our count from 3. If it's not zero then we know that we were descending before and we have 
everything to update our total candies amount: number of children in descending sequence of raitings - coundDown, number of candies given 
at peak - prev (we don't update prev when descending). Total number of candies for "descending" children can be found through arithmetic 
progression formula (1+2+...+countDown). Plus we need to update our peak child if his number of candies is less then or equal to countDown.

Here's a pretty concise code below.

public class Solution {
    public int candy(int[] ratings) {
        if (ratings == null || ratings.length == 0) return 0;
        int total = 1, prev = 1, countDown = 0;
        for (int i = 1; i < ratings.length; i++) {
            if (ratings[i] >= ratings[i-1]) {
                if (countDown > 0) {
                    total += countDown*(countDown+1)/2; // arithmetic progression
                    if (countDown >= prev) total += countDown - prev + 1;
                    countDown = 0;
                    prev = 1;
                }
                prev = ratings[i] == ratings[i-1] ? 1 : prev+1;
                total += prev;
            } else countDown++;
        }
        if (countDown > 0) { // if we were descending at the end
            total += countDown*(countDown+1)/2;
            if (countDown >= prev) total += countDown - prev + 1;
        }
        return total;
    }
}
