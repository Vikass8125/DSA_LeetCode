307. Range Sum Query - Mutable [MEDIUM]
Given an integer array nums, handle multiple queries of the following types:

Update the value of an element in nums.
Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right 
inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
 

Example 1:

Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8
 

Constraints:

1 <= nums.length <= 3 * 104
-100 <= nums[i] <= 100
0 <= index < nums.length
-100 <= val <= 100
0 <= left <= right < nums.length
At most 3 * 104 calls will be made to update and sumRange.

MY_SOLUTION

This is to share the explanation of the BIT and the meaning of the bit operations.

public class NumArray {
	/**
	 * Binary Indexed Trees (BIT or Fenwick tree):
	 * https://www.topcoder.com/community/data-science/data-science-
	 * tutorials/binary-indexed-trees/
	 * 
	 * Example: given an array a[0]...a[7], we use a array BIT[9] to
	 * represent a tree, where index [2] is the parent of [1] and [3], [6]
	 * is the parent of [5] and [7], [4] is the parent of [2] and [6], and
	 * [8] is the parent of [4]. I.e.,
	 * 
	 * BIT[] as a binary tree:
	 *            ______________*
	 *            ______*
	 *            __*     __*
	 *            *   *   *   *
	 * indices: 0 1 2 3 4 5 6 7 8
	 * 
	 * BIT[i] = ([i] is a left child) ? the partial sum from its left most
	 * descendant to itself : the partial sum from its parent (exclusive) to
	 * itself. (check the range of "__").
	 * 
	 * Eg. BIT[1]=a[0], BIT[2]=a[1]+BIT[1]=a[1]+a[0], BIT[3]=a[2],
	 * BIT[4]=a[3]+BIT[3]+BIT[2]=a[3]+a[2]+a[1]+a[0],
	 * BIT[6]=a[5]+BIT[5]=a[5]+a[4],
	 * BIT[8]=a[7]+BIT[7]+BIT[6]+BIT[4]=a[7]+a[6]+...+a[0], ...
	 * 
	 * Thus, to update a[1]=BIT[2], we shall update BIT[2], BIT[4], BIT[8],
	 * i.e., for current [i], the next update [j] is j=i+(i&-i) //double the
	 * last 1-bit from [i].
	 * 
	 * Similarly, to get the partial sum up to a[6]=BIT[7], we shall get the
	 * sum of BIT[7], BIT[6], BIT[4], i.e., for current [i], the next
	 * summand [j] is j=i-(i&-i) // delete the last 1-bit from [i].
	 * 
	 * To obtain the original value of a[7] (corresponding to index [8] of
	 * BIT), we have to subtract BIT[7], BIT[6], BIT[4] from BIT[8], i.e.,
	 * starting from [idx-1], for current [i], the next subtrahend [j] is
	 * j=i-(i&-i), up to j==idx-(idx&-idx) exclusive. (However, a quicker
	 * way but using extra space is to store the original array.)
	 */

	int[] nums;
	int[] BIT;
	int n;

	public NumArray(int[] nums) {
		this.nums = nums;

		n = nums.length;
		BIT = new int[n + 1];
		for (int i = 0; i < n; i++)
			init(i, nums[i]);
	}

	public void init(int i, int val) {
		i++;
		while (i <= n) {
			BIT[i] += val;
			i += (i & -i);
		}
	}

	void update(int i, int val) {
		int diff = val - nums[i];
		nums[i] = val;
		init(i, diff);
	}

	public int getSum(int i) {
		int sum = 0;
		i++;
		while (i > 0) {
			sum += BIT[i];
			i -= (i & -i);
		}
		return sum;
	}

	public int sumRange(int i, int j) {
		return getSum(j) - getSum(i - 1);
	}
}

// Your NumArray object will be instantiated and called as such:
// NumArray numArray = new NumArray(nums);
// numArray.sumRange(0, 1);
// numArray.update(1, 10);
// numArray.sumRange(1, 2);
==============================================================================================================

class NumArray {
  static class BinaryIndexedTree {
    int[] nums;
    int[] BIT;
    int n;

    public BinaryIndexedTree(int[] nums) {
      this.nums = nums;
      this.n = nums.length;
      BIT = new int[n + 1];
      for (int i = 0; i < n; i++) {
        init(i, nums[i]);
      }
    }

    void init(int i, int val) {
      i++;
      while (i <= n) {
        BIT[i] += val;
        i += (i & -i);
      }
    }

    void update(int i, int val) {
      int diff = val - nums[i];
      nums[i] = val;
      init(i, diff);
    }

    int getSum(int i) {
      i++;
      int ret = 0;
      while (i > 0) {
        ret += BIT[i];
        i -= (i & -i);
      }
      return ret;
    }
  }

  BinaryIndexedTree binaryIndexedTree;

  public NumArray(int[] nums) {
    binaryIndexedTree = new BinaryIndexedTree(nums);
  }

  public void update(int index, int val) {
    binaryIndexedTree.update(index, val);
  }

  public int sumRange(int left, int right) {
    return binaryIndexedTree.getSum(right) - binaryIndexedTree.getSum(left - 1);
  }
}

============================================================================================
class NumArray {
  static class BinaryIndexedTree {
    int[] nums;
    int[] BIT;
    int n;

    public BinaryIndexedTree(int[] nums) {
      this.nums = nums;
      this.n = nums.length;
      BIT = new int[n + 1];
      for (int i = 0; i < n; i++) {
        init(i, nums[i]);
      }
    }

    void init(int i, int val) {
      i++;
      while (i <= n) {
        BIT[i] += val;
        i += (i & -i);
      }
    }

    void update(int i, int val) {
      int diff = val - nums[i];
      nums[i] = val;
      init(i, diff);
    }

    int getSum(int i) {
      i++;
      int ret = 0;
      while (i > 0) {
        ret += BIT[i];
        i -= (i & -i);
      }
      return ret;
    }
  }

  BinaryIndexedTree binaryIndexedTree;

  public NumArray(int[] nums) {
    binaryIndexedTree = new BinaryIndexedTree(nums);
  }

  public void update(int index, int val) {
    binaryIndexedTree.update(index, val);
  }

  public int sumRange(int left, int right) {
    return binaryIndexedTree.getSum(right) - binaryIndexedTree.getSum(left - 1);
  }
}
============================================================================================================
For this problem we can have three possible solutions:

Naive Solution: Store the nums array and on each update just update the nums array directly. On each query, take the sum from left to right.
Caching: Maintain a prefix sum, and on each query directly return prefix[right+1] - prefix[left]. 
On each update, adjust the whole prefix sum array according to the update made.
Segment-Tree: Prepare a segment tree, On each query, traverse the segment tree of logarithmic height and return ans. 
On each update, traverse the same segment tree of logarithmic height and update

When to use the naive Approach: when Q <<< U (Here a <<< b means a is much lesser than b).
When to use the Caching Approach: when U <<< Q.
And Segment tree can be used, when U === Q (here a === b means a is nearly equal to b and both are high values).

class SegmentTreeNode {
        int start, end;
        SegmentTreeNode left, right;
        int sum;

        public SegmentTreeNode(int start, int end) {
            this.start = start;
            this.end = end;
            this.left = null;
            this.right = null;
            this.sum = 0;
        }
    }
      
    SegmentTreeNode root = null;
   
    public NumArray(int[] nums) {
        root = buildTree(nums, 0, nums.length-1);
    }

    private SegmentTreeNode buildTree(int[] nums, int start, int end) {
        if (start > end) {
            return null;
        } else {
            SegmentTreeNode ret = new SegmentTreeNode(start, end);
            if (start == end) {
                ret.sum = nums[start];
            } else {
                int mid = start  + (end - start) / 2;             
                ret.left = buildTree(nums, start, mid);
                ret.right = buildTree(nums, mid + 1, end);
                ret.sum = ret.left.sum + ret.right.sum;
            }         
            return ret;
        }
    }
   
    void update(int i, int val) {
        update(root, i, val);
    }
   
    void update(SegmentTreeNode root, int pos, int val) {
        if (root.start == root.end) {
           root.sum = val;
        } else {
            int mid = root.start + (root.end - root.start) / 2;
            if (pos <= mid) {
                 update(root.left, pos, val);
            } else {
                 update(root.right, pos, val);
            }
            root.sum = root.left.sum + root.right.sum;
        }
    }

    public int sumRange(int i, int j) {
        return sumRange(root, i, j);
    }
    
    public int sumRange(SegmentTreeNode root, int start, int end) {
        if (root.end == end && root.start == start) {
            return root.sum;
        } else {
            int mid = root.start + (root.end - root.start) / 2;
            if (end <= mid) {
                return sumRange(root.left, start, end);
            } else if (start >= mid+1) {
                return sumRange(root.right, start, end);
            }  else {    
                return sumRange(root.right, mid+1, end) + sumRange(root.left, start, mid);
            }
        }
    }
    =============================================================================
    
Summary
This article is for intermediate level readers. It introduces the following concepts: Range sum query, Sqrt decomposition, Segment tree.

Solution
Approach 1: Naive
Algorithm

A trivial solution for Range Sum Query - RSQ(i, j) is to iterate the array from index i to j and sum each element.
private int[] nums;
public int sumRange(int i, int j) {
    int sum = 0;
    for (int l = i; l <= j; l++) {
        sum += data[l];
    }
    return sum;
}

public int update(int i, int val) {
    nums[i] = val;
}
// Time Limit Exceeded

Complexity Analysis

Time complexity : O(n) - range sum query, O(1) - update query

For range sum query we access each element from the array for constant time and in the worst case we access nn elements. 
Therefore time complexity is O(n). Time complexity of update query is O(1).

Space complexity : O(1).


Approach 2: Sqrt Decomposition
Intuition

The idea is to split the array in blocks with length of sqrt{n} . 
Then we calculate the sum of each block and store it in auxiliary memory b. 
To query RSQ(i, j), we will add the sums of all the blocks lying 
inside and those that partially overlap with range [i…j].

Algorithm

Range sum query using SQRT decomposition

Figure 1. Range sum query using SQRT decomposition.

In the example above, the array nums's length is 9, which is split into blocks of size sqrt{9}  . 
To get RSQ(1, 7) we add b[1]. It stores the sum of range [3, 5] and partially sums from block 0 and
block 2, which are overlapping boundary blocks.

private int[] b;
private int len;
private int[] nums;

public NumArray(int[] nums) {
    this.nums = nums;
    double l = Math.sqrt(nums.length);
    len = (int) Math.ceil(nums.length/l);
    b = new int [len];
    for (int i = 0; i < nums.length; i++)
        b[i / len] += nums[i];
}

public int sumRange(int i, int j) {
    int sum = 0;
    int startBlock = i / len;
    int endBlock = j / len;
    if (startBlock == endBlock) {
        for (int k = i; k <= j; k++)
            sum += nums[k];
    } else {
        for (int k = i; k <= (startBlock + 1) * len - 1; k++)
            sum += nums[k];
        for (int k = startBlock + 1; k <= endBlock - 1; k++)
            sum += b[k];
        for (int k = endBlock * len; k <= j; k++)
            sum += nums[k];
    }
    return sum;
}

public void update(int i, int val) {
    int b_l = i / len;
    b[b_l] = b[b_l] - nums[i] + val;
    nums[i] = val;
}
// Accepted

Complexity Analysis

Time complexity : O(n) - preprocessing, O(sqrt{n}) - range sum query, O(1) - update query

For range sum query in the worst-case scenario we have to sum approximately 3 sqrt{n} elements. 
In this case the range includes sqrt{n} - 2 blocks, which total sum costs sqrt{n} - 2 operations.
In addition to this we have to add the sum of the two boundary blocks. 
This takes another 2 (sqrt{n} - 1) operations. The total amount of operations is around 3 sqrt{n} 
Space complexity : O(sqrt{n}).We need additional sqrt{n}  memory to store all block sums.

Approach 3: Segment Tree
Algorithm

Segment tree is a very flexible data structure, because it is used to solve numerous range query problems 
like finding minimum, maximum, sum, greatest common divisor, least common denominator in array in logarithmic time.

The segment tree for array a[0,1,…,n−1] is a binary tree in which each node contains aggregate information (min, max, sum, etc.) 
for a subrange [i…j] of the array, as its left and right child hold information for range [i… (i+j)/2] and [(i+j)/2+1,j].

Segment tree could be implemented using either an array or a tree. For an array implementation, if the element at index ii is not a leaf, 
its left and right child are stored at index 2i2i and 2i + 12i+1 respectively.

In the example above (Figure 2), every leaf node contains the initial array elements {2,4,5,7}. 
The internal nodes contain the sum of the corresponding elements in range, e.g. (6) is the sum for the elements from index 0 to index 1. 
The root (18) is the sum of its children (6) and (12), which also holds the total sum of the entire array.

Segment Tree can be broken down to the three following steps:

Pre-processing step which builds the segment tree from a given array.
Update the segment tree when an element is modified.
Calculate the Range Sum Query using the segment tree.

1. Build segment tree
We will use a very effective bottom-up approach to build segment tree. 
We already know from the above that if some node pp holds the sum of [i…j] range, its left and right children hold the 
sum for range [i… (i+j)/2] and [(i+j+1)/2,j] respectively.

Therefore to find the sum of node pp, we need to calculate the sum of its right and left child in advance.

We begin from the leaves, initialize them with input array elements a[0,1,…,n−1]. 
Then we move upward to the higher level to calculate the parents' sum till we get to the root of the segment tree.

int[] tree;
int n;
public NumArray(int[] nums) {
    if (nums.length > 0) {
        n = nums.length;
        tree = new int[n * 2];
        buildTree(nums);
    }
}
private void buildTree(int[] nums) {
    for (int i = n, j = 0;  i < 2 * n; i++,  j++)
        tree[i] = nums[j];
    for (int i = n - 1; i > 0; --i)
        tree[i] = tree[i * 2] + tree[i * 2 + 1];
}

Complexity Analysis

Time complexity : O(n)

Time complexity is O(n), because we calculate the sum of one node during each iteration of the for loop. 
There are approximately 2n2n nodes in a segment tree.

This could be proved in the following way: Segmented tree for array with nn elements has n leaves (the array elements itself). 
The number of nodes in each level is half the number in the level below.

So if we sum the number by level we will get:

n + n/2 + n/4 + n/8 + ..... + 1 ≈2n

Space complexity : O(n).

We used 2n2n extra space to store the segment tree.

2. Update segment tree
When we update the array at some index ii we need to rebuild the segment tree, because there are tree nodes which contain the sum of the modified element. 
Again we will use a bottom-up approach. We update the leaf node that stores a[i]a[i]. 
From there we will follow the path up to the root updating the value of each parent as a sum of its children values.

void update(int pos, int val) {
    pos += n;
    tree[pos] = val;
    while (pos > 0) {
        int left = pos;
        int right = pos;
        if (pos % 2 == 0) {
            right = pos + 1;
        } else {
            left = pos - 1;
        }
        // parent is updated after child is updated
        tree[pos / 2] = tree[left] + tree[right];
        pos /= 2;
    }
}

Complexity Analysis

Time complexity : O(logn).

Algorithm has )O(logn) time complexity, because there are a few tree nodes with range that include ith array element, 
one on each level. There are \log(n) levels.

Space complexity : O(1).

3. Range Sum Query
We can find range sum query [L,R] using segment tree in the following way:

Algorithm hold loop invariant:

l≤r and sum of [L…l] and [r…R] has been calculated, where ll and rr are the left and right boundary of calculated sum. 
Initially we set l with left leaf L and r with right leaf R. 
Range [l,r] shrinks on each iteration till range borders meets after approximately logn iterations of the algorithm

Loop till l≤r

Check if l is right child of its parent P

l is right child of P. Then P contains sum of range of l and another child which is outside the range 
[l,r] and we don't need parent P sum. Add l to sumsum without its parent P and set l to point to the right of P
on the upper level.

l is not right child of P. Then parent P contains sum of range which lies in [l,r]. 
Add P to sum and set l to point to the parent of P

Check if r is left child of its parent P

r is left child of P. Then PP contains sum of range of r and another child which is outside the range [l,r] and 
we don't need parent P sum. Add r to sum without its parent P 
and set r to point to the left of P on the upper level.

r is not left child of P. Then parent P contains sum of range which lies in [l,r].
Add P to sum and set r to point to the parent of P

public int sumRange(int l, int r) {
    // get leaf with value 'l'
    l += n;
    // get leaf with value 'r'
    r += n;
    int sum = 0;
    while (l <= r) {
        if ((l % 2) == 1) {
           sum += tree[l];
           l++;
        }
        if ((r % 2) == 0) {
           sum += tree[r];
           r--;
        }
        l /= 2;
        r /= 2;
    }
    return sum;
}

Complexity Analysis

Time complexity :O(logn)

Time complexity is O(logn) because on each iteration of the algorithm we move one level up,
either to the parent of the current node or to the next sibling of parent to the left or right 
direction till the two boundaries meet. In the worst-case scenario this happens at the root after 
logn iterations of the algorithm.

Space complexity : O(1).

Further Thoughts
The iterative version of Segment Trees was introduced in this article. 
A more intuitive, recursive version of Segment Trees to solve this problem is discussed here. 
The concept of Lazy Propagation is also introduced there.
