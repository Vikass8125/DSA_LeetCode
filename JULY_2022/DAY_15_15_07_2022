695. Max Area of Island  [MEDIUM]
You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) 
You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 

Example 1:


Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],
               [0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],
               [0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],
               [0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.
Example 2:

Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.

MY_SOLUTION

class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        // DFS 
        int rows = grid.length;
        int cols = grid[0].length;
        int maxArea = 0;
        
        for(int row = 0; row < rows; row++){
            for(int col = 0; col < cols; col++){
                if(grid[row][col] == 1){
                    maxArea = Math.max(maxArea, getCurrentArea(row, col, grid));
                }
            }
        }
        
        return maxArea;
    }
     
    private int getCurrentArea(int row, int col, int[][] grid){
        if(row < 0 || col < 0 || 
           row >= grid.length || col >= grid[0].length || 
           grid[row][col] <= 0){
            return 0;
        }
        
        // grid[row][col] = 1; the value is 1
        grid[row][col] = -1; // MARKING VISITED
        int leftArea = getCurrentArea(row, col - 1, grid); 
        int rightArea = getCurrentArea(row, col + 1, grid);
        int upArea = getCurrentArea(row - 1, col, grid);
        int downArea = getCurrentArea(row + 1, col, grid);
        
        int totalArea = 1 + leftArea + rightArea + upArea + downArea;
        
        return totalArea;
        
    }
}

==================================================
Approach #1: Depth-First Search (Recursive) [Accepted]
Intuition and Algorithm

We want to know the area of each connected shape in the grid, then take the maximum of these.

If we are on a land square and explore every square connected to it 4-directionally (and recursively squares connected to those squares, and so on), 
then the total number of squares explored will be the area of that connected shape.

To ensure we don't count squares in a shape more than once, let's use seen to keep track of squares we haven't visited before. 
It will also prevent us from counting the same shape more than once.
class Solution {
    int[][] grid;
    boolean[][] seen;

    public int area(int r, int c) {
        if (r < 0 || r >= grid.length || c < 0 || c >= grid[0].length ||
                seen[r][c] || grid[r][c] == 0)
            return 0;
        seen[r][c] = true;
        return (1 + area(r+1, c) + area(r-1, c)
                  + area(r, c-1) + area(r, c+1));
    }

    public int maxAreaOfIsland(int[][] grid) {
        this.grid = grid;
        seen = new boolean[grid.length][grid[0].length];
        int ans = 0;
        for (int r = 0; r < grid.length; r++) {
            for (int c = 0; c < grid[0].length; c++) {
                ans = Math.max(ans, area(r, c));
            }
        }
        return ans;
    }
}
Complexity Analysis

Time Complexity: O(Râˆ—C), where RR is the number of rows in the given grid, and C is the number of columns. We visit every square once.

Space complexity: O(R*C), the space used by seen to keep track of visited squares, and the space used by the call stack during our recursion.

=========================================================
Approach #2: Depth-First Search (Iterative) [Accepted]
Intuition and Algorithm

We can try the same approach using a stack based, (or "iterative") depth-first search.

Here, seen will represent squares that have either been visited or are added to our list of squares to visit (stack). 
For every starting land square that hasn't been visited, we will explore 4-directionally around it, adding land squares that haven't been added to seen to our stack.

On the side, we'll keep a count shape of the total number of squares seen during the exploration of this shape. We'll want the running max of these counts.

class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        boolean[][] seen = new boolean[grid.length][grid[0].length];
        int[] dr = new int[]{1, -1, 0, 0};
        int[] dc = new int[]{0, 0, 1, -1};

        int ans = 0;
        for (int r0 = 0; r0 < grid.length; r0++) {
            for (int c0 = 0; c0 < grid[0].length; c0++) {
                if (grid[r0][c0] == 1 && !seen[r0][c0]) {
                    int shape = 0;
                    Stack<int[]> stack = new Stack();
                    stack.push(new int[]{r0, c0});
                    seen[r0][c0] = true;
                    while (!stack.empty()) {
                        int[] node = stack.pop();
                        int r = node[0], c = node[1];
                        shape++;
                        for (int k = 0; k < 4; k++) {
                            int nr = r + dr[k];
                            int nc = c + dc[k];
                            if (0 <= nr && nr < grid.length &&
                                    0 <= nc && nc < grid[0].length &&
                                    grid[nr][nc] == 1 && !seen[nr][nc]) {
                                stack.push(new int[]{nr, nc});
                                seen[nr][nc] = true;
                            }
                        }
                    }
                    ans = Math.max(ans, shape);
                }
            }
        }
        return ans;
    }
}

Complexity Analysis

Time Complexity: O(R*C), where RR is the number of rows in the given grid, and C is the number of columns. We visit every square once.

Space complexity: O(R*C), the space used by seen to keep track of visited squares, and the space used by stack.

===================================================
Method - 1 : DFS

// TC : O(rows*cols)
// SC : O(rows*cols)

class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int maxArea = 0;
        int rows = grid.length;
        int cols = grid[0].length;
        boolean visited[][] = new boolean[rows][cols];
            
        for(int row=0;row<rows;row++){
            for(int col=0;col<cols;col++){
                if(grid[row][col]==1&&!visited[row][col]){
                    int currArea = dfs(grid,visited,row,col,rows,cols);
                    maxArea = Math.max(maxArea,currArea);
                }
            }
        }
        
        return maxArea;
    }
    
    private int dfs(int grid[][],boolean visited[][],int row,int col,int rows,int cols){
        if(row<0||col<0||row>=rows||col>=cols||visited[row][col]||grid[row][col]==0) 
        return 0;
        
        visited[row][col] = true;
        
        int currArea = 1;
        currArea+=dfs(grid,visited,row-1,col,rows,cols);
        currArea+=dfs(grid,visited,row+1,col,rows,cols);
        currArea+=dfs(grid,visited,row,col+1,rows,cols);
        currArea+=dfs(grid,visited,row,col-1,rows,cols);
        
        return currArea;
    }
}
Method - 2 : BFS

// TC : O(rows*cols)
// SC : O(rows*cols)

class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int maxArea = 0;
        int rows = grid.length;
        int cols = grid[0].length;
        boolean visited[][] = new boolean[rows][cols];
            
        for(int row=0;row<rows;row++){
            for(int col=0;col<cols;col++){
                if(grid[row][col]==1&&!visited[row][col]){
                    int currArea = bfs(grid,visited,row,col,rows,cols);
                    maxArea = Math.max(maxArea,currArea);
                }
            }
        }
        
        return maxArea;
    }
    
    private int bfs(int grid[][],boolean visited[][],int row,int col,int rows,int cols){
        Queue<int[]> queue = new ArrayDeque();
        queue.add(new int[]{row,col});
        int currArea = 0;
        
        while(queue.size()>0){
            int arr[] = queue.remove();
            row = arr[0];
            col = arr[1];
            
            if(visited[row][col]) continue;
            
            visited[row][col] = true;
            currArea++;
            
            if(row-1>=0&&grid[row-1][col]==1&&!visited[row-1][col]){
                queue.add(new int[]{row-1,col});
            }
            if(row+1<rows&&grid[row+1][col]==1&&!visited[row+1][col]){
                queue.add(new int[]{row+1,col});
            }
            if(col-1>=0&&grid[row][col-1]==1&&!visited[row][col-1]){
                queue.add(new int[]{row,col-1});
            }
            if(col+1<cols&&grid[row][col+1]==1&&!visited[row][col+1]){
                queue.add(new int[]{row,col+1});
            }
        }
        
        return currArea;
    }
}
Method - 3 : Union Find

// TC : O(rows*cols*alpha) , alpha being constant can be ignored
// SC : O(rows*cols)

class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int maxArea = 0;
        int rows = grid.length;
        int cols = grid[0].length;
        int totalCells = rows*cols;
        int parent[] = new int[totalCells];
        int rank[] = new int[totalCells];
        int size[] = new int[totalCells];
        
        for(int row=0;row<rows;row++){
            for(int col=0;col<cols;col++){
                if(grid[row][col]==1){
                    int cell = row*cols+col;
                    parent[cell] = cell;
                    size[cell] = 1;
                }
            }
        }
        
        for(int row=0;row<rows;row++){
            for(int col=0;col<cols;col++){
                if(grid[row][col]==1){
                    if(row-1>=0&&grid[row-1][col]==1){
                        union(row,col,row-1,col,cols,parent,rank,size);
                    }
                    if(row+1<rows&&grid[row+1][col]==1){
                        union(row,col,row+1,col,cols,parent,rank,size);
                    }
                    if(col-1>=0&&grid[row][col-1]==1){
                        union(row,col,row,col-1,cols,parent,rank,size);
                    }
                    if(col+1<cols&&grid[row][col+1]==1){
                        union(row,col,row,col+1,cols,parent,rank,size);
                    }
                }
            }
        }
        
        for(int head=0;head<totalCells;head++){
            maxArea = Math.max(maxArea,size[head]);
        }
        
        return maxArea;
    }
    
    private void union(int row1,int col1,int row2,int col2,int cols,int parent[],int rank[],int size[]){
        int cell1 = row1*cols+col1;
        int cell2 = row2*cols+col2;
        
        int parCell1 = find(parent,cell1);
        int parCell2 = find(parent,cell2);
        
        if(parCell1==parCell2) return;
        
        if(rank[parCell1]>rank[parCell2]){
            parent[parCell2] = parCell1;
            size[parCell1]+=size[parCell2];
            size[parCell2] = 0;
        }else if(rank[parCell1]<rank[parCell2]){
            parent[parCell1] = parCell2;
            size[parCell2]+=size[parCell1];
            size[parCell1] = 0;
        }else{
            parent[parCell2] = parCell1;
            size[parCell1]+=size[parCell2];
            size[parCell2] = 0;
            rank[parCell1]++;
        }
    }
    
    private int find(int parent[],int cell){
        if(parent[cell]==cell) return cell;
        return parent[cell] = find(parent,parent[cell]);
    }
}
=========================================
class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int result = 0;
        for (int row = 0; row < grid.length; row++) {
            for (int col = 0; col < grid[0].length; col++) {
                result = Math.max(result, getIslandSize(row, col, grid, 0));
            }
        }
        return result;
    }
    
    private int getIslandSize(int row, int col, int[][] grid, int result) {
        if (row < 0 || col < 0 || row >= grid.length || col >= grid[0].length || grid[row][col] != 1) {
            return result;
        }
         
        result++;
        grid[row][col] = 2;
        
        result = getIslandSize(row+1, col, grid, result);
        result = getIslandSize(row-1, col, grid, result);
        result = getIslandSize(row, col+1, grid, result);
        result = getIslandSize(row, col-1, grid, result);
        
        return result;      
    }
}
======================================================
class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int area=0;
		// Loop over the Entire Grid
        for(int i=0;i< grid.length; i++){
            for(int j=0; j<grid[0].length; j++){
			    // only call the dfs call when we encounter a 1, then find the number of connected land and compare it with the previous area
                if(grid[i][j]==1){
                    area= Math.max(area, dfs(grid, i, j));
                }
            }
        }
        return area;
    }
    
    public int dfs(int[][] grid, int i, int j){
		// if we gets out of bound or its a 0 i.e. water then return 0
        if(i<0 || i>=grid.length || j<0 || j>=grid[0].length || grid[i][j]==0) return 0;
		// if not then mark the grid value to 0 to make sure we do not come back to the same piece of land and cause infinite recursion i.e. stack over flow
        grid[i][j]=0;
		// now just go to all 4 direction get the respective counts and add it all together and return it
        return 1+ dfs(grid, i-1, j)+ dfs(grid, i+1, j)+ dfs(grid, i, j-1)+ dfs(grid, i, j+1);
    }
}
Time complexity: O(N*M)
where N is number of row, and M is number of col of our grid

Space Complexity: O(1)
Not using any extra space


