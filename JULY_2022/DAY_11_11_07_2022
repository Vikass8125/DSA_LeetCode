199. Binary Tree Right Side View [MEDIUM]
Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

 

Example 1:


Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]
Example 2:

Input: root = [1,null,3]
Output: [1,3]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100


MY_SOLUTION
Intuition: We have to do a Recursive Level Order Traversal.

Root Right Left     —-> for Right view

Root Left Right     —–> for Left view

The First Node of every level will be the Right View.

The last Node of Every level will be the Left View.

Approach: 

Create an vector data structure inside both the left and the right side view function
Call for the recursive _left and recursive_right function respectively with the (root,level,vector). Here level will be initially passed as 0.
Return the vector.
Now in the recursive_left function
If vector size is equal to the level then push_back its node value to the vector data structure.
Otherwise call recursive_left for (node->left,level+1,vector)
Call recursive_left for (node->right,level+1,vector)
Now in the recursive_right function
If vector size is equal to the level then push_back its node value to the vector data structure.
Otherwise call recursive_right for (node->right,level+1,vector)
Call recursive_right for (node->left,level+1,vector)
Tip: The Code for the Left and the Right View is almost identical. 

In the Right view code first, you have to call the recursive function for the right then the left node

AND

In the Right view code first, you have to call the recursive function for the Left than the right node

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result = new  ArrayList<Integer>();
        rightView(root, result, 0);
        return result;
    }
    
    public void rightView(TreeNode node, List<Integer> result, int currLevel){
        if(node == null) return;
        
        if(currLevel == result.size()){
            result.add(node.val);
        }
        
        rightView(node.right, result, currLevel + 1);
        rightView(node.left, result, currLevel + 1);
    }
}

Time Complexity: O(N)

Space Complexity: O(H)       (H -> Height of the Tree)


=============================================================================================

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> result=new ArrayList<>();
        
        if(root==null){
            return result;
        }
        
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        
        while(q.size()>0){
            int count=q.size();
            
            while(count-->0){
                TreeNode val=q.remove();
                if(count==0){
                    result.add(val.val);
                }
                if(val.left!=null){
                    q.add(val.left);
                }
                if(val.right!=null){
                    q.add(val.right);
                }
                
            }
        }
        return result;            
    }
}
 
class Solution {
    
    List<Integer> result=new ArrayList<>();
    public List<Integer> rightSideView(TreeNode root) {
        
        levelOrder(root,0);
        return result;
    }
    
    void levelOrder(TreeNode node,int level){
        if(node==null){
            return;
        }
        
        if(result.size()==level){
            result.add(node.val);
        }
        
        levelOrder(node.right,level+1);
        levelOrder(node.left,level+1);
    }
}
