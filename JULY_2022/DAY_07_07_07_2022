97. Interleaving String [MEDIUM]

Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:

s = s1 + s2 + ... + sn
t = t1 + t2 + ... + tm
|n - m| <= 1
The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
Note: a + b is the concatenation of strings a and b.

 

Example 1:


Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
Output: true
Example 2:

Input: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
Output: false
Example 3:

Input: s1 = "", s2 = "", s3 = ""
Output: true
 

Constraints:

0 <= s1.length, s2.length <= 100
0 <= s3.length <= 200
s1, s2, and s3 consist of lowercase English letters.
 

Follow up: Could you solve it using only O(s2.length) additional memory space?

MY_SOLUTION

// RECURSION -> SIMILAR TO PROSSED AND UNPROSSED
class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if(s1.length() + s2.length() != s3.length()) return false;
        return is_Interleave(s1,0,s2,0,"",s3);
    }
    
    public boolean is_Interleave(String s1, int i, String s2, int j, String result, String s3){
        if(result.equals(s3) && i == s1.length() && j == s2.length()) return true;
        
        boolean ans = false;
        if(i < s1.length()){
            ans |= is_Interleave(s1, i + 1, s2, j, result + s1.charAt(i), s3);
        }
        if(j < s2.length()){
            ans |= is_Interleave(s1, i, s2, j + 1, result + s2.charAt(j), s3);
        }
        return ans;
    }
}
Complexity Analysis

Time complexity : O(2^{m+n}). m is the length of s1 and nn is the length of s2.

Space complexity : O(m+n). The size of stack for recursive calls can go upto m+n.



// RECURSION + MEMOIZTION

class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        int s1_len = s1.length();
        int s2_len = s2.length();
        int s3_len = s3.length();
        
        if(s1_len + s2_len != s3_len) return false;
        
        int memo[][] = new int[s1_len][s2_len];
        for(int i = 0; i < s1_len; i++){
            for(int j = 0; j < s2_len; j++){
                memo[i][j] = -1;
            }
        }
        return is_Interleave(s1,0,s2,0,s3,0,memo);
    }
    
    public boolean is_Interleave(String s1, int i, String s2, int j, String s3, int k, int[][] memo){
        if(i == s1.length()) return s2.substring(j).equals(s3.substring(k));
        
        if(j == s2.length()) return s1.substring(i).equals(s3.substring(k));
        
        if(memo[i][j] >= 0) return memo[i][j] == 1 ? true : false;
        
        boolean ans = false;
        if (s3.charAt(k) == s1.charAt(i) && is_Interleave(s1, i + 1, s2, j, s3, k + 1, memo)
                || s3.charAt(k) == s2.charAt(j) && is_Interleave(s1, i, s2, j + 1, s3, k + 1, memo)) {
            ans = true;
        }
        memo[i][j] = ans ? 1 : 0;
        return ans;
    }
}

Complexity Analysis

Time complexity: )O(m⋅n), where m is the length of s1 and n is the length of s2.
That's a consequence of the fact that each (i, j) combination is computed only once.

Space complexity: O(m⋅n) to keep double array memo.



2D DP
public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s3.length() != s1.length() + s2.length()) {
            return false;
        }
        boolean dp[][] = new boolean[s1.length() + 1][s2.length() + 1];
        for (int i = 0; i <= s1.length(); i++) {
            for (int j = 0; j <= s2.length(); j++) {
                if (i == 0 && j == 0) {
                    dp[i][j] = true;
                } else if (i == 0) {
                    dp[i][j] = dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);
                } else if (j == 0) {
                    dp[i][j] = dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);
                } else {
                    dp[i][j] = (dp[i - 1][j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) || (dp[i][j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));
                }
            }
        }
        return dp[s1.length()][s2.length()];
    }
}
Complexity Analysis

Time complexity : O(m⋅n). dp array of size m*n is filled.

Space complexity :O(m⋅n). 2D dp of size (m+1)*(n+1) is required. m and nn are the lengths of strings s1 and s2 respectively.

1D DP
public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s3.length() != s1.length() + s2.length()) {
            return false;
        }
        boolean dp[] = new boolean[s2.length() + 1];
        for (int i = 0; i <= s1.length(); i++) {
            for (int j = 0; j <= s2.length(); j++) {
                if (i == 0 && j == 0) {
                    dp[j] = true;
                } else if (i == 0) {
                    dp[j] = dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);
                } else if (j == 0) {
                    dp[j] = dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);
                } else {
                    dp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) || (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));
                }
            }
        }
        return dp[s2.length()];
    }
}

Complexity Analysis

Time complexity : O(m⋅n). dp array of size n is filled m times.

Space complexity : O(n). n is the length of the string s1.

=================================================

ANOTHER_SOLUTION

BFS solution (6ms)
Imagine a grid, which x-axis and y-axis are s1 and s2, matching s3 is the same as
finding a path from (0,0) to (len1, len2). It actually becomes a
BFS on grid. Since we don't need exact paths, a HashSet of
coordinates is used to eliminate duplicated paths.

public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        int len1 = s1.length(),
            len2 = s2.length(),
            len3 = s3.length();
        if (len1 + len2 != len3) return false;
        Deque<Integer> queue = new LinkedList<>();
        int matched = 0;
        queue.offer(0);
        Set<Integer> set = new HashSet<>();
        while (queue.size() > 0 && matched < len3) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int p1 = queue.peek() / len3,
                    p2 = queue.peek() % len3;
                queue.poll();
                if (p1 < len1 && s1.charAt(p1) == s3.charAt(matched)) {
                    int key = (p1 + 1) * len3 + p2;
                    if (!set.contains(key)) {
                        set.add(key);
                        queue.offer(key);
                    }
                }
                if (p2 < len2 && s2.charAt(p2) == s3.charAt(matched)) {
                    int key = p1 * len3 + (p2 + 1);
                    if (!set.contains(key)) {
                        set.add(key);
                        queue.offer(key);
                    }
                }
            }
            matched++;
        }
        return queue.size() > 0 && matched == len3;
    }
}
DFS solution with memorization (2ms)
This looks slow but is actually faster than BFS! Think about it carefully, in this
particular problem, search always ends at the same depth. DFS with memorization
searches about the same amount of paths with the same length as BFS, if it is doesn't
terminate on the first path found. Without the queue operations, the overall cost
is only smaller if we don't count call stack. The most significant runtime reducer is
probably the early termination

public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s1.length() + s2.length() != s3.length()) return false;
        HashSet<Integer> cache = new HashSet<Integer>();
        return isInterleave0(s1, s2, s3, 0, 0, cache);
    }

    private boolean isInterleave0(String s1, String s2, String s3, int p1, int p2, HashSet<Integer> cache) {
        if (p1 + p2 == s3.length())
            return true;
        if (cache.contains(p1 * s3.length() + p2))
            return false;
        // no need to store actual result.
        // if we found the path, we have already terminated.
        cache.add(p1 * s3.length() + p2);
        boolean match1 = p1 < s1.length() && s3.charAt(p1 + p2) == s1.charAt(p1);
        boolean match2 = p2 < s2.length() && s3.charAt(p1 + p2) == s2.charAt(p2);
        if (match1 && match2)
            return isInterleave0(s1, s2, s3, p1 + 1, p2, cache) ||
                   isInterleave0(s1, s2, s3, p1, p2 + 1, cache);
        else if (match1)
            return isInterleave0(s1, s2, s3, p1 + 1, p2, cache);
        else if (match2)
            return isInterleave0(s1, s2, s3, p1, p2 + 1, cache);
        else
            return false;
    }
}
2d DP solution (6ms)
It's an interesting practice. There are further optimization could be done to
reduce cache matrix to 1d. However doing DP for this problem is tedious and not
seem to worth the trouble.

public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        int len1 = s1.length(),
            len2 = s2.length(),
            len3 = s3.length();
        if (len1 + len2 != len3) return false;
        // cache[i][j] == true means first i + j chars are matched by
        // first j chars from s1 and first i chars from s2
        boolean[][] cache = new boolean[len2 + 1][len1 + 1];
        cache[0][0] = true; // empty and empty matches empty
        int m3 = 1; // matched length, m1 and m2 are similar
        while (m3 <= len3) {
            // this loop fill in cache matrix from left-top to right-bottom, diagonally.
            // note that loop conditions are pretty tricky here.
            for (int m1 = Math.max(m3 - len2, 0); m1 <= len1 && m1 <= m3; m1++) {
                int m2 = m3 - m1;
                cache[m2][m1] =
                    m1 > 0 && cache[m2][m1 - 1] && s3.charAt(m3 - 1) == s1.charAt(m1 - 1) ||
                    m2 > 0 && cache[m2 - 1][m1] && s3.charAt(m3 - 1) == s2.charAt(m2 - 1);
            }
            m3++;
        }
        return cache[len2][len1];
    }
}


===========================================================


For this problem, we are trying to see if we can obtain s3 by interleaving s1 and s2. In other words, we need to figure out where each char of s3 comes from, s1 or s2 or nowhere. If we can find a way that all of the chars of s3 comes from s1 or s2, then we can form s3 by interleaving s1 and s2, and thus return true; otherwise we return false. For example, if s1 = abc, s2 = bcd, s3 = abbccd, then s3 can be formed by "001011" or "010101". (0 represents char comes from s1, and 1 represents char comes from s2).

It is easy to come up with a solution using recursion.

public class Solution {

public boolean isInterleave(String s1, String s2, String s3) {
    if(s1 == null || s1.length() == 0) {return s2.equals(s3);}
    if(s2 == null || s2.length() == 0) {return s1.equals(s3);}
    if(s3.charAt(0) == s1.charAt(0) && s3.charAt(0) == s2.charAt(0)){
        return isInterleave(s1.substring(1), s2, s3.substring(1)) || isInterleave(s1, s2.substring(1), s3.substring(1));
    }
    else if(s3.charAt(0) == s1.charAt(0)){
        return isInterleave(s1.substring(1), s2, s3.substring(1));
    }
    else if(s3.charAt(0) == s2.charAt(0)){
        return isInterleave(s1, s2.substring(1), s3.substring(1));
    }
    return false;
}
}

But this solution takes exponential time, because each position have two choices, a length of n of s3 would have 2^n choices need to check. Thus, we think of DP, because it can reduce exponential time to polynomial time, and it applies to the problem that have many subproblems.

We create a boolean table called pathTable, and each cell of pathTable[i][j] represents whether we can form s3.substring(0, i+j) using the first s1.substring(0, i) and s2.substring(0, j). Thus, if pathTable[pathTable.length - 1][pathTable[0].length - 1] is true, it means there is a path from pathTable[0][0] to it. In other words, s3 can be formed by s1 and s2.

public boolean isInterleave(String s1, String s2, String s3) {
    if((s1 == null || s1.length() == 0) && (s2 == null || s2.length() == 0)){ 
        return s3 == null || s3.length() == 0;
    }
    if(s1 == null || s1.length() == 0){ return s2.equals(s3);}
    if(s2 == null || s2.length() == 0){ return s1.equals(s3);}
    if(s1.length() + s2.length() != s3.length()){ return false;}
    
    boolean pathTable[][] = new boolean[s1.length() + 1][s2.length() + 1];// would be false by default.
    pathTable[0][0] = true;
    
    for(int i = 1; i < pathTable.length; i++){
        if(pathTable[i-1][0] && s1.charAt(i-1) == s3.charAt(i-1)){
            pathTable[i][0] = true;
        }
    }
    for(int j = 1; j < pathTable[0].length; j++){
        if(pathTable[0][j-1] && s2.charAt(j-1) == s3.charAt(j-1)){
            pathTable[0][j] = true;
        }
    }
    for(int i = 1; i < pathTable.length; i++){
        for(int j = 1; j < pathTable[0].length; j++){
            if(pathTable[i-1][j] && s1.charAt(i-1) == s3.charAt(i+j-1)){
                pathTable[i][j] = true;
            }
            else if(pathTable[i][j-1] && s2.charAt(j-1) == s3.charAt(i+j-1)){
                pathTable[i][j] = true;
            }
        }
    }
    return pathTable[pathTable.length - 1][pathTable[0].length - 1];
}
}
=======================================================================================================

Recursion with memoization 

class Solution {
    Boolean[][][] dp;
    public boolean isInterleave(String s1, String s2, String s3) {
        
        int s1Len = s1.length(), s2Len = s2.length(), s3Len = s3.length();
        
        dp = new Boolean[s1Len+1][s2Len+1][s3Len+1];
		
		// If length of s1 + s2 is not equal with that of s3 then return false bcz s3 is created by combining s1 and s2 only
        if((s1Len+s2Len) != s3Len) return false;
        
        return solve(s1,s2,s3,0,0,0);
    }
    
    private boolean solve(String s1, String s2, String s3, int i1, int i2, int j){
        
        // Base condition
        if(j == s3.length()) return true;
        
        if(dp[i1][i2][j] != null) return dp[i1][i2][j];
        
        // If any of string (s1 or s2) ends, then continue comparing with the remaining string
        if(i1 == s1.length() && i2 != s2.length())
            return dp[i1][i2][j] = (s2.charAt(i2)==s3.charAt(j)) && solve(s1,s2,s3,i1,i2+1,j+1);
        else if(i1 != s1.length() && i2 == s2.length())
            return dp[i1][i2][j] = (s1.charAt(i1)==s3.charAt(j)) && solve(s1,s2,s3,i1+1,i2,j+1);
        
        char s1C = s1.charAt(i1), s2C = s2.charAt(i2), s3C = s3.charAt(j);
        
        // If char of s1 matches with s3 but not of s2 
        if(s1C == s3C && s2C != s3C)
            return dp[i1][i2][j] = solve(s1,s2,s3,i1+1,i2,j+1);
        
        // If char of s2 matches with s3 but not of s1
        else if (s1C != s3C && s2C == s3C)
            return dp[i1][i2][j] = solve(s1,s2,s3,i1,i2+1,j+1);
        
        // If char of both s1 and s2 matches with s3
        else if(s1C == s3C && s2C == s3C)
            return dp[i1][i2][j] = solve(s1,s2,s3,i1,i2+1,j+1) || solve(s1,s2,s3,i1+1,i2,j+1);
        
        // If no char of either s1 or s2 matching with s3, then return false as the char in s3 is not a part of any substring of s1 and s2
        else return dp[i1][i2][j] = false;
    }
}
