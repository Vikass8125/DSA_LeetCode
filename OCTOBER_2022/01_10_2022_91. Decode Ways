A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways).
For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: s = "12"
Output: 2
Explanation: "12" could be decoded as "AB" (1 2) or "L" (12).
Example 2:

Input: s = "226"
Output: 3
Explanation: "226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).
Example 3:

Input: s = "06"
Output: 0
Explanation: "06" cannot be mapped to "F" because of the leading zero ("6" is different from "06").
 

Constraints:

1 <= s.length <= 100
s contains only digits and may contain leading zero(s).


MY_SOLUTION


class Solution {
    int result =  0;
    HashMap<String, Integer> map  = null;
    public int numDecodings(String s) {
        map = new HashMap<>();
        find(s);
        return result;
    }
    
    void find(String s){
        if(s.startsWith("0")) return;
        if(s.length() <= 1){
            result++;
            return;
        }
        if(map.containsKey(s)){
            result += map.get(s);
            return;
        }
        
        for(int i = 0; i < Math.min(2, s.length()); i++){
            int val = Integer.parseInt(s.substring(0, i+ 1));
            if(val >= 1 && val <= 26){
                find(s.substring(i + 1));
            }
            map.put(s.substring(i + 1), result);
        }
    }
}
====================================================================
class Solution {
    public int numDecodings(String s) {
        if(s == null || s.length() == 0) return 0;
        int[] dp = new int[s.length() + 1];
        dp[0] = 1;
        dp[1] = s.charAt(0) == '0' ? 0 : 1;
        
        for(int i = 2; i <= s.length(); i++){
            int lengthOne = Integer.valueOf(s.substring(i - 1, i));
            int lengthTwo = Integer.valueOf(s.substring(i - 2, i));
            
            if(lengthOne >= 1 && lengthOne <= 9){
                dp[i] += dp[i - 1];
            }
            
            if(lengthTwo >= 10 && lengthTwo <= 26){
                dp[i] += dp[i - 2];
            }
            
        }
        return dp[s.length()];
        
    }
}



====================================================================

class Solution {
    public int numDecodings(String s) {
        if(s == null || s.length() == 0) return 0;
        if(s.charAt(0) == '0') return 0;
        
        int dp1 = 1;
        int dp2 = s.charAt(0) == '0' ? 0 : 1;
        
        for(int i = 2; i <= s.length(); i++){
            int lengthOne = Integer.valueOf(s.substring(i - 1, i));
            int lengthTwo = Integer.valueOf(s.substring(i - 2, i));
            int dp = 0;
            if(lengthOne >= 1 && lengthOne <= 9){
                dp += dp1;
            }
            
            if(lengthTwo >= 10 && lengthTwo <= 26){
                dp += dp2;
            }
            
            dp2 = dp1;
            dp1 = dp;
            
        }
        return dp1;
        
    }
}


====================================================================

1.Recursion O(2^n). A char may be decoded alone or by pairing with the next char.
c++
    int numDecodings(string s) {
        return s.empty() ? 0: numDecodings(0,s);    
    }
    int numDecodings(int p, string& s) {
        int n = s.size();
        if(p == n) return 1;
        if(s[p] == '0') return 0; // sub string starting with 0 is not a valid encoding
        int res = numDecodings(p+1,s);
        if( p < n-1 && (s[p]=='1'|| (s[p]=='2'&& s[p+1]<'7'))) res += numDecodings(p+2,s);
        return res;
    }
java
	public int numDecodings(String s) {
        return s.length()==0?0:numDecodings(0,s);      
    }
    private int numDecodings(int p, String s) {
        int n=s.length();
        if(p==n) return 1;
        if(s.charAt(p)=='0') return 0;
        int res=numDecodings(p+1,s);
        if(p<n-1&&(s.charAt(p)=='1'||s.charAt(p)=='2'&&s.charAt(p+1)<'7')) 
			res+=numDecodings(p+2,s);
        return res;
    }
    
2.Memoization O(n)
c++
    int numDecodings(string s) {
        int n = s.size();
        vector<int> mem(n+1,-1);
        mem[n]=1;
        return s.empty()? 0 : num(0,s,mem);   
    }
    int num(int i, string &s, vector<int> &mem) {
        if(mem[i]>-1) return mem[i];
        if(s[i]=='0') return mem[i] = 0;
        int res = num(i+1,s,mem);
        if(i<s.size()-1 && (s[i]=='1'||s[i]=='2'&&s[i+1]<'7')) res+=num(i+2,s,mem);
        return mem[i] = res;
    }
java
	public int numDecodings(String s) {
        int n=s.length();
        Integer[] mem=new Integer[n];
        return s.length()==0?0:numDecodings(0,s,mem);      
    }
    private int numDecodings(int p, String s, Integer[] mem) {
        int n=s.length();
        if(p==n) return 1;
        if(s.charAt(p)=='0') return 0;
        if(mem[p]!=null) return mem[p];
        int res=numDecodings(p+1,s,mem);
        if(p<n-1&&(s.charAt(p)=='1'||s.charAt(p)=='2'&&s.charAt(p+1)<'7')) 
			res+=numDecodings(p+2,s,mem);
        return mem[p]=res;
    }
    
3.dp O(n) time and space, this can be converted from #2 with copy and paste.
c++
    int numDecodings(string s) {
        int n = s.size();
        vector<int> dp(n+1);
        dp[n] = 1;
        for(int i=n-1;i>=0;i--) {
            if(s[i]=='0') dp[i]=0;
            else {
                dp[i] = dp[i+1];
                if(i<n-1 && (s[i]=='1'||s[i]=='2'&&s[i+1]<'7')) dp[i]+=dp[i+2];
            }
        }
        return s.empty()? 0 : dp[0];   
    }
java
	public int numDecodings(String s) {
        int n=s.length();
        int[] dp=new int[n+1];
        dp[n]=1;
        for(int i=n-1;i>=0;i--)
            if(s.charAt(i)!='0') {
                dp[i]=dp[i+1];
                if(i<n-1&&(s.charAt(i)=='1'||s.charAt(i)=='2'&&s.charAt(i+1)<'7')) 
					dp[i]+=dp[i+2];
            }
        return dp[0];   
    }
    
4.dp constant space
c++
    int numDecodings(string s) {
        int p = 1, pp, n = s.size();
        for(int i=n-1;i>=0;i--) {
            int cur = s[i]=='0' ? 0 : p;
            if(i<n-1 && (s[i]=='1'||s[i]=='2'&&s[i+1]<'7')) cur+=pp;
            pp = p;
            p = cur;
        }
        return s.empty()? 0 : p;   
    }
java
	public int numDecodings(String s) {
        int dp1=1, dp2=0, n=s.length();
        for(int i=n-1;i>=0;i--) {
            int dp=s.charAt(i)=='0'?0:dp1;
            if(i<n-1&&(s.charAt(i)=='1'||s.charAt(i)=='2'&&s.charAt(i+1)<'7'))
                dp+=dp2;
            dp2=dp1;
            dp1=dp;
        }
        return dp1;
    }



====================================================================
public class Solution {
    public int numDecodings(String s) {
        int n = s.length();
        if (n == 0) return 0;
        
        int[] memo = new int[n+1];
        memo[n]  = 1;
        memo[n-1] = s.charAt(n-1) != '0' ? 1 : 0;
        
        for (int i = n - 2; i >= 0; i--)
            if (s.charAt(i) == '0') continue;
            else memo[i] = (Integer.parseInt(s.substring(i,i+2))<=26) ? memo[i+1]+memo[i+2] : memo[i+1];
        
        return memo[0];
    }
}




====================================================================

public int numDecodings(String s) {
	Integer[] memo = new Integer[s.length() + 1];
	return numDecodings(s, 0, memo);
}

private int numDecodings(String s, int index, Integer[] memo) {
	if (index == s.length()) {
		return 1;
	}
	if (s.charAt(index) == '0') {
		return 0;
	}
	if (memo[index] != null) {
		return memo[index];
	}
	int way1 = numDecodings(s, index + 1, memo);
	int way2 = 0;
	if (index < s.length() - 1 && Integer.parseInt(s.substring(index, index + 2)) <= 26) {
		way2 = numDecodings(s, index + 2, memo);
	}
	memo[index] = way1 + way2;
	return memo[index];
}



====================================================================
public class Solution {
    public int numDecodings(String s) {
        
        if (s == null || s.length() == 0)
            return 0;
            
        Set<String> symbols = new HashSet<String>();
        for (int i=1; i<=26; i++){
        	symbols.add(String.valueOf(i));
        }
      
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        return numDec(s, 0,  map, symbols);
    }
    
    private int numDec(String str, int start,  Map<Integer, Integer> map, Set<String> symbols) {
        Integer count = map.get(start);
        if (count != null){
            return count;
        }

        if (start == str.length()){
            return 1;
        }
        
        int numWays = 0;
        if ((start + 1 <= str. length()) &&
            symbols.contains(str.substring(start, start + 1)) && symbols.contains(str.substring(start, start + 1)))   
            numWays += numDec(str, start + 1, map, symbols);

        if ((start + 2 <= str. length()) &&
                symbols.contains(str.substring(start, start + 2)) && symbols.contains(str.substring(start, start + 2)))   
            numWays += numDec(str, start + 2, map, symbols);
            
        map.put(start, numWays);
        
        return numWays;
    }
}



====================================================================


/**
 * Dynamic Programming
 *
 * DP[i] = Number of ways to decode the string from 0 to i.
 *
 * DP[i] = DP[i-1] (when i is from 1 to 9) + DP[i-2] (when (i-1,i) is from 10 to
 * 26)
 *
 * Time Complexity: O(N)
 *
 * Space Complexity: O(1)
 *
 * N = Length of the input string.
 */
class Solution {
    public int numDecodings(String s) {
        if (s == null) {
            throw new IllegalArgumentException("Input string is null");
        }
        if (s.length() == 0 || s.charAt(0) == '0') {
            return 0;
        }

        int pre = 1; // dp[i-2]
        int cur = 1; // dp[i-1]

        for (int i = 1; i < s.length(); i++) {
            int sum = 0; // dp[i]
            if (s.charAt(i) != '0') {
                sum = cur;
            }
            int num = Integer.parseInt(s.substring(i - 1, i + 1));
            if (num >= 10 && num <= 26) {
                sum += pre;
            }

            pre = cur;
            cur = sum;
        }

        return cur;
    }
}

=====================================================================================

// https://leetcode.com/problems/decode-ways/discuss/1584181/Java-%2B-DP-%2B-Diagrammatic-Explanation-%2B-Code-with-comments-%2B-Memoization-%2B-Tabulation

Memoization: (Top-down approach)

image

class Solution {
    public int numDecodings(String s) {
        Map<String, Integer> memo = new HashMap<>();
        return decodeWays(s, 0, memo);
    }
    
    int decodeWays(String s, int idx, Map<String, Integer> memo){
        // If the first char is '0' of the current substring is 0, then we cannot form any valid string with it
        // Care should be taken to check if that is not the last character in which case it can still be part of a valid string
        if(idx < s.length() && s.charAt(idx) == '0')
            return 0;
        
        // If idx has reached the last character
        if(idx >= s.length() - 1)
            return 1;
        
        // If already found this string earlier
        String key = s.substring(idx);
        if(memo.containsKey(key))
            return memo.get(key);
    
        // Choice 1: when considering the current char as single alphabet
        int choice1 = decodeWays(s, idx + 1, memo);
        
        // Choice 2: when considering the current char and the next char together and checking if that is a valid alphabet
        int combined = (s.charAt(idx) - 48) * 10 + (s.charAt(idx+1) - 48);
        int choice2 = 0;
        if(combined <= 26)
            choice2 = decodeWays(s, idx+2, memo);
        memo.put(key, choice1 + choice2);
        return choice1 + choice2;
    }
}

Tabulation: (Bottom-up approach)

image

Note: In the below solution the ith index of dp[] corresponds to the (i-1)th character in the string and while iterating i represents the current character 
of the string, hence we populate (i+1)th index in dp[]

class Solution {
    public int numDecodings(String s) {
        int[] dp = new int[s.length() + 1];
        
        // There is one way of decoding an empty string, which is empty
        dp[0] = 1; 
        
        // If the first char is 0, we cannot decode that string, or else we can only decode it one way
        if(s.charAt(0) != '0')
            dp[1] = 1;
        else return 0;
        
        // We start iterating from the second character (1st index) in the string till end of string
        // For every character we have 2 choices
        for(int i=1; i < s.length(); i++){
            int choice1=0, choice2=0;
            // Choice 1: If the current char is not '0', then we can consider this alphabet separately, 
            // in which case the number of ways will be same as the previous character
            if(s.charAt(i) != '0')
                choice1 = dp[i];
            
            // Choice 2: If the previous char is not '0', then we can combine the current char with previous 
            // and check if the numeric value is less than equal to 26 (the number of possible English alphabets)
            if(s.charAt(i-1) != '0' && ((s.charAt(i-1) - 48) * 10 + (s.charAt(i) - 48)) <= 26)
                choice2 = dp[i-1];
            
            // If none of the choices were chosen because of the constraints, then definitely we cannot decode the string
            if(choice1 + choice2 == 0)
                return 0;            
            // Else we update our dp array with the sum of the choices
            dp[i+1] = choice1 + choice2;
        }
        
        // The last index of dp[] will have our desired result
        return dp[dp.length - 1];
    }
}



=====================================================================================

data structure

int[ ] dp = new int[n+1] It's n+1 because we need to use dp[0] to hold the empty string.

Intuition

dp[0] = 1 since s = "" empty String can only be decoded as empty string. (It also provides the baton to be passed but I feel the statement is ridiculous. )
dp[1] = s.charAt(0) == '0' ? 0 : 1 If s ="6" then we can decode it as 6. If s = "0" then there's no number matches it.
dp[i] = dp[i-1] if s.charAt(i-1) != 0
s = "99999" then dp[i]'s result depends on previous result. dp[0] = 1. dp[1] = s.charAt(0) == '0' ? 0 : 1 which is 1. dp[2] = dp[1]. dp[3] = dp[2]. dp[4] = dp[3].
dp[i] += dp[i-2] if it's two digits.
s = "926" then dp[0] = 1. dp[1] = 1. dp[2] = dp[1] = 1.
dp[3] = d[2] + d[3-2] = 1 + 1 = 2 because "26" is twoDigits where 10 <= twoDigits <= 26.
class Solution
{
    public int numDecodings(String s) 
    {
        // O(n) time | O(n) space
        if(s == null)    return 0;
        
        int[] dp = new int[s.length() + 1];
        
        // dp[0] = 1 to provide the baton to be passed.
        // empty string can only be decoded as an empty string
        dp[0] = 1;
        
        dp[1] = s.charAt(0) == '0' ? 0 : 1;
        
        for(int i = 2; i < dp.length; i++)
        {
            if(s.charAt(i-1) != '0')
                dp[i] = dp[i-1];

            // check if successful two digit decode is possible
            int twoDigit = Integer.valueOf(s.substring(i-2, i));
            
            if(twoDigit >= 10 && twoDigit <= 26)
                dp[i] += dp[i-2];
        }
        return dp[s.length()];
    }
}




=====================================================================================


// https://leetcode.com/problems/decode-ways/discuss/1044214/Java-or-Recursion-Tree-Figure

class Solution {
    public int numDecodings(String s) {
        Map<Integer, Integer> memo = new HashMap<>();
        return helper(0, s, memo);
    }
    
    private int helper(int index, String s, Map<Integer, Integer> memo) {
        
        //base case for left case
        if (index == s.length()) {
            return 1;
        }
        
        //find calcaluted value in memo
        if (memo.containsKey(index)) {
            return memo.get(index);
        }
        
        //base case when char is '0'
        if (s.charAt(index) == '0') {
            return 0;
        }
        
        //base case for right branch
        if (index == s.length() - 1) {
            return 1;
        }
        //left branch
        int ans = helper(index + 1, s, memo);
        //right branch
        if ((s.charAt(index) - '0') * 10 + (s.charAt(index + 1) - '0') <= 26) {
            ans += helper(index + 2, s, memo);
        }
        // add to memo
        memo.put(index, ans);
        
        return ans;
    }
}




=====================================================================================


// Time Complexity: O(N)
// Space Complexity: O(N)
// This solution can be further space-optimized to be O(1). Let's think about it :D
class Solution {
    public int numDecodings(String s) {
        // cannot map to any character due to the leading zero
        if (s.charAt(0) == '0') return 0;
        int n = s.length(); 
        // dp[i]: number of ways of decoding the substring s[:i]
        int[]  dp = new int[n + 1];
        // base case
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            // check single digit decode
            // valid deocde is possible only when s[i - 1] is not zero
            // if so, take the previous state dp[i - 1]
            // e.g. AB - 1[2]
            if (s.charAt(i - 1) != '0') dp[i] = dp[i - 1];
            // check double digit decode
            // by looking at the previous two digits
            // if the substring belongs to the range [10 - 26]
            // then add the previous state dp[i - 2]
            // e.g. L - [12]
            if (i >= 2) {
                // or you can use `stoi(s.substr(i - 2, 2))`
                int x = (s.charAt(i - 2) - '0') * 10 + s.charAt(i - 1) - '0';
                // check the range
                if (10 <= x && x <= 26) dp[i] += dp[i - 2];
            }
        }
        return dp[n];
    }
}




=====================================================================================
