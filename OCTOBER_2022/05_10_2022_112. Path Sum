Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding
up all the values along the path equals targetSum.

A leaf is a node with no children.

Example 1:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.
Example 2:


Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.
Example 3:

Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000

MY_SOLUTION

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null) return false;
        
        if(targetSum == root.val && root.left == null && root.right == null) return true;
        
        return hasPathSum(root.left, targetSum - root.val) || hasPathSum(root.right, targetSum - root.val);
        
    }
}

=======================================


Nirmal Silwal
4 hours ago
public boolean hasPathSum(TreeNode root, int targetSum) {
        return helper(root, targetSum, 0);
    }
    
    private boolean helper(TreeNode root, int target, int currsum) {
        if (root == null) return false;
        
        // leaf node
        if (root.left == null && root.right == null) {
        // adding current leaf node value also since in recursive call it has sum upto its parent node
            currsum += root.val; 
            if (currsum == target)
                return true;
        }
        
        boolean leftscan = helper(root.left, target, currsum + root.val);
        boolean rightscan = helper(root.right, target, currsum + root.val);
        
        return leftscan || rightscan;
    }
    
=========================================
 
 public boolean hasPathSum(TreeNode root, int sum) {
    // iteration method
    if (root == null) {return false;}
    Stack<TreeNode> path = new Stack<>();
    Stack<Integer> sub = new Stack<>();
    path.push(root);
    sub.push(root.val);
    while (!path.isEmpty()) {
        TreeNode temp = path.pop();
        int tempVal = sub.pop();
        if (temp.left == null && temp.right == null) {if (tempVal == sum) return true;}
        else {
            if (temp.left != null) {
                path.push(temp.left);
                sub.push(temp.left.val + tempVal);
            }
            if (temp.right != null) {
                path.push(temp.right);
                sub.push(temp.right.val + tempVal);
            }
        }
    }
    return false;
}

=====

public boolean hasPathSum(TreeNode root, int sum) {
    // recursion method
    if (root == null) return false;
    if (root.left == null && root.right == null && root.val == sum) return true;
    return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);
}
=========================================
  1 st Approach 
class Solution
{
    public boolean hasPathSum(TreeNode root, int targetSum)//we always try to approach the zero ----0++++ from any half left or right, like taking limit//if zero found at leaf then true else false
    {
        if(root == null)
            return false;//base case when the selected path is not the desired path //we return false and check in next half of the subtree//base case for terminnation of the recursion 
        else if(root.left == null && root.right == null && targetSum - root.val == 0)//we have faith in tree that it can find the node if present where the value nutralizes each other at 0
            return true;//only the case when we are returning true 
        else
            return hasPathSum(root.left,targetSum - root.val)||hasPathSum(root.right,targetSum - root.val);//if present in left is good otherwiswe we are searching in right subtree recursively //all permutation in ways are done by recursion and not our tension 
    }
}//Please do Upvote, It helps a lot
2 nd Approach 

class Solution 
{
    private boolean flag= false;//we are taking the base case as false, if the sum is not found and if the target sum lies in the path from root to leaf, we make the flag true  
    
    public boolean hasPathSum(TreeNode root, int targetSum) 
    {
        int sum = 0;//calculate the downward sum 
        
        Helper(root, sum, targetSum);//it helps us calculate  the sum of each node for each path from root to leaf and tells us that our desired sum is present or not, by adding the node at that path 
        
        return flag;//returns true if sum is present else false is returned 
    }
    public TreeNode  Helper(TreeNode root, int sum, int targetSum)
    {//postorder traversal + semi preorder traversal(accesing root beforehand once), we want to know about child first and then the parent 
        if(root == null)//base case when we hit the null node, to tell the parent no node is present we return null 
            return null;
        //ROOT
        sum= sum + root.val;//adding the node value to sum at each level//accesing root beforehand once
        
        TreeNode left= Helper(root.left, sum, targetSum);//recursing down the left subtree and knowing about the left child//storring the reference to detect it is leaf or not, if it is leaf then left == null//LEFT
        TreeNode right= Helper(root.right, sum, targetSum);//recursing down the right subtree and knowing about the right child//storring the reference to detect it is leaf or not, if it is leaf then right == null//RIGHT
        
        //ROOT
        if(sum == targetSum && left == null && right == null) //if we reached to our desired sum and the parent node is a leaf node, we got our path finally 
            flag= true;//we make the flag to true as the desired path from root to leaf is achived 
        
        return root;//returning root, to tell the parent that I am present 
    }
}
3 rd Approach 
class Solution {
    //0 -- null node, 1 means node, 2 found path node //metadata about the current status of the node 
     public int PathSum(TreeNode root, int curr, int targetSum){
         if ( root == null){
            return 0;//we return 0 to tell that i am leaf 
        }
         curr+= root.val;//preorder sum
         
         int left= PathSum(root.left, curr, targetSum);
         
         if ( left == 2 )
             return 2;//if left path conatins the desired path to leaf node with target sum, we no need to go to right part reccursively
         
        int right= PathSum(root.right, curr, targetSum);
         
        if ( right == 2)
             return 2;//if right path conatins the desired path to leaf node with target sum, we no need to check further condition we just return 2 in order to indicate desired path has been found
         
         //Backtracking postorder traversal 
         
        if ( left == 0 && right == 0 && targetSum == curr){//if we reach to leaf node with desired sum we return 2, inorder to indicate we have found the path 
             return 2;
        }
        
        return 1;//we return 1, to tell that we have not found the desired path till now  
     }
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if ( root == null){
            return false;//empty graph, no path tp find we return false 
        }
        
        if ( PathSum(root, 0, targetSum) == 2)//found path case 
            return true;
        else
            return false;//not path found case 
    }
}
  
=========================================
   /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root == null)
            return false;
        else
            return (root.left == null && root.right == null && root.val == sum)
            || hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);
    }
}
   
   
========================================
    class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        // If the tree is empty i.e. root is NULL, return false...
	    if (root == null) return false;
        // If there is only a single root node and the value of root node is equal to the targetSum...
	    if (root.val == targetSum && (root.left == null && root.right == null)) return true;
        // Call the same function recursively for left and right subtree...
	    return hasPathSum(root.left, targetSum - root.val)|| hasPathSum(root.right, targetSum - root.val);
    }
}
    
=========================================
