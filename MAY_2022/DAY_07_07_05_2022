456. 132 Pattern  [MEDIUM]


Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.

 

Example 1:

Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.
Example 2:

Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
Example 3:

Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].
 

Constraints:

n == nums.length
1 <= n <= 2 * 105
-109 <= nums[i] <= 109


MY_SOLUTION
class Solution {
    public boolean find132pattern(int[] nums) {
        if(nums == null || nums.length < 3) 
            return false;
        
        
         int num = Integer.MIN_VALUE;
         Stack<Integer> stk = new Stack();
         for(int i = nums.length-1;i>=0;i--)
         {
             if(nums[i]<num) 
                 return true;  // nums[i] < nums[k] , and nums[j] was chosen in previous iteration so given condition reached 
              while(!stk.isEmpty() && nums[i]>stk.peek())
              {//nums[i] = nums[j]
                 num = stk.pop(); // always bigger than previous num
             }
             stk.push(nums[i]);
         }
        return false;
    
    }
}



OTHER_SOLUTIONS

BF O(n^3)
It's easy to use 3 loops to find 3 elements which is 132 pattern, but the time complexity is O(n^3), so it wouldn't accepted as timeout.

    public boolean find132pattern_bf(int[] nums) {
        int len = nums.length;
        if (len < 3) {
            return false;
        }

        for (int i = 0; i < len - 2; i++) {
            for (int j = i + 1; j < len - 1; j++) {
                for (int k = j + 1; k < len; k++) {
                    if (nums[i] < nums[k] && nums[k] < nums[j]) {
                        return true;
                    }
                }
            }
        }

        return false;
    }
Analysis
Time Complexity: O(n^3).
Space Complexity: O(1).
BF O(n^2)
Noticed that nums[j] is the peak of the 3 elements, suppose the current element is nums[j], we have to find the element nums[k] that is smaller than nums[j] after j, and the element nums[i] that is smaller than nums[k] before j.

Scan left from j to 0, 0 <= i < j, whether there is num[i] < nums[j], update the mininum leftMin;

Scan right from j to the end, j + 1 <= k < len, whether there is num[k] < nums[j], update the maxinum rightMax;

If exists and leftMin < rightMax, return true.

Let's coding it.

    public boolean find132pattern_bf_opt(int[] nums) {
        int len = nums.length;
        if (len < 3) {
            return false;
        }

        for (int j = 1; j < len - 1; j++) {
            int leftMin = Integer.MAX_VALUE;
            boolean leftFlag = false;
            for (int i = j - 1; i >= 0; i--) {
                if (nums[i] < nums[j]) {
                    leftFlag = true;
                    leftMin = Math.min(leftMin, nums[i]);
                }
            }

            int rightMax = Integer.MIN_VALUE;
            boolean rightFlag = false;
            for (int k = j + 1; k < len; k++) {
                if (nums[k] < nums[j]) {
                    rightFlag = true;
                    rightMax = Math.max(rightMax, nums[k]);
                }
            }

            if (leftFlag && rightFlag && leftMin < rightMax) {
                return true;
            }
        }

        return false;
    }
Analysis
Time Complexity: O(n^2).
Space Complexity: O(1).
TreeMap
Method 2 is O(n^2). With extra O(n) space to store the elements of the array, we can reduce the time complexity to O(n).

We have to maintain all the values of the array in the right of j. As we have determined nums[i] and nums[j], we only need to query the smallest element nums[k] in the sorted set which is strictly larger than nums[i].

Then if nums[k] < nums[j], which means we have found the 3 elements of 132 pattern.

    public static boolean find132pattern_map(int[] nums) {
        int len = nums.length;
        if (len < 3) {
            return false;
        }

        TreeMap<Integer, Integer> rightMap = new TreeMap<>();
        for (int i = 2; i < len; i++) {
            rightMap.put(nums[i], rightMap.getOrDefault(nums[i], 0) + 1);
        }

        int leftMin = nums[0];
        for (int j = 1; j < len - 1; j++) {
            if (leftMin < nums[j]) {
                Integer numK = rightMap.ceilingKey(leftMin + 1);
                if (numK != null && numK < nums[j]) {
                    return true;
                }
            }

            leftMin = Math.min(leftMin, nums[j]);
            rightMap.put(nums[j + 1], rightMap.get(nums[j + 1]) - 1);
            if (rightMap.get(nums[j + 1]) == 0) {
                rightMap.remove(nums[j + 1]);
            }
        }

        return false;
    }
Analysis
Time Complexity: O(nlogn).
Space Complexity: O(n).
Monotonic Stack
We can use a stack to store the element of the array from the back to front, find nums[k] in the stack, and then continue to scan forward to find nums[i].

The stack must store elements with a larger index and a smaller value than nums[j].

The process is like this:

Scanning from the back to the front, if the current element nums[i] is larger than the top of the stack, which means nums[i] may be the nums[j] we are looking for;

Pop all the elements in the stack that are smaller than it. These elements are the the nums[k], and the last pop-up is the maximum qualified nums[k].

If this num[k] is larger than the nums[i] scanned forward, we find the answer.

    public boolean find132pattern_stack(int[] nums) {
        int len = nums.length;
        if (len < 3) {
            return false;
        }

        Deque<Integer> stk = new ArrayDeque<>();
        int k = -1;
        for (int i = len - 1; i >= 0; i--) {
            if (k > -1 && nums[k] > nums[i]) {
                return true;
            }

            while (!stk.isEmpty() && nums[i] > nums[stk.peek()]) {
                k = stk.pop();
            }

            stk.push(i);
        }

        return false;
    }
Analysis
Time Complexity: O(n).
Space Complexity: O(n).
