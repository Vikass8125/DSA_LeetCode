1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree  [MEDIUM]
Given two binary trees original and cloned and given a reference to a node target in the original tree.

The cloned tree is a copy of the original tree.

Return a reference to the same node in the cloned tree.

Note that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree.

 

Example 1:


Input: tree = [7,4,3,null,null,6,19], target = 3
Output: 3
Explanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.
Example 2:


Input: tree = [7], target =  7
Output: 7
Example 3:


Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4
Output: 4
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
The values of the nodes of the tree are unique.
target node is a node from the original tree and is not null.
 

Follow up: Could you solve the problem if repeated values on the tree are allowed?


MY_SOLUTION
Approach 1: DFS: Recursive Inorder Traversal.
Recursive inorder traversal is extremely simple:follow Left->Node->Right direction, i.e., do the recursive call
for the left child, then do all the business with the node (= check if the node is a target one or not), and then do the recursive call for the right child.

Implementation

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    TreeNode ans, target;
    
    public void inorderTrav(TreeNode org, TreeNode col){
        if(org != null){
            inorderTrav(org.left, col.left);
            if(org == target){
                ans = col;
            }
            inorderTrav(org.right, col.right);
        }
    }
    public final TreeNode getTargetCopy(final TreeNode original, final TreeNode cloned, final TreeNode target) {
        this.target = target;
        inorderTrav(original, cloned);
        return ans;
        
    }
}

ANOTHER_SOLUTION
Approach 2: DFS: Iterative Inorder Traversal.
class Solution {
    public final TreeNode getTargetCopy(final TreeNode original, final TreeNode cloned, final TreeNode target) {
        Deque<TreeNode> stack_o = new ArrayDeque();
        Deque<TreeNode> stack_c = new ArrayDeque();
        TreeNode node_o = original, node_c = cloned;

        while (!stack_o.isEmpty() || node_o != null) {
            while (node_o != null) {
                stack_o.add(node_o);
                stack_c.add(node_c);

                node_o = node_o.left;
                node_c = node_c.left;
            }
            node_o = stack_o.removeLast();
            node_c = stack_c.removeLast();
            if (node_o == target) {
                return node_c;
            }
            node_o = node_o.right;
            node_c = node_c.right;
        }
        return null;
    }
}




ANOTHER_SOLUTION
The idea is simple here. Do a dfs in both the original and the cloned trees at the same time, if we find the node in the original tree, return the node in the cloned tree.

NOTE:
Don't compare value. Compare the object/pointer. Otherwise, it will not work when there are duplicate values.

class Solution {
    public final TreeNode getTargetCopy(final TreeNode original, final TreeNode cloned, final TreeNode target) {
        if (original == null) return null;
		//Don't compare value. Compare the object
        if (original == target) return cloned;
        TreeNode left = getTargetCopy(original.left, cloned.left, target);
		// early return if we already find it
        if (left != null) return left;
        return getTargetCopy(original.right, cloned.right, target);
    }
}
