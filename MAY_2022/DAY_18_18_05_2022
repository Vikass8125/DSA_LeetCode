1192. Critical Connections in a Network  [HARD]
There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:


Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
Example 2:

Input: n = 2, connections = [[0,1]]
Output: [[0,1]]
 

Constraints:

2 <= n <= 105
n - 1 <= connections.length <= 105
0 <= ai, bi <= n - 1
ai != bi
There are no repeated connections.


SOLUTION

// https://www.youtube.com/watch?v=TyWtx7q2D7Y


class Solution {
    
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        // Results sets
        List<List<Integer>> criticalConnections = new ArrayList<>();
        
        // Graph
        Map<Integer, List<Integer>> map = new HashMap<>();
        
        // Keep track of visited vertices for dfs
        boolean[] visited = new boolean[n];
        
        // Keep track of Strongly Conected Compoments low-link value
        int[] lowLinkValues = new int[n];
        
        // Keep track of cycles, in dfs we increment and then set time to current lowLinkValues[] & discoverd[] values
        int time = 0;
        
        // Load graph with vertices and connections
        for (List<Integer> connection : connections) {
            // Get [a,b] vertices from connections
            int a = connection.get(0); 
            int b = connection.get(1);
            
            // Intialize [a ,b] in graph if not already
            map.putIfAbsent(a, new ArrayList<>());
            map.putIfAbsent(b, new ArrayList<>());
            
            // Add vertices to each respective List
            map.get(a).add(b);
            map.get(b).add(a);
        }
        
        // Iterate through vertices in map and call dfs on unvisited vertices
        for (int i = 0; i < map.size(); i++) {
            if (!visited[i]) {
                dfs(i, i, visited, lowLinkValues, map, time, criticalConnections);
            }
        }
        
        return criticalConnections;
    }
    
    private void dfs(int currentVertice, int parentVertice, boolean[] visited, int[] lowLinkValues, Map<Integer, List<Integer>> map, int time, List<List<Integer>> criticalConnections) {
        // Increment time per cycle
        time++;
        
        // set current vertice's low link value to cycle time
        lowLinkValues[currentVertice] = time;
        
        // Set discoveredValue to cycle time to avoid comparing 
        int discoverdValue = time;
        
        // Avoid infinite loop
        visited[currentVertice] = true;
        
        // Iterate through edges
        for (int vertice : map.get(currentVertice)) {
            
            // Skip look to avoid comparing in reverse. Ex: if A -> B don't compare B -> A
            if (vertice == parentVertice) continue;
            
            // Process only unique vertices to avoid leaving a strongly connected component
            if (!visited[vertice]) {
                
                dfs(vertice, currentVertice, visited, lowLinkValues, map, time, criticalConnections);
                
                // This means there is an edge that connects strongly connected components
                if (discoverdValue < lowLinkValues[vertice]) {
                    criticalConnections.add(Arrays.asList(currentVertice, vertice));
                }
            }
            
            // Update lowlinkValues
            lowLinkValues[currentVertice] = Math.min(lowLinkValues[currentVertice], lowLinkValues[vertice]);
        }
    }
}


ANOTHER_SOLUTION
First thought
Thiking for a little while, you will easily find out this theorem on a connected graph:

An edge is a critical connection, if and only if it is not in a cycle.
So, if we know how to find cycles, and discard all edges in the cycles, then the remaining connections are a complete collection of critical connections.

How to find eges in cycles, and remove them
We will use DFS algorithm to find cycles and decide whether or not an edge is in a cycle.

Define rank of a node: The depth of a node during a DFS. The starting node has a rank 0.

Only the nodes on the current DFS path have non-special ranks. In other words, only the nodes that we've started visiting, but haven't finished visiting, have ranks. So 0 <= rank < n.

(For coding purpose, if a node is not visited yet, it has a special rank -2; if we've fully completed the visit of a node, it has a special rank n.)

How can "rank" help us with removing cycles? Imagine you have a current path of length k during a DFS. The nodes on the path has increasing ranks from 0 to kand incrementing by 1. Surprisingly, your next visit finds a node that has a rank of p where 0 <= p < k. Why does it happen? Aha! You found a node that is on the current search path! That means, congratulations, you found a cycle!

But only the current level of search knows it finds a cycle. How does the upper level of search knows, if you backtrack? Let's make use of the return value of DFS: dfs function returns the minimum rank it finds. During a step of search from node u to its neighbor v, if dfs(v) returns something smaller than or equal to rank(u), then u knows its neighbor v helped it to find a cycle back to u or u's ancestor. So u knows it should discard the edge (u, v) which is in a cycle.

After doing dfs on all nodes, all edges in cycles are discarded. So the remaining edges are critical connections.



class Solution {
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for(List<Integer> oneConnection :connections) {
            graph[oneConnection.get(0)].add(oneConnection.get(1));
            graph[oneConnection.get(1)].add(oneConnection.get(0));
        }
        HashSet<List<Integer>> connectionsSet = new HashSet<>(connections);
        int[] rank = new int[n];
        Arrays.fill(rank, -2);
        dfs(graph, 0, 0, rank, connectionsSet);
        return new ArrayList<>(connectionsSet);
    }
    
    int dfs(List<Integer>[] graph, int node, int depth, int[] rank, HashSet<List<Integer>> connectionsSet){
        if (rank[node]>=0){
            return rank[node]; // already visited node. return its rank
        }
        rank[node] = depth;
        int minDepthFound = depth; // can be Integer.MAX_VALUE also.
        for(Integer neighbor: graph[node]){
            if (rank[neighbor] == depth-1){ // ignore parent
                continue;
            }
            int minDepth = dfs(graph, neighbor, depth+1, rank, connectionsSet);
            minDepthFound = Math.min(minDepthFound, minDepth);
            if (minDepth <= depth){
                // to avoid the sorting just try to remove both combinations. of (x,y) and (y,x)
                connectionsSet.remove(Arrays.asList(node, neighbor)); 
                connectionsSet.remove(Arrays.asList(neighbor, node)); 
            }
        }
        return minDepthFound;
    }
}



ANOTHER_SOLUTION

Idea:
If we think of the network and its connections like an undirected graph and its edges, then a critical connection, as defined by this problem, is the same as a bridge in the graph. To find out which edges are bridges, we can employ Tarjan's Bridge-Finding Algorithm (TBFA).

TBFA is a bit like a combination of a depth-first search (DFS) approach with recursion and a union-find. IN TBFA, we do a recursive DFS on our graph and for each node we keep track of the earliest node that we can circle back around to reach. By doing this, we can identify whether a given edge is a bridge because the far node doesn't lead back to any other earlier node.

To implement our TBFA, the first thing we have to do is to construct an edge map (edgeMap) from the connections list. Each key in our edge map should correspond to a specific node, and its value should be an array of each adjacent node to the key node.

We'll also need separate arrays to store the discovery time (disc) and the lowest future node (low) for each node, as well as a time counter to use with disc.

For our recursive DFS helper (dfs), each newly-visited node should set its initial value for both disc and low to the current value of time before time is incremented. (Note: If we start time at 1 instead of 0, we can use either disc or low as a visited array, rather than having to keep a separate array for the purpose. Any non-zero value in the chosen array will then represent a visited state for the given node.)

Then we recursively call dfs on each of the unvisited adjacent nodes (next) of the current node (curr). If one of the possible next nodes is an earlier node (disc[next] < curr[low]), then we've found a loop and we should update the low value for the current node. As each layer of the recursive function backtracks, it will propagate this value of low back down the chain.

If, after backtracking, the value of low[next] is still higher than disc[curr], then there is no looped connection, meaning that the edge between curr and next is a bridge, so we should add it to our answer array (ans).

Once the dfs helper function has completed its traversal, we can return ans.


class Solution {
    int[] disc, low;
    int time = 1;
    List<List<Integer>> ans = new ArrayList<>();
    Map<Integer,List<Integer>> edgeMap = new HashMap<>();
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        disc = new int[n];
        low = new int[n];
        for (int i = 0; i < n; i++)
            edgeMap.put(i, new ArrayList<Integer>());
        for (List<Integer> conn : connections) {
            edgeMap.get(conn.get(0)).add(conn.get(1));
            edgeMap.get(conn.get(1)).add(conn.get(0));
        }
        dfs(0, -1);
        return ans;
    }
    public void dfs(int curr, int prev) {
        disc[curr] = low[curr] = time++;
        for (int next : edgeMap.get(curr)) {
            if (disc[next] == 0) {
                dfs(next, curr);
                low[curr] = Math.min(low[curr], low[next]);
            } else if (next != prev)
                low[curr] = Math.min(low[curr], disc[next]);
            if (low[next] > disc[curr]) 
                ans.add(Arrays.asList(curr, next));
        }
    }
}

