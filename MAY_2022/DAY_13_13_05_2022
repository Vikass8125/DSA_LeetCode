117. Populating Next Right Pointers in Each Node II  [MEDIUM]
Given a binary tree

struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

Example 1:


Input: root = [1,2,3,4,5,null,7]
Output: [1,#,2,3,#,4,5,7,#]
Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.
Example 2:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 6000].
-100 <= Node.val <= 100
 

Follow-up:

You may only use constant extra space.
The recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.


SOLUTION
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
	public Node connect(Node root) {
		if(null == root) {
			return null;
		}

		if (root.left != null && root.right != null) {
			root.left.next = root.right;
			root.right.next = findNext(root.next);
		} else if (root.left != null) {
			root.left.next = findNext(root.next);
		} else if (root.right != null) {
			root.right.next = findNext(root.next);
		}

		/**right first*/
		connect(root.right);
		connect(root.left);
		return root;
	}

	private Node findNext(Node root) {
		if (null == root) {
			return null;
		} else if (null != root.left) {
			return root.left;
		} else if (null != root.right) {
			return root.right;
		}
		return findNext(root.next);
	}
}

ANOTHER_SOLUTION


I tried to write a very simple code that only delcares a dummy node once and then keeps reassinging them.

I have used 2 loops. The inner while loops interates throgh nodes at a level. And the outer loop is triggerd when all the nodes at a level is exhausted.

A similar question was asked during a microsoft interview.
Q. How would you find out all the nodes at a given level.
Ans. You modify the tree to be like this question. So the cost of subsequant operations are cheap. I understand that while changing the tree you would have to travel through the whole tree.

There can be other ways but this would be the most efficient if you have multiple requests.

public Node connect(Node root) {
        if (root == null)
            return root;
        
        Node t = root;
        Node dummy = new Node();
        
        while (t != null) {
            Node current = dummy;
            while (t != null) {
                if (t.left != null) {
                    current.next = t.left;
                    current = current.next;
                }
                if (t.right != null) {
                    current.next = t.right;
                    current = current.next;
                }
                t = t.next;
            }
            t = dummy.next;
            dummy.next = null;
        }
        
        return root;
    }
