1663. Smallest String With A Given Numeric Value [MEDIUM]
The numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on.

The numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string "abe" is equal to 1 + 2 + 5 = 8.

You are given two integers n and k. Return the lexicographically smallest string with length equal to n and numeric value equal to k.

Note that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.

 

Example 1:

Input: n = 3, k = 27
Output: "aay"
Explanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.
Example 2:

Input: n = 5, k = 73
Output: "aaszz"
 

Constraints:

1 <= n <= 105
n <= k <= 26 * n

MY_SOLUTION
class Solution {
    public String getSmallestString(int n, int k) {
        char[] res = new char[n];
        Arrays.fill(res,'a');
        k = k - n;
        while(k > 0){
            res[--n] += Math.min(25,k); // Updating the a with the left value
            k = k - (Math.min(25,k));
        }
        return String.valueOf(res);
    }
}

ANOTHER_SOLUTION
--> we want String of length n and lexographic shortest string as possible.
--> so take an character array of size n and initialize every index value with 'a'. and decrement k.
--> by doing above step if k reaches 0 it means it is the desired answer. why? becuase all a together are enough to make k sum.
--> run repeat below steps till k>0. (k>0 indicates we need to increase some characters values from 'a' to any value till 'z').
--> since we want lexographic min String we will try to increase character from backward directions. and try to satisfy sum=k or in our case k=0.
--> check Min(25,k) as it is max by which we can increase. i.e. 'a'+25 = 26 and if k is already less then 25 it means we can just increase a by k and we will have desired sum.
--> now decrement k with Min(25,k). and repeat the process.
--> once k reaches 0 we have reached desired sum.
--> time complexity is o(n)

class Solution {
    public String getSmallestString(int n, int k) {
        char[] ch = new char[n];
        for(int i=0;i<n;i++) {
            ch[i]='a';
            k--;
        }
        int currChar=0;
        while(k>0) {
            currChar=Math.min(25,k);
            ch[--n]+=currChar;
            k-=currChar;
        }
        return String.valueOf(ch);
    }
}

ANOTHER_SOLUTION
to convert char to int =>
(ch - 'a' + 1) .
suppose ch is 'a' in such case 'a'-'a' will be zero. since we are dealing here as 1 index,hence 1 result.
to convert int to char back ->
char ch = (char)(k+'a'-1);
example->
k is 26, int value of 'a' is 97 and hence 97+26-1=122. which is 'z' char.

Apply greedy alogrithm and try to fill as large value as possible to the last. and keep on building answer.

public String getSmallestString(int n, int k) {
		// hold answer in char array to avoid concatenation
		char[] op = new char[n];
		// iterate from backward direction
		for (int i = n - 1; i >= 0; i--) {
			// check if k can be filled with z? i.e. if we place current char as 'z', rest
			// of the remaining chars should be at least 'a'. current k > 26 + no of char
			// remaining on left of output string.
			if (k > 26 + i) {
				// place 'z' as current char
				op[i] = 'z';
				// subtract 26 from k
				k = k - 26;
			} else {
				// it means we cannot place 'z' and hence character possible is k minus no of
				// char remaining.
				char ch = (char) (k - i + 'a' - 1);
				/// place char to op[i]
				op[i] = ch;
				// subtract current char from k for next iteration
				k = k - (ch - 'a' + 1);
			}
		}
		// return answer.
		return new String(op);
	}
