20. Valid Parentheses  [EASY]
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.


MY_SOLUTION

class Solution {
    public boolean isValid(String s) {
        int len = s.length();
        if(len == 0){
            return true;
        }
        char[] arr = s.toCharArray();
        Stack<Character> stack = new Stack<>();
        for(int i = 0; i < arr.length; i++){
            if(arr[i] == '(' || arr[i] == '[' || arr[i] == '{'){
                stack.push(arr[i]);
            }
            else if(!stack.empty() && arr[i] == ')' && stack.peek() == '(' ){
                 stack.pop();
            }
            else if(!stack.empty() && arr[i] == ']' && stack.peek() == '[' ){
                stack.pop();
            }
            else if(!stack.empty() && arr[i] == '}' && stack.peek() == '{' ){
                stack.pop();
            }
            else{
                return false;
            }
             
        }
        return stack.empty();
   }
}
