1249. Minimum Remove to Make Valid Parentheses  [MEDIUM]
Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
Example 2:

Input: s = "a)b(c)d"
Output: "ab(c)d"
Example 3:

Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.
 

Constraints:

1 <= s.length <= 105
s[i] is either'(' , ')', or lowercase English letter.


MY_SOLUTION
class Solution {
    public String minRemoveToMakeValid(String s) {
// Using Array to store the indices for removing the invalid parntheses
        char[] cha = s.toCharArray();  
        Stack<Integer> st = new Stack();
        StringBuilder sb = new StringBuilder();
        
        for(int i = 0; i < cha.length; i++){
            if(cha[i] == '('){
                st.push(i);
            }
            else if(cha[i] == ')'){  // for starting invalid ')'
                if(st.size() == 0){
                    cha[i] = '.';
                }
                else{
                    st.pop();
                }
            }
        }
        while(st.size() > 0){ // Replacing invalid with '.'
            cha[st.pop()] = '.';
        }
        
        for(char ch : cha){
            if(ch != '.'){
                sb.append(ch);
            }
        }
        return sb.toString();
    }
        
// Another Solution
    Stack<Integer> st = new Stack<>();
    StringBuilder sb = new StringBuilder(s);
	
    for(int i=0;i<s.length();i++){
        if(s.charAt(i)=='(')
            st.push(i);
        else if(s.charAt(i)==')'){
            if(!st.isEmpty() && s.charAt(st.peek())=='(')
                st.pop();
            else
                st.push(i);
        }
    }
    while(!st.isEmpty())
        sb.deleteCharAt(st.pop());
    return sb.toString();
}
}
