881. Boats to Save People   [MEDIUM]
You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.

Return the minimum number of boats to carry every given person.

 

Example 1:

Input: people = [1,2], limit = 3
Output: 1
Explanation: 1 boat (1, 2)
Example 2:

Input: people = [3,2,2,1], limit = 3
Output: 3
Explanation: 3 boats (1, 2), (2) and (3)
Example 3:

Input: people = [3,5,3,4], limit = 5
Output: 4
Explanation: 4 boats (3), (3), (4), (5)
 

Constraints:

1 <= people.length <= 5 * 104
1 <= people[i] <= limit <= 3 * 104


MY_SOLUTION
1st Step is sort the Array

Now you ask, what's the benefit of doing that? Well, the benefit of sorting is, we can take one max. weight person & one min weight person in the boat/
And for that we gonna sort the array.

Using above example :-
[7,9,3,2,8,6,4,5]
After Sorting
[2,3,4,5,6,7,8,9]

So, for optimisation my 2nd Step will be create 2 pointer's

One will be my left pointer intially on the extreme left i.e. starting of the array

One will be my right pointer intially on the extreme right i.e. end of the array

Okay, now when I sum up the value of:
Left + Right pointer, there could be 2 Possiblities

1.0 (sum <= limit)      "sum could be less then or equals to my limit"
2.0 (sum > limit)      "sum could be greater then my limit"
Let's talk about what we'll do when we face possibility no. 1.0
If that's the case then we only require single boat & increment the boatCount, left pointer & decrement the right pointer

Let's talk about what we'll do when we face possibility no. 2.0
If that's the case then we only one person will go in boat & increment the boatCount & decrement the right pointer



class Solution {
    public int numRescueBoats(int[] people, int limit) {
        int boatCount = 0;
        Arrays.sort(people);
        
        int left = 0;
        int right = people.length - 1;
        
        while(left <= right){
            int sum = people[left] + people[right];
            if(sum <= limit){
                boatCount++;
                left++;
                right--;
            }
            else{
                boatCount++;
                right--;
            }
        }
        return boatCount;
    }
}
