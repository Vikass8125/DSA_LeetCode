74. Search a 2D Matrix [MEDIUM]
Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

MY_SOLUTION
-> The basic idea is from right corner, if the current number greater than target col - 1 in same row, 
else if the current number less than target, row + 1 in same column, finally if they are same, we find it, and return return.
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
       int row = 0;
       int col = matrix[0].length - 1;
       while(row <= matrix.length - 1 && col >=0){
           if(matrix[row][col] == target){
               return true;
           }
           else if( matrix[row][col] < target){
               row++;
           }
           else{
               col--;
           }
       }
        return false;
        
        
        
    }
}
