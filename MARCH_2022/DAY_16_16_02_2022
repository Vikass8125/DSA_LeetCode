946. Validate Stack Sequences   [MEDIUM]
Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.

 

Example 1:

Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4),
pop() -> 4,
push(5),
pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1
Example 2:

Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.
 

Constraints:

1 <= pushed.length <= 1000
0 <= pushed[i] <= 1000
All the elements of pushed are unique.
popped.length == pushed.length
popped is a permutation of pushed.



MY_SOLUTION:

class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        /*boolean matched = false;
        for(int i = 0; i < 2; i++){
            if(pushed[i] == popped[popped.length-1-i]){
                matched = true;
            }
        }
        return matched;
    }*/

        Stack<Integer> st = new Stack<>();
        int popIndex = 0;  // Intialise one pointer pointing on popped array
        
        for(int item : pushed){
            st.push(item);  // insert the values in stack
            while(!st.isEmpty() && st.peek() == popped[popIndex]){
                // if st.peek() values equal to popped[j];
                st.pop(); // then pop out
                popIndex++; //  increment j
            }
        }
        return st.isEmpty(); // check if stack is empty return true else false
 }
}



ANOTHER_SOLUTION --> USING PUSHED ARRAY AS STACK
class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        int i = 0,j=0;
       
      for (int item: pushed) {
            pushed[i] = item;
            while (i >= 0 && pushed[i] == popped[j]) {
                i--;
                j++;
            }
            i++;
        }
     return i == 0;
    }
}
