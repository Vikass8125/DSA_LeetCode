61. Rotate List  [MEDIUM]
Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

MY_SOLUTION
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if( k <= 0 || head == null || head.next == null){
            return head;
        }
        
        
        ListNode last = head;
        ListNode newlast = head;
        int len = 1;
        
        while(last.next != null){
            last = last.next;
            len++;
        }
        last.next = head;
        
        int rotations = k % len;
        int skip = len - rotations;
        
        for( int i = 0; i < skip - 1; i++){
            newlast = newlast.next;
        }
        head = newlast.next;
        newlast.next = null;
    
        return head;
    }
    
}
