31. Next Permutation    [MEDIUM]
A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100

MY_SOLUTION
STEP-1: FIND THE POINT OF CHANGE.
-> The number starts changing from first decreasing sequence from end.
STEP-2: FIND THE NUMBER FOR SUBSTITUTION.
The highest after the number is present at this point.
Rearrange these numbers to make it minimum: sort/reverse.

ALGO:
1. Find the first decreasing sequence starting from the end.
2. Find the number for substitution and perform swap.
3. Rearrange remaining array by reversing it.

Approach
We can follow the below steps -

Scan the array from right to left until an element is found which is smaller than the index at its right. Mark the index of such element as index.
Again scan the array from right to left until an element is found which is greater than the element found in the above step. Mark the index of such elements as j.
Swap the two elements at indices index and j.
Now, reverse the array from index index until the end of the array.
Letâ€™s understand this with an example -

nums = [4,5,3,2,1]

Step 1: scan from right to left and stop at 4 because it less than 5. Here, index = 0
Step 2: Again scan from right to left and stop at 5 because it is greater than 4. Here, j = 1
Step 3: Swap the elements at index and j. The array will become [5,4,3,2,1].
Step 4: Reverse the array after index. The array will become [5,1,2,3,4]

class Solution {
    public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        while(i >= 0 && nums[i] >= nums[i+1]){
            i--;
        }
        if(i >= 0){
            int j = nums.length - 1;
            while(j >=0 && nums[j] <= nums[i]){
                j--;
            }
            swap(nums,i,j);
        }
        reverse(nums,i+1);
        
    }
    static void swap(int[] nums,int start, int end){
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
    }
    
    static void reverse(int[] nums, int index){
        int end = nums.length - 1;
        while(index < end){
            swap(nums,index, end);
            index++;
            end--;
        }
    }
}

