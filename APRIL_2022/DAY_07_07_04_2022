1046. Last Stone Weight [EASY]
You are given an array of integers stones where stones[i] is the weight of the ith stone.

We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:

If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.

Return the smallest possible weight of the left stone. If there are no stones left, return 0.

 

Example 1:

Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.
Example 2:

Input: stones = [1]
Output: 1
 

Constraints:

1 <= stones.length <= 30
1 <= stones[i] <= 1000

MY_SOLUTION

class Solution {
    public int lastStoneWeight(int[] stones) {
   PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
	for(int st: stones)
		pq.offer(st);

	while(pq.size() > 1) {
		int f = pq.poll();
		int s = pq.poll();
		if(f != s) 
			pq.offer(f-s);
	}

	return pq.isEmpty() ? 0 : pq.peek();
    }
}


/*
Explanation
We were required to do operations each time on largest elements, and for that we can use max heap which can use used by reverting the order of priority queue available in Collections framework in java.

Push all elements in priority queue.
Iterate while the size of priority queue becomes equal to or less than 1.
Pop two largest element from top and perform following checks
if both are equal then we don't need to do anything.
else we add the difference of f and s to the priority queue.
Now return 0 if size of pq is 0 otherwise return top element.
*/


ANOTHER_SOLUTION
class Solution {
    public int lastStoneWeight(int[] stones) {
        Arrays.sort(stones);
        int count = stones.length-1;
        while(count!=0)
        {
            if(stones[stones.length-1]==stones[stones.length-2])
            {
                stones[stones.length-1]=0;
                stones[stones.length-2]=0;
            }
            if(stones[stones.length-1]!=stones[stones.length-2])
            {
                stones[stones.length-1]=stones[stones.length-1] - stones[stones.length-2];
                stones[stones.length-2]=0;
            }
            Arrays.sort(stones);
            count--;
        }           
    return stones[stones.length-1]
	}
}
