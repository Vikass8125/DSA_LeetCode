706. Design HashMap [EASY]
Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:

MyHashMap() initializes the object with an empty map.
void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
 

Example 1:

Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]
 

Constraints:

0 <= key, value <= 106
At most 104 calls will be made to put, get, and remove.



MY_SOLUTION
class MyHashMap {
    int[] map;
    public MyHashMap() {
        map = new int[1000001];
    }
    
    public void put(int key, int value) {
        map[key] = value + 1;
    }
    
    public int get(int key) {
        return map[key] - 1; 
    }
    
    public void remove(int key) {
        map[key] = 0;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
 
 ANOTHER_SOLUTION
 
For loop on list is almost negligible as if load factor goes greater than 0.75, map Will Rehash

Data structure used is Array of list , where each list[i] will hold list of array
bucket[i] = new ArrayList<>(); now this bucket[i] hold array as its element
similar to List<List<int[]>>
 
 
 class MyHashMap {

    List<int []> bucket [];
    int size =  0;
    int bucketsize  = 0;
    public MyHashMap() {
        bucketsize  =  20;
        bucket =  new List[bucketsize];
        for(int i=0;i<bucketsize;i++){
            bucket[i] =  new ArrayList<>();
        }                
    }
    private int getHashCode(int key){
        return key%bucketsize;
    }
    private double loadFactor(){
        return size*1.0/bucketsize;
    }
    private void rehash(){ // rehasing expensive
        List<int []> temp [] =  bucket;
        bucketsize = (bucketsize*3)/2;
        bucket =  new List[bucketsize];
        for(int i=0;i<bucketsize;i++){
            bucket[i] =  new ArrayList<>();
        }         
        
        size = 0;
        for(int i=0;i<temp.length;i++){
            for(int j=0;j<temp[i].size();j++ ){
                put(temp[i].get(j)[0] , temp[i].get(j)[1]);
            }
        }
        
    }
    
    public void put(int key, int value) {
        if(loadFactor() > 0.75){
            rehash();
        }
        int index =  getHashCode(key);
        List<int []> li =  bucket[index];
        
        for(int i=0;i<li.size();i++){
            if( li.get(i)[0]==key ){
                // update value and return 
                li.get(i)[1] =  value;
                return ;
            }
        }
        
        // if key now found 
        size++;
        li.add( new int[]{key,value }  );        
    }
    
    public int get(int key) {
        
        int index =  getHashCode(key);
        List<int []> li =  bucket[index];
        for(int i=0;i<li.size();i++){
            if( li.get(i)[0]==key ){
                
                return li.get(i)[1];
            }
        }
        return -1;
        
    }
    
    public void remove(int key) {
        int index =  getHashCode(key);
        List<int []> li =  bucket[index];
        for(int i=0;i<li.size();i++){
            if( li.get(i)[0]==key ){
                size--;
                li.remove(i);
                return ;
            }
        }
        
    }
}
 
