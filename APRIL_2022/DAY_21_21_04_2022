705. Design HashSet  [EASY]
Design a HashSet without using any built-in hash table libraries.

Implement MyHashSet class:

void add(key) Inserts the value key into the HashSet.
bool contains(key) Returns whether the value key exists in the HashSet or not.
void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.
 

Example 1:

Input
["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
Output
[null, null, null, true, false, null, true, null, false]

Explanation
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1);      // set = [1]
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(1); // return True
myHashSet.contains(3); // return False, (not found)
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(2); // return True
myHashSet.remove(2);   // set = [1]
myHashSet.contains(2); // return False, (already removed)
 

Constraints:

0 <= key <= 106
At most 104 calls will be made to add, remove, and contains.

MY_SOLUTION
In Order to archive

add - O(1)
remove - O(1)
contains - O(1)
with the compromising O(10^6) space.

we take an Array of size 10^6+1, Initialize array for all the elements from 0 to 10^6 and keep 
a check whether a certain key is present or not by looking at its value.

Contains
if value == 0 element not present;
if value is greater than 0 element is present;

add
increment the value of of given key's index

remove
assign the value zero to given key's index

class MyHashSet {

    int[] arr;
    
    public MyHashSet() {
     arr=new int[1000001];    
    }
    
    public void add(int key) {   
        arr[key]=1;    //O(1)
    }
    
    public void remove(int key) {
        arr[key]=0;    //O(1)
    }
    
    public boolean contains(int key) {
        //O(1)
        if(arr[key]==0) return false;
        else return true;
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */
 
 ANOTHER_SOLUTION
 class Node {
    public int val;
    public Node next;

    public Node(int val) {
        this.val = val;
    }
}

class MyHashSet {

    private static final int size = 10000;
    
    Node[] hashSet = new Node[size];
    
    public MyHashSet() {

    }

    public void add(int key) {
        Node pointer = hashSet[key % size];
        if (pointer == null) {
            hashSet[key % size] = new Node(key);
        } else {
            Node current = pointer;
            Node previous = current;
            while (current != null) {
                if (current.val == key) return;
                previous = current;
                current = current.next;
            }
            previous.next = new Node(key);
        }

    }

    public void remove(int key) {

        Node current = hashSet[key % size];

        while (current != null) {
            if (current.val == key) {
                current.val = -1; // Simply replace with -1
                return;
            }
            current = current.next;
        }
    }

    public boolean contains(int key) {
        Node current = hashSet[key % size];
        while (current != null) {
            if (current.val == key) return true;
            current = current.next;
        }
        return false;
    }
}
 
