There are n dominoes in a line, and we place each domino vertically upright. In the beginning, 
we simultaneously push some of the dominoes either to the left or to the right.

After each second, each domino that is falling to the left pushes the adjacent domino on the left. 
Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.

When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.

For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.

You are given a string dominoes representing the initial state where:

dominoes[i] = 'L', if the ith domino has been pushed to the left,
dominoes[i] = 'R', if the ith domino has been pushed to the right, and
dominoes[i] = '.', if the ith domino has not been pushed.
Return a string representing the final state.

 

Example 1:

Input: dominoes = "RR.L"
Output: "RR.L"
Explanation: The first domino expends no additional force on the second domino.
Example 2:


Input: dominoes = ".L.R...LR..L.."
Output: "LL.RR.LLRRLL.."
 

Constraints:

n == dominoes.length
1 <= n <= 105
dominoes[i] is either 'L', 'R', or '.'.

MY_SOLUTION

Approach #1: Adjacent Symbols [Accepted]
Intuition

Between every group of vertical dominoes ('.'), we have up to two non-vertical dominoes bordering this group. 
Since additional dominoes outside this group do not affect the outcome, we can analyze these situations individually:
there are 9 of them (as the border could be empty). Actually, if we border the dominoes by 'L' and 'R', there are only 4 cases.
We'll write new letters between these symbols depending on each case.

Algorithm

Continuing our explanation, we analyze cases:

If we have say "A....B", where A = B, then we should write "AAAAAA".

If we have "R....L", then we will write "RRRLLL", or "RRR.LLL" if we have an odd number of dots. 
If the initial symbols are at positions i and j, we can check our distance k-i and j-k to decide at position k whether to write 'L', 'R', or '.'.

(If we have "L....R" we don't do anything. We can skip this case.)


class Solution {
    public String pushDominoes(String dominoes) {
        int N = dominoes.length();
        int[] indexes = new int[N+2];
        char[] symbols = new char[N+2];
        int len = 1;
        indexes[0] = -1;
        symbols[0] = 'L';

        for (int i = 0; i < N; ++i)
            if (dominoes.charAt(i) != '.') {
                indexes[len] = i;
                symbols[len++] = dominoes.charAt(i);
            }

        indexes[len] = N;
        symbols[len++] = 'R';

        char[] ans = dominoes.toCharArray();
        for (int index = 0; index < len - 1; ++index) {
            int i = indexes[index], j = indexes[index+1];
            char x = symbols[index], y = symbols[index+1];
            char write;
            if (x == y) {
                for (int k = i+1; k < j; ++k)
                    ans[k] = x;
            } else if (x > y) { // RL
                for (int k = i+1; k < j; ++k)
                    ans[k] = k-i == j-k ? '.' : k-i < j-k ? 'R' : 'L';
            }
        }

        return String.valueOf(ans);
    }
}

Complexity Analysis

Time and Space Complexity: OO(N), where NN is the length of dominoes.

===================================

Approach #2: Calculate Force [Accepted]
Intuition

We can calculate the net force applied on every domino. The forces we care about are how close a domino is to a leftward 'R', and to a rightward 'L':
the closer we are, the stronger the force.

Algorithm

Scanning from left to right, our force decays by 1 every iteration, and resets to N if we meet an 'R',
so that force[i] is higher (than force[j]) if and only if dominoes[i] is closer (looking leftward) to 'R' (than dominoes[j]).

Similarly, scanning from right to left, we can find the force going rightward (closeness to 'L').

For some domino answer[i], if the forces are equal, then the answer is '.'. Otherwise, the answer is implied by whichever force is stronger.

Example

Here is a worked example on the string S = 'R.R...L': We find the force going from left to right is [7, 6, 7, 6, 5, 4, 0]. 
The force going from right to left is [0, 0, 0, -4, -5, -6, -7].
Combining them (taking their vector addition), the combined force is [7, 6, 7, 2, 0, -2, -7], for a final answer of RRRR.LL.

class Solution {
    public String pushDominoes(String S) {
        char[] A = S.toCharArray();
        int N = A.length;
        int[] forces = new int[N];

        // Populate forces going from left to right
        int force = 0;
        for (int i = 0; i < N; ++i) {
            if (A[i] == 'R') force = N;
            else if (A[i] == 'L') force = 0;
            else force = Math.max(force - 1, 0);
            forces[i] += force;
        }

        // Populate forces going from right to left
        force = 0;
        for (int i = N-1; i >= 0; --i) {
            if (A[i] == 'L') force = N;
            else if (A[i] == 'R') force = 0;
            else force = Math.max(force - 1, 0);
            forces[i] -= force;
        }

        StringBuilder ans = new StringBuilder();
        for (int f: forces)
            ans.append(f > 0 ? 'R' : f < 0 ? 'L' : '.');
        return ans.toString();
    }
}


Complexity Analysis

Time and Space Complexity: O(N).


===========================================


class Solution {
    public String pushDominoes(String dominoes) {
        char[] d = dominoes.toCharArray();
        // l is the left pointer
        int l = 0, n = dominoes.length();
        // r is the right pointer
        for (int r = 0; r < n; r++) {
            if (d[r] == '.') {
                // case 1. meeting `.`, then skip it
                continue;
            } else if ((d[r] == d[l]) || (d[l] == '.' && d[r] == 'L')) {
                // case 2. both end is equal, i.e. d[r] == d[l]
                // then fill all the dots between both end 
                // e.g. L....L -> LLLLLL
                // e.g. R....R -> RRRRRR
                // case 2.1 if the left end is . and the right end is L, 
                // i.e. d[l] == '.' && d[r] == 'L'
                // then we need to fill them from `l` to `r` in this case
                for (int k = l; k < r; k++) d[k] = d[r];
            } else if (d[l] == 'L' && d[r] == 'R') {
                // case 3. left end is L and right end is R
                // e.g. L.....R
                // then do nothing
            }  else if (d[l] == 'R' && d[r] == 'L') {
                // case 4. left end is R and right end is L
                // if we have odd number of dots between them (let's say m dots), 
                // then we can only add (m / 2) Ls and (m / 2) Rs. 
                // p.s `/` here is integer division. e.g. 3 / 2 = 1
                // e.g. R...L -> RR.LL 
                // if we have even number of dots between them (let's say m dots), 
                // then we can only add (m / 2) Ls and (m / 2) Rs. 
                // e.g. R....L -> RRRLLL
                int m = (r - l - 1) / 2;
                for (int k = 1; k <= m; k++) {
                    d[r - k] = 'L';
                    d[l + k] = 'R';
                }
            }
            // update left pointer
            l = r;
        }
        // case 5. if the left dominoe is `R`, then fill all 'R' till the end
        // e.g. LL.R. -> LL.RR
        if (d[l] == 'R') for (int k = l; k < n; k++) d[k] = 'R';
        return new String(d);
    }
}

===================================================
Idea:
using two pointer left and right
there are 4 Possible Cases that left and right are Pointing to :

L and. L (all in between dominos will fall on left side) So mark all dominos to L from left to right
L and R (left pointer will fall to left and right to right so dominos in between will be as they were before)
R and L (from left side dominos will start falling to right and from right side dominos will fall down to left )
R and R (all in b/w dominos will fall in right side) So mark all dominos to R from left to right
you have someIdea now . Code will give you more clearity.

Complexity :

Time : O(n)
Space: O(n)
    public String pushDominoes(String dominoes) {
        
        char[] arr=new char[dominoes.length()+2];
        arr[0]='L';
        arr[arr.length-1]='R';
        for(int i=1;i<arr.length-1;i++){
            arr[i]=dominoes.charAt(i-1);
        }
        
        int i=0;
        int j=1;
        
        while(j!=arr.length){
            while(arr[j]=='.') j++;
            
            if(arr[i]=='L' && arr[j]=='L'){
                while(i!=j){
                    arr[i]='L';
                    i++;
                }
                j++;
            }else if(arr[i]=='L' && arr[j]=='R'){
                 i=j;
                 j++;
            }else if(arr[i]=='R' && arr[j]=='R'){
                while(i!=j){
                    arr[i]='R';
                    i++;
                }
                j++;
            }else if(arr[i]=='R' && arr[j]=='L'){
                 int temp1=i+1;
                 int temp2=j-1;
                 while(temp1<temp2){
                     arr[temp1]='R';
                     arr[temp2]='L';
                     temp1++;
                     temp2--;
                 }
                i=j;
                j++;
            }
        }
        
        StringBuilder sb=new StringBuilder("");
        for(i=1;i<arr.length-1;i++){
            sb.append(arr[i]);
        }

        return sb.toString();
    }
    
===========================================================

class Solution {
    public String pushDominoes(String dominoes) {
        
        StringBuilder sb = new StringBuilder(dominoes);
        
        int n = sb.length();
        
        
        //mark true for all the unpushed block, after pushing a bloch in right direction
        char prev = '.';
        boolean[] forward = new boolean[n];
        for(int i = 0; i < n; i++){
            char c = dominoes.charAt(i);
            if(c == '.'){
                if(prev == 'R') forward[i] = true; 
            }else{
                prev = c;
            }
        }
        
        //mark true for all the unpushed block, after pushing a block in left direction
        prev = '.';
        boolean[] backward  = new boolean[n];
        for(int i = n - 1; i >= 0; i--){
            char c = dominoes.charAt(i);
            if(c == '.'){
                if(prev == 'L') backward[i] = true; 
            }else{
                prev = c;
            }
        }
        
        int i = 0;
        while(i < n){
            if(backward[i] && !forward[i]){
                //fall block as there is force in left direction
                sb.setCharAt(i++, 'L');
                
            }else if(!backward[i] && forward[i]){
                //fall block as there is force in right direction
                sb.setCharAt(i++, 'R');
                
            }else if(backward[i] && forward[i]){
                //fall block as there is force in both  direction
                int j = (i + 1);
                while(j < n && backward[j] && forward[j]){
                    j++;
                }
                pushDominoesInBetween(sb, i, j - 1);
                i = j;
            }else{
                i++;
            }
            
        }
        
        return sb.toString();
    }
    
    
    private void pushDominoesInBetween(StringBuilder sb, int l, int r){
        while(l < r){
            sb.setCharAt(l++, 'R');
            sb.setCharAt(r--, 'L');
        }
        
    }
}

========================================

class Solution {

public String pushDominoes(String dominoes) {
    char[] res = new char[dominoes.length()];
    Queue<Integer> queue = new LinkedList<>();
    
    for(int i = 0 ; i < dominoes.length() ; i++){
        if(dominoes.charAt(i) != '.') 
            queue.add(i);
        res[i] = dominoes.charAt(i);
    }
    
    while(!queue.isEmpty()){
        int size = queue.size();
        
        Map<Integer , Character> map = new HashMap<>();
        
        while(size-- > 0){
            int index = queue.poll();
            if(res[index] != '.'){
                if(res[index] == 'L'){
                    if(index - 1 >= 0 && res[index - 1] == '.'){
                        if(map.containsKey(index - 1)) 
                            map.remove(index - 1);
                        else{
                            map.put(index - 1 , 'L');
                            queue.add(index - 1);
                        }
                    }
                }else{
                    if(index + 1 < res.length && res[index + 1] == '.'){
                        if(map.containsKey(index + 1)) 
                            map.remove(index + 1);
                        else{
                            map.put(index + 1 , 'R');
                            queue.add(index + 1);
                        } 
                    }
                }
            }
        }
        
        for(int key : map.keySet())
            res[key] = map.get(key); 
        
    }
    
    return String.valueOf(res);
}
}
