Given a list of unique words, return all the pairs of the distinct indices (i, j) in the given list, 
so that the concatenation of the two words words[i] + words[j] is a palindrome.

 

Example 1:

Input: words = ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]]
Explanation: The palindromes are ["dcbaabcd","abcddcba","slls","llssssll"]
Example 2:

Input: words = ["bat","tab","cat"]
Output: [[0,1],[1,0]]
Explanation: The palindromes are ["battab","tabbat"]
Example 3:

Input: words = ["a",""]
Output: [[0,1],[1,0]]
 

Constraints:

1 <= words.length <= 5000
0 <= words[i].length <= 300
words[i] consists of lower-case English letters.

MY_SOUTION

Thought Process
Brute Force
-> Simply compare two strings can form a palindrome
   Time complexity O(n^2w), where n is length of list and w is the average length of word
   Space complexity O(1)

Hash Table
-> Use hashmap to store the string and its index in the map
-> We need to split the word into two parts at each index and check if there is reversed counter part
-> if p1 is palindrome, we check if there exists reverse of p2 that we can append in the front
-> or p2 is palindrome, we check if there exists reverse of p1 that we can append in the end
-> Corner case is when there is empty string, we need to add all the strings that are palindrome
  Time complexity O(nw^2)
  Space complexity O(n)

Trie
-> We can create trie using the reverse of all words
-> As we going through each word, we need a indicator for identifying if the node is a word
-> The use of int is especially helpful because not only it can identify a node is a word but also avoid adding same word in the solution set 
   when the word is palindrome
-> We can also save time by saving the index for current node if the rest of substring is palindrome, 
   when we compare each character to the trie (reverse order), which means we can add this word to the front
  Time complexity O(nw^2)
  Space complexity O(n)

Solution

class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> res = new ArrayList<>();
        if (words == null || words.length < 2) return res;
        Map<String, Integer> map = new HashMap<>();
        for (int i = 0; i < words.length; i++) {
            map.put(words[i], i);
        }
        for (int i = 0; i < words.length; i++) {
            for (int j = 0; j < words[i].length(); j++) {
                String p1 = words[i].substring(0, j);
                String p2 = words[i].substring(j);
                // if the first part is palindrome, we try to find the reverse of p2
                // to prepend in the front to make palindrome
                if (isPalindrome(p1)) checkReverse(p2, i, map, res, true);
                if (isPalindrome(p2)) checkReverse(p1, i, map, res, false);
            }
        }
        return res;
    }

    private void checkReverse(String s, int i, Map<String, Integer> map, List<List<Integer>> res, boolean addToFront) {
        String sr = reverse(s);
        int id = map.getOrDefault(sr, i);
        if (id != i) {
            if (addToFront) res.add(Arrays.asList(id, i));
            else res.add(Arrays.asList(i, id));
            // this happens when the p2 is the full length, and p1 is empty
            // we can also add the empty string in the front
            if (sr.length() == 0) res.add(Arrays.asList(id, i));
        }
    }

    private String reverse(String s) {
        char[] chars = s.toCharArray();
        int i = 0, j = chars.length - 1;
        while (i < j) {
            char tmp = chars[i];
            chars[i] = chars[j];
            chars[j] = tmp;
            i++;
            j--;
        }
        return String.valueOf(chars);
    }

    private boolean isPalindrome(String s) {
        char[] chars = s.toCharArray();
        int i = 0, j = chars.length - 1;
        while (i < j) {
            if (chars[i] != chars[j]) return false;
            i++;
            j--;
        }
        return true;
    }
}



================================


class Solution {
    private static class TrieNode {
        private int index = -1;
        private TrieNode[] next = new TrieNode[26];
        private List<Integer> indices = new ArrayList<>();
    }

    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> res = new ArrayList<>();
        if (words == null || words.length < 2) return res;
        TrieNode root = new TrieNode();
        for (int i = 0; i < words.length; i++) {
            buildTrie(root, words[i], i);
        }
        for (int i = 0; i < words.length; i++) {
            search(root, words[i], i, res);
        }
        return res;
    }

    private void buildTrie(TrieNode root, String word, int i) {
        // creating trie from reversed word
        for (int j = word.length() - 1; j >= 0; j--) {
            int id = word.charAt(j) - 'a';
            if (root.next[id] == null) root.next[id] = new TrieNode();
            if (isPalindrome(word, 0, j)) root.indices.add(i);
            root = root.next[id];
        }
        root.index = i;
        root.indices.add(i);
    }

    private void search(TrieNode root, String word, int i, List<List<Integer>> res) {
        for (int j = 0; j < word.length(); j++) {
            if (root.index >= 0 && root.index != i && isPalindrome(word, j, word.length() - 1)) {
                res.add(Arrays.asList(i, root.index));
            }
            root = root.next[word.charAt(j) - 'a'];
            if (root == null) return;
        }
        for (int id : root.indices) {
            if (id == i) continue;
            res.add(Arrays.asList(i, id));
        }
    }

    private boolean isPalindrome(String s, int i, int j) {
        while (i < j) {
            if (s.charAt(i++) != s.charAt(j--)) return false;
        }
        return true;
    }
}

===============================================================================================================================================

class Solution {

    // TC:O(n*k2)
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> res = new ArrayList();
        Map<String, Integer> map = new HashMap();

        for (int i = 0; i < words.length; ++i) {
            map.put(words[i], i);
        }

        // Empty String case
        if (map.containsKey("")) {
            int blankIdx = map.get("");
            for (int i = 0; i < words.length; ++i) {
                if (i != blankIdx && isPalindrome(words[i])) {
                    res.add(Arrays.asList(blankIdx, i));
                    res.add(Arrays.asList(i, blankIdx));
                }
            }
        }

        // Reflection case
        for (int i = 0; i < words.length; ++i) {
            String reversed = new StringBuilder(words[i]).reverse().toString();
            Integer reversedIdx = map.get(reversed);
            if (reversedIdx != null && reversedIdx != i) {
                res.add(Arrays.asList(i, reversedIdx));
            }
        }


        // Tricky case
        for (int i = 0; i < words.length; ++i) {
            String cur = words[i];
            for (int cut = 1; cut < cur.length(); ++cut) {
                String left = cur.substring(0, cut);
                String right = cur.substring(cut);
                if (isPalindrome(left)) {
                    String reversedRight = new StringBuilder(right).reverse().toString();
                    if (map.containsKey(reversedRight)) {
                        res.add(Arrays.asList(map.get(reversedRight), i));
                    }
                }
                if (isPalindrome(right)) {
                    String reversedLeft = new StringBuilder(left).reverse().toString();
                    if (map.containsKey(reversedLeft)) {
                        res.add(Arrays.asList(i, map.get(reversedLeft)));
                    }
                }
            }
        }
        return res;
    }

    private boolean isPalindrome(String word) {
        int i = 0, j = word.length() - 1;
        while(i < j) {
            if (word.charAt(i++) != word.charAt(j--)) return false;
        }
        return true;
    }
}

===============================================================================================================================================
class Solution {
    private static class TrieNode {
    TrieNode[] next;
    int index;
    List<Integer> list;
    	
    TrieNode() {
    	next = new TrieNode[26];
    	index = -1;
    	list = new ArrayList<>();
    }
}
    
public List<List<Integer>> palindromePairs(String[] words) {
    List<List<Integer>> res = new ArrayList<>();

    TrieNode root = new TrieNode();
		
    for (int i = 0; i < words.length; i++) {
        addWord(root, words[i], i);
    }
		
    for (int i = 0; i < words.length; i++) {
        search(words, i, root, res);
    }
    
    return res;
}
    
private void addWord(TrieNode root, String word, int index) {
    for (int i = word.length() - 1; i >= 0; i--) {
        int j = word.charAt(i) - 'a';
				
        if (root.next[j] == null) {
            root.next[j] = new TrieNode();
        }
				
        if (isPalindrome(word, 0, i)) {
            root.list.add(index);
        }
				
        root = root.next[j];
    }
    	
    root.list.add(index);
    root.index = index;
}
    
private void search(String[] words, int i, TrieNode root, List<List<Integer>> res) {
    for (int j = 0; j < words[i].length(); j++) {	
    	if (root.index >= 0 && root.index != i && isPalindrome(words[i], j, words[i].length() - 1)) {
    	    res.add(Arrays.asList(i, root.index));
    	}
    		
    	root = root.next[words[i].charAt(j) - 'a'];
      	if (root == null) return; 
    }
    	
    for (int j : root.list) {
    	if (i == j) continue;
    	res.add(Arrays.asList(i, j));
    }
}
    
private boolean isPalindrome(String word, int i, int j) {
    while (i < j) {
    	if (word.charAt(i++) != word.charAt(j--)) return false;
    }
    	
    return true;
}
}

===============================================================================================================================================


Java

import java.util.*;

class Solution {

    // Based on the 3 examples given by LeetCode, we can derive 3 conditions where str1 + str2 = palindrome.
    // Case 1: If there is str1 "", and str2 that is palindrome, then str1 + str2 ("" + palindrome) is still a palindrome.
    //         From Example 3: words = ["a",""]
    //                         str1 = "", str2 = "a" (a palindrome), so str1 + str2 = "a" (a palindrome).
    //
    // Case 2: If str1 is the reverse of str2, then str1 + str2 and str2 + str1 are both palindromes.
    //         From Example 2: words = ["bat"*,"tab"*,"cat"]
    //                         str1 = "bat, str2 = "tab", str1 is the reverse of str2,
    //                         so str1 + str2 = "battab", and str2 + str1 = "tabbat".
    //
    // Case 3: If str1 is the reverse of a part of str2 (sub1 + sub2), and the second part is a palindrome, then the following:
    //         A. If str1 is the reverse of sub1, and sub2 is palindrome, then str2 + str1 = palindrome.
    //         B. If str1 is the reverse of sub2, and sub1 is palindrome, then str1 + str2 = palindrome.
    //         From Example 1: words = ["abcd","dcba","lls"*,"s"*,"sssll"*]
    //                         A. Not shown here.
    //                         B. str1 = "s", str2 = "lls" (sub1 = "ll", sub2 = "s"), or
    //                            str1 = "lls", str2 = "sssll" (sub1 = "ss", sub2 = "sll")
    //                         Both cases, str1 is the reverse of sub2, and sub1 is a palindrome.
    //

    public List<List<Integer>> palindromePairs(String[] words) {

        // For this palindromePairs method to work, we need to write two other methods, namely:
        //      1. isPalindrome() to check if a given input is a palindrome.
        //      2. reverseStr() to return the reversed string.

        // First instantiate the result list. Don't worry about the List<Integer> within,
        // as we will instantiate the list of index pair when we found the concatenated palindrome pair.
        List<List<Integer>> result = new ArrayList<>();

        // Check if the words input is null or empty.
        if (words == null || words.length == 0) {
            return result;
        }

        // Use a hashmap (dictionary) to record the key-value pair (String-index pair).
        Map<String, Integer> dictionary = new HashMap<>();

        // Use an array to keep track of the string length and its occurrences.
        // Why? To lower the time complexity needed when checking the dictionary for a particular string,
        //      by first checking if string of this length is in 'words'.
        int[] hasLength = new int[5000 + 1];

        // Traverse the 'words', to record String and index in the dictionary, and the String length occurrence in hasLength.
        for (int i = 0; i < words.length; i++) {
            dictionary.put(words[i], i);
            hasLength[words[i].length()]++;
        }

        // Case 1: If there is str1 "", and str2 that is palindrome.
        // If "" is in 'words', then it can combine with any palindrome string, in both orderings, to form a palindrome.
        if (dictionary.containsKey("")) {
            int emptyStrIndex = dictionary.get("");
            // Check for all the palindromes.
            for (int i = 0; i < words.length; i++) {
                if (isPalindrome(words[i], 0, words[i].length() - 1)) {
                    // This to make sure we combine emptyStrIndex with itself.
                    if (i == emptyStrIndex) {
                        continue;
                    }
                    // Add to result, both str1 + str2 and str2 + str1 combinations.
                    result.add(Arrays.asList(emptyStrIndex, i));
                    result.add(Arrays.asList(i, emptyStrIndex));
                }
            }
        }

        // Case 2: If str1 is the reverse of str2.
        // For each string in 'words', we check if the reversed string (str2) is identical to the string (str1).
        for (int i = 0; i < words.length; i++) {
            // Call the reverseStr() method to reverse the string.
            String reversedStr = reverseStr(words[i]);
            // Find if the reverseStr is in the dictionary. If it is, we get the index.
            if (dictionary.containsKey(reversedStr)) {
                int reversedStrIndex = dictionary.get(reversedStr);
                // This is to make sure we check for palindromes, so we don't combine palindrome with itself.
                if (i == reversedStrIndex) {
                    continue;
                }
                // Else, add to result.
                result.add(Arrays.asList(i, reversedStrIndex));
            }
        }

        // Case 3: If str1 is the reverse of a part of str2 (sub1 + sub2), and the second part is a palindrome.
        // Checking for every string in 'words'.
        for (int i = 0; i < words.length; i++) {
            String currentStr = words[i];

            // Each string, check for all the possible substrings, using sliceIndex to traverse each string.
            for (int sliceIndex = 1; sliceIndex < currentStr.length(); sliceIndex++) {

                // A. If str1 is the reverse of sub1, and sub2 is palindrome, then str2 + str1 = palindrome.
                // First check is sub1 length in hasLength, and check sub2 if is palindrome.
                if (hasLength[sliceIndex] > 0
                        && isPalindrome(currentStr, sliceIndex, currentStr.length() - 1)) {

                    // Reverse sub1 to check if str1 is in the dictionary.
                    String reversedSubStr = reverseStr(currentStr.substring(0,sliceIndex));
                    if (dictionary.containsKey(reversedSubStr)) {
                        int reversedStrIndex = dictionary.get(reversedSubStr);
                        // This is to check for palindromes, when sliceIndex is in the middle of the palindrome.
                        if (reversedStrIndex == i) {
                            continue;
                        }
                        // str2 (sub1 + sub2 (palindrome)) + str1 (reverse of sub1)
                        result.add(Arrays.asList(i, reversedStrIndex));
                    }
                }

                // B. If str1 is the reverse of sub2, and sub1 is palindrome, then str1 + str2 = palindrome.
                // First check is sub2 length in hasLength, and check sub1 if is palindrome.
                if (hasLength[currentStr.length() - sliceIndex] > 0
                        && isPalindrome(currentStr, 0, sliceIndex - 1)) {

                    // Reverse sub2 to check if str1 is in the dictionary.
                    String reversedSubStr = reverseStr(currentStr.substring(sliceIndex, currentStr.length()));
                    if (dictionary.containsKey(reversedSubStr)) {
                        int reversedStrIndex = dictionary.get(reversedSubStr);
                        // This is to check for palindromes, when sliceIndex is in the middle of the palindrome.
                        if (reversedStrIndex == i) {
                            continue;
                        }
                        // str1 (reverse of sub2) + str2 (sub1 (palindrome) + sub2)
                        result.add(Arrays.asList(reversedStrIndex, i));
                    }
                }
            }
        }
        return result;
    }

    // Method 1:
    // To check if given string is a palindrome. Use 2 pointers (front and back) as input,
    // as we might check if the substring is a palindrome, not the whole string.
    private boolean isPalindrome(String str, int front, int back) {
        while (front < back) {
            if (str.charAt(front) != str.charAt(back)) {
                return false;
            }
            front++;
            back--;
        }
        return true;
    }

    // Method 2:
    // To return the reversed string.
    private String reverseStr(String str) {
        StringBuilder stringBuilder = new StringBuilder(str);
        return stringBuilder.reverse().toString();
    }

}

===============================================================================================================================================
The idea is to not create a new string for doing the Palindrome check and instead just index into the strings correctly.
Without this, the checker throws a TLE.

class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        int n = words.length;
        List<List<Integer>> output = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (isPalindrome(words[i], words[j])) {
                    output.add(Arrays.asList(i, j));
                }
                if (isPalindrome(words[j], words[i])) {
                    output.add(Arrays.asList(j, i));
                }
            }
        }
        return output;
    }
    
    private boolean isPalindrome(String word1, String word2) {
        int start = 0;
        int l1 = word1.length();
        int l2 = word2.length();
        int end = l1 + l2 - 1;
		
        while (start < end) {
            char ch1 = start < l1 ? word1.charAt(start) : word2.charAt(start - l1);
            char ch2 = end >= l1 ? word2.charAt(end - l1) : word1.charAt(end);
            if (ch1 != ch2) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}


===============================================================================================================================================
This approach uses Manacher's Algorithm to acheive linear time for calculation of all palidromes within a string.
Please use this article for an in-depth explanation of the algorithm.

Now that we can detect all palidromes in a word, we can use a HashMap to find any possible pairs. Here are cases of pairs:

If the palidrome extends to the start of the word, the word will form a pair with the reverse of the leftover. 
  Ex: "abade" comprise of the palidrome, "aba", and its leftover, "de", so it can form a pair with word "ed" resulting in "edabade".
If the palidrome extends to the end of the word, the same concept applies but the leftover is at the front of the palidrome.
Notice that both cases above takes care of the edge case involving a blank string "" but they can create duplicates in some cases.
Without further ado, here is the code:

public class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> ans = new ArrayList<>(); 
        if (words == null || words.length < 2) return ans;
		
		// Build a map of all the current words. Will be used to find pairs in constant time.
        Map<String, Integer> map = new HashMap<String, Integer>();
        for (int i=0; i<words.length; i++) map.put(words[i], i);
        
        for (int i=0; i<words.length; i++) {
			
			// Creating a reverse string to use for checking
            String reverse = new StringBuilder(words[i]).reverse().toString();
            
			// Start of Manacher's Algorithm
            char[] extended = new char[words[i].length()*2+1];
            for(int j = 0; j < words[i].length(); ++j)
                extended[j*2+1]=words[i].charAt(j);
            
            int center = 0, radius = 0;
            int oldCenter = 0, oldRadius = 0;
            int mirroredCenter = 0, maxMirroredRadius = 0;
            int[] radii = new int[extended.length];
            
            while(center<extended.length){
                while(center-radius-1>=0 && 
                      center+radius+1<extended.length && 
                      extended[center-radius-1]==extended[center+radius+1])
                    radius++;
                
                radii[center] = radius;
                oldCenter = center;
                oldRadius = radius;
                
                // Check for any pair from the detected palidrome
                checkPair(radius,center,radii.length-1,i,reverse,map,ans);
                center++;
                radius = 0;

                while(center<=oldCenter+oldRadius){
                    mirroredCenter = oldCenter - (center - oldCenter);
                    maxMirroredRadius = oldCenter + oldRadius - center;

                    if(radii[mirroredCenter]<maxMirroredRadius){
                        radii[center]=radii[mirroredCenter];
						// Check for any pair from the detected palidrome
                        checkPair(radii[center],center,radii.length-1,i,reverse,map,ans);
                        center++;
                    } else if (radii[mirroredCenter]>maxMirroredRadius){
                        radii[center]=maxMirroredRadius;
						// Check for any pair from the detected palidrome
                        checkPair(radii[center],center,radii.length-1,i,reverse,map,ans);
                        center++;
                    } else {
                        radius = maxMirroredRadius;
                        break;
                    }
                }
            }
        }
        
        return ans;
    }
    
    private void checkPair(int radius, int center, int end, int i, String reverse, Map<String,Integer> map, List<List<Integer>> ans){
		// If the palidrome reaches to the start of the word
        if(center-radius==0){
            String check = reverse.substring(0,reverse.length()-radius);
            if(map.containsKey(check))
                addPair(map.get(check),i,ans);
        }
         // If the palidrome reaches to the end of the word. Also takes care of possible duplicate case.
        if(center+radius==end && center!=end){
            String check = reverse.substring(radius);
            if(map.containsKey(check))
                addPair(i,map.get(check),ans);
        }
    }
    
    private void addPair(int i, int j, List<List<Integer>> ans){
		// Do not add if the words are the same
        if(i==j) return;
        
        List<Integer> pair = new ArrayList<>(2);
        pair.add(i);
        pair.add(j);
        ans.add(pair);
    }
}



===============================================================================================================================================

class Solution {
    public static class Trie {
    int pos;
    Trie[] nodes;   // consider xyxabc. if current trie is 'a'. Then a.nodes has information. It means string after a is palindrome
    List<Integer> palins;
    public Trie() {
        pos = -1;
        nodes = new Trie[26];
        palins = new ArrayList<>();
    }
}

public static void add(Trie root, String word, int pos) {
    for (int i = word.length() - 1; i >= 0; i--) {
        char ch = word.charAt(i);
        if (isPalindrome(word, 0, i)) { // check if substring(0, i) is palindrome.
            root.palins.add(pos);
        }
        if (root.nodes[ch - 'a'] == null) {
            root.nodes[ch - 'a'] = new Trie();
        }
        root = root.nodes[ch - 'a'];
    }
    root.pos = pos; // if it is xyxcba. Until now, the node should be at x.
    root.palins.add(pos);
}

public static void search(Trie root, String[] words, int i, List<List<Integer>> ans) {
    int len = words[i].length();
    for (int j = 0; j < len && root != null; j++) {
        if (root.pos >= 0 && i != root.pos && isPalindrome(words[i], j, len - 1)) {
            ans.add(Arrays.asList(new Integer[] {i, root.pos}));
        }
        char ch = words[i].charAt(j);
        root = root.nodes[ch - 'a'];
    }
    if (root != null && root.palins.size() > 0) { // assume 'xyxabc' is in trie, now try 'cba'
        for (int j : root.palins) {
            if (j != i) {
                ans.add(Arrays.asList(new Integer[] {i, j}));
            }
        }
    }
}

public static List<List<Integer>> palindromePairs(String[] words) {
    List<List<Integer>> ans = new ArrayList<>();
    Trie trie = new Trie();
    for (int i = 0; i < words.length; i++) {
        add(trie, words[i], i);
    }
    for (int i = 0; i < words.length; i++) {
        search(trie, words, i, ans);
    }
    return ans;
}

public static boolean isPalindrome(String str, int i, int j) {
    while (i < j) {
        if (str.charAt(i++) != str.charAt(j--)) {
            return false;
        }
    }
    return true;
}
}



===============================================================================================================================================

Number of cases :
Case1: If s1 is a blank string, then for any string that is palindrome s2, s1+s2 and s2+s1 are palindrome.
Case 2: If s2 is the reversing string of s1, then s1+s2 and s2+s1 are palindrome.
Case 3: If s1[0:cut] is palindrome and there exists s2 is the reversing string of s1[cut+1:] , then s2+s1 is palindrome.``
Case 4: Similiar to case3. If s1[cut+1: ] is palindrome and there exists s2 is the reversing string of s1[0:cut] , then s1+s2 is palindrome

public class Solution {
public List<List<Integer>> palindromePairs(String[] words) {
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    if(words == null || words.length == 0){
        return res;
    }
    //build the map save the key-val pairs: String - idx
    HashMap<String, Integer> map = new HashMap<>();
    for(int i = 0; i < words.length; i++){
        map.put(words[i], i);
    }
    
    //special cases: "" can be combine with any palindrome string
    if(map.containsKey("")){
        int blankIdx = map.get("");
        for(int i = 0; i < words.length; i++){
            if(isPalindrome(words[i])){
                if(i == blankIdx) continue;
                res.add(Arrays.asList(blankIdx, i));
                res.add(Arrays.asList(i, blankIdx));
            }
        }
    }
    
    //find all string and reverse string pairs
    for(int i = 0; i < words.length; i++){
        String cur_r = reverseStr(words[i]);
        if(map.containsKey(cur_r)){
            int found = map.get(cur_r);
            if(found == i) continue;
            res.add(Arrays.asList(i, found));
        }
    }
    
    //find the pair s1, s2 that 
    //case1 : s1[0:cut] is palindrome and s1[cut+1:] = reverse(s2) => (s2, s1)
    //case2 : s1[cut+1:] is palindrome and s1[0:cut] = reverse(s2) => (s1, s2)
    for(int i = 0; i < words.length; i++){
        String cur = words[i];
        for(int cut = 1; cut < cur.length(); cut++){
            if(isPalindrome(cur.substring(0, cut))){
                String cut_r = reverseStr(cur.substring(cut));
                if(map.containsKey(cut_r)){
                    int found = map.get(cut_r);
                    if(found == i) continue;
                    res.add(Arrays.asList(found, i));
                }
            }
            if(isPalindrome(cur.substring(cut))){
                String cut_r = reverseStr(cur.substring(0, cut));
                if(map.containsKey(cut_r)){
                    int found = map.get(cut_r);
                    if(found == i) continue;
                    res.add(Arrays.asList(i, found));
                }
            }
        }
    }
    
    return res;
}

public String reverseStr(String str){
    StringBuilder sb= new StringBuilder(str);
    return sb.reverse().toString();
}

public boolean isPalindrome(String s){
    int i = 0;
    int j = s.length() - 1;
    while(i <= j){
        if(s.charAt(i) != s.charAt(j)){
            return false;
        }
        i++;
        j--;
    }
    return true;
}
}



===============================================================================================================================================

There are several cases to be considered that isPalindrome(s1 + s2):

Case1: If s1 is a blank string, then for any string that is palindrome s2, s1+s2 and s2+s1 are palindrome.

Case 2: If s2 is the reversing string of s1, then s1+s2 and s2+s1 are palindrome.

Case 3: If s1[0:cut] is palindrome and there exists s2 is the reversing string of s1[cut+1:] , then s2+s1 is palindrome.

Case 4: Similiar to case3. If s1[cut+1: ] is palindrome and there exists s2 is the reversing string of s1[0:cut] , then s1+s2 is palindrome.

To make the search faster, build a HashMap to store the String-idx pairs.

My code:

public class Solution {
public List<List<Integer>> palindromePairs(String[] words) {
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    if(words == null || words.length == 0){
        return res;
    }
    //build the map save the key-val pairs: String - idx
    HashMap<String, Integer> map = new HashMap<>();
    for(int i = 0; i < words.length; i++){
        map.put(words[i], i);
    }
    
    //special cases: "" can be combine with any palindrome string
    if(map.containsKey("")){
        int blankIdx = map.get("");
        for(int i = 0; i < words.length; i++){
            if(isPalindrome(words[i])){
                if(i == blankIdx) continue;
                res.add(Arrays.asList(blankIdx, i));
                res.add(Arrays.asList(i, blankIdx));
            }
        }
    }
    
    //find all string and reverse string pairs
    for(int i = 0; i < words.length; i++){
        String cur_r = reverseStr(words[i]);
        if(map.containsKey(cur_r)){
            int found = map.get(cur_r);
            if(found == i) continue;
            res.add(Arrays.asList(i, found));
        }
    }
    
    //find the pair s1, s2 that 
    //case1 : s1[0:cut] is palindrome and s1[cut+1:] = reverse(s2) => (s2, s1)
    //case2 : s1[cut+1:] is palindrome and s1[0:cut] = reverse(s2) => (s1, s2)
    for(int i = 0; i < words.length; i++){
        String cur = words[i];
        for(int cut = 1; cut < cur.length(); cut++){
            if(isPalindrome(cur.substring(0, cut))){
                String cut_r = reverseStr(cur.substring(cut));
                if(map.containsKey(cut_r)){
                    int found = map.get(cut_r);
                    if(found == i) continue;
                    res.add(Arrays.asList(found, i));
                }
            }
            if(isPalindrome(cur.substring(cut))){
                String cut_r = reverseStr(cur.substring(0, cut));
                if(map.containsKey(cut_r)){
                    int found = map.get(cut_r);
                    if(found == i) continue;
                    res.add(Arrays.asList(i, found));
                }
            }
        }
    }
    
    return res;
}

public String reverseStr(String str){
    StringBuilder sb= new StringBuilder(str);
    return sb.reverse().toString();
}

public boolean isPalindrome(String s){
    int i = 0;
    int j = s.length() - 1;
    while(i <= j){
        if(s.charAt(i) != s.charAt(j)){
            return false;
        }
        i++;
        j--;
    }
    return true;
}
}


==========================================================================================================================

class Solution {
    private static class TrieNode {
    TrieNode[] next;
    int index;
    List<Integer> list;
    	
    TrieNode() {
    	next = new TrieNode[26];
    	index = -1;
    	list = new ArrayList<>();
    }
}
    
public List<List<Integer>> palindromePairs(String[] words) {
    List<List<Integer>> res = new ArrayList<>();

    TrieNode root = new TrieNode();
		
    for (int i = 0; i < words.length; i++) {
        addWord(root, words[i], i);
    }
		
    for (int i = 0; i < words.length; i++) {
        search(words, i, root, res);
    }
    
    return res;
}
    
private void addWord(TrieNode root, String word, int index) {
    for (int i = word.length() - 1; i >= 0; i--) {
        int j = word.charAt(i) - 'a';
				
        if (root.next[j] == null) {
            root.next[j] = new TrieNode();
        }
				
        if (isPalindrome(word, 0, i)) {
            root.list.add(index);
        }
				
        root = root.next[j];
    }
    	
    root.list.add(index);
    root.index = index;
}
    
private void search(String[] words, int i, TrieNode root, List<List<Integer>> res) {
    for (int j = 0; j < words[i].length(); j++) {	
    	if (root.index >= 0 && root.index != i && isPalindrome(words[i], j, words[i].length() - 1)) {
    	    res.add(Arrays.asList(i, root.index));
    	}
    		
    	root = root.next[words[i].charAt(j) - 'a'];
      	if (root == null) return; 
    }
    	
    for (int j : root.list) {
    	if (i == j) continue;
    	res.add(Arrays.asList(i, j));
    }
}
    
private boolean isPalindrome(String word, int i, int j) {
    while (i < j) {
    	if (word.charAt(i++) != word.charAt(j--)) return false;
    }
    	
    return true;
}
}

