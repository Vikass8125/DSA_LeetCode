You are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense.
You are given a 2D integer array properties where properties[i] = [attacki, defensei] represents the properties of the ith character in the game.

A character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. 
More formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei.

Return the number of weak characters.

 

Example 1:

Input: properties = [[5,5],[6,3],[3,6]]
Output: 0
Explanation: No character has strictly greater attack and defense than the other.
Example 2:

Input: properties = [[2,2],[3,3]]
Output: 1
Explanation: The first character is weak because the second character has a strictly greater attack and defense.
Example 3:

Input: properties = [[1,5],[10,4],[4,3]]
Output: 1
Explanation: The third character is weak because the second character has a strictly greater attack and defense.
 

Constraints:

2 <= properties.length <= 105
properties[i].length == 2
1 <= attacki, defensei <= 105

MY_SOLUTION

Explanation:

It is a 2-demision problem
We can regard the players as points in 2-demision coordinate axis
As we put all of the points on the graph, it will form a curve like this: (wek points are inside of the area made by the curve and x/y axis)
image
So we can describe this curve as an int[] maxH, the index stands for x value and y stands for maxH.
To form maxH, firstly we traverse all the points and makes finds out the max height of points with the same x value. Then we traverse the maxH from 100001 to zero, which guarantees every points with index i has the max height among i to 100001

Then we make our greedy approach: if the point[y] is less than maxH(point[x]+1), it's weak.

class Solution {
    public int numberOfWeakCharacters(int[][] properties) {
        int[] maxH = new int[100002];
        int count = 0;
        for(int[] point:properties){
            maxH[point[0]] = Math.max(point[1],maxH[point[0]]);
        }
        for(int i=100000;i>=0;i--){
            maxH[i] = Math.max(maxH[i+1],maxH[i]);
        }
        
        for(int[] point:properties){
            if(point[1]<maxH[point[0]+1])
                count++;
        }
        return count;
    }
}
Time Complexity: O(100002)
Space Complexity: O(100002)


=====================================================================

/*
        Approach:
        Sort the array by attack (i.e, pro[i][0]) in decreasing order, but if two items have same attacks then sort them by defense (i.e., pro[i][1]) in increasing order
        
        Ex: [[7,7],[1,2],[9,7],[7,3],[3,10],[9,8],[8,10],[4,3],[1,5],[1,5]]
        After sorting
            [
                [9,7],
                [9,8],
                [8,10],
                [7,3],
                [7,7],
                [4,3],
                [3,10],
                [1,2],
                [1,5],
                [1,5]
            ]
        Now start traversing the array from left to right.
        Try to visualize that any item in the array can be a weak character 
		if the defense of that item is smaller than the defense of any item 
		present before that (this should be the maximum of all the defense 
		of already traversed array), as the array is already sorted by attack in decreasig order
        
        Ex:
        in above sorted array the item [7,3] can be weak character 
		if the defense of this character(i.e, 3) is smaller than defense of 
		any character before this, here taking maximum of defense, 
		so if 3<max(7,8,10) then this is a weak character
        
        Hence the above example will become
            [
                [9,7], 
                [9,8],
                [8,10],
                [7,3],  // Weak
                [7,7],  // Weak
                [4,3],  // Weak
                [3,10], 
                [1,2],  // Weak
                [1,5],  // Weak
                [1,5]   // Weak
            ]
            
        result = 6
        
*/

class Solution {
    public int numberOfWeakCharacters(int[][] pro) {
        int res = 0;
        // Sorting by above explained approach
        Arrays.sort(pro, (a,b) -> (a[0]!=b[0]) ? b[0]-a[0] : a[1]-b[1]);
        
		// Compare the defense of character with previous characters' defense 
		// and count weak characters accordingly 
        int max = Integer.MIN_VALUE;
        for(int[] e : pro){
            if(e[1] < max) res++;
            max = Math.max(max,e[1]);
        }
        
        return res;
    }
}
===============================================================
class Solution {
    public int numberOfWeakCharacters(int[][] properties) {
        
        // if we sort only by 1st indexes, there could be values where 1st index is the same 
        // Arrays.sort(properties, (a,b) -> Integer.compare(a[0], b[0]));
        
        // b[1], a[1] because we need the 2nd values in descending order
        Arrays.sort(properties, (a,b) -> (a[0] == b[0]) ? Integer.compare(b[1], a[1]) : Integer.compare(a[0], b[0]));
        
        int noOfWeakCharacters = 0;
        int len = properties.length;
       // improvization here - // we need to keep track of the max value
        int max = properties[len-1][1];
        
        for(int i = len-2; i>=0 ;i--) {
            
            if(properties[i][1] < max) {
                noOfWeakCharacters++;
            } else {
                max = properties[i][1];
            }
        }
        return noOfWeakCharacters;
    }
}

=============================================================
class Solution {
    public int numberOfWeakCharacters(int[][] properties) {
        Arrays.sort(properties,(a,b)->a[0] == b[0] ? a[1] - b[1] :b[0]-a[0]);
        int n = properties.length,max = Integer.MIN_VALUE,res = 0;
        for(int i = 0;i< n;i++){
            if(properties[i][1] < max)res++;
            max = Math.max(max,properties[i][1]);
        }
        return res;
    }
}
================================================================
Idea
Actually we have to it just greedy by smartly :))
First I sorted the attack using Treemap
Then I have store the similiar attack's defence value in accending order so that I can get max element in future!
Storing maximum value of defence just after the current attack value
Finally checked that if any values are which are less then the max defence values

please do upvote!!

Time Complexity

O(nlogn)

class Solution {
    public int numberOfWeakCharacters(int[][] arr) {
        
    	int i,n=arr.length,j;
    	Map<Integer, List<Integer>> map=new TreeMap<>();
    	for(i=0;i<n;i++) {
    		List<Integer> list=map.getOrDefault(arr[i][0], new ArrayList<>());
    		list.add(arr[i][1]);
    		map.put(arr[i][0], list);
    	}
    	for(Integer key : map.keySet())	{
    		List<Integer> list=new ArrayList<>(map.get(key));
    		Collections.sort(list);
    		map.put(key, list);
    	}
    	List<Entry<Integer, List<Integer>>> list=new ArrayList<>(map.entrySet());
    	int max_ele[]=new int[list.size()],max=-1;
    	for(i=list.size()-1;i>=0;i--)  {
    		max_ele[i]=Math.max(max,list.get(i).getValue().get(list.get(i).getValue().size()-1));
    		max=Math.max(max_ele[i], max);
    	}
    	int c=0;
    	for(i=0;i<list.size()-1;i++) {
    		for(Integer ele : list.get(i).getValue())
    			if(ele<max_ele[i+1])
    				c++;
    	}
    	return c;
    }
}
=================================================================
public int numberOfWeakCharacters(int[][] properties) {
        Arrays.sort(properties, new Comparator<int[]>() { // sorting based on array elements
            public int compare(int[] a, int[] b) {
                if (a[0] == b[0]) {
                    return a[1] - b[1];
                }
                return b[0] - a[0];
            }
        });
        Stack<int[]> s = new Stack<int[]>();
        s.push(properties[0]);
        int count = 0;
        for (int i = 1; i < properties.length; i++) {
            if (properties[i][0] < s.peek()[0] && properties[i][1] < s.peek()[1]) { // since s.peek() is greater array than properties[i] so we will increment the count
                count++;
            }
            else {
                s.push(properties[i]); // push the max array into the stack
            }
        }
        return count;
    }
    
    
 ===========================================================
 THE brute force solution for this question is not too difficult to come up with, but chances are that most of the time interviewers would be looking for
 a more efficient solution.

Since this question basically wants us to find a pair which has both elements strictly greater than the current element that we are trying to 
find to check if the current element is weak, a few things come to mind:

Sorting
TreeMap / PriorityQueue
Definitely, either of those solutions would work but if you really want to nail your interview, you should always think one thing more, clarity of your solution.

From what I can think, I believe sorting will be a more clear solution and hence it will also be easier to explain through in an interview setting.

Since the approach is now decided, let's think of how should we sort. There are many thought processes here,
but my approach is sorting in descending order of defence (if attacks are equal) otherwise in ascending order of attack.

Then we can interate from the last element while maintaining the max defence. 
And whenever we find a defence greater than our max defence we can increase the weak counter.

In code this looks something like this:

class Solution {
    public int numberOfWeakCharacters(int[][] properties) {
        Arrays.sort(properties, new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                if (a[0] == b[0]) {
                    return b[1] - a[1];
                }
                
                return a[0] - b[0];
            }
        });
        
        int max = Integer.MIN_VALUE, count = 0;
        
        for (int i = properties.length - 1; i >= 0; i--) {
            int[] property = properties[i];
            
            if (property[1] < max) {
                count++;
            }
            
            max = Math.max(property[1], max);
        }
        
        return count;
    }
}
=======================================================
We want to know who the weak players are - whose both attacks and defenses are weaker than any player
lets sort the players in ascending order by their first indices. Then we will have all the attacks in ascending order, 
which mean all the defences should be in decreasing order so that there are no weak players. 

descending order from the beginning is ascending order from the end, so we iterate the array from the end after sorting

properties = [[5,5],[6,3],[3,6]] - [3,6], [5,5], [6,3]

when there are same first indices (attacks) of two players
[[1,1],[2,1],[2,2],[1,2]] - asc sorting only by 1st value - [1,1], [1,2], [2,1], [2,2] 
// 2,1 shouldn't be the weakest player because the weakest player is when both the forces are less. 

so we need to sort the second values by descending order.
[1,2] [1,1] [2,2] [2,1]

// time - Arrays.sort - O(nlogn)

class Solution {
    public int numberOfWeakCharacters(int[][] properties) {
        
        // if we sort only by 1st indexes, there could be values where 1st index is the same 
        // Arrays.sort(properties, (a,b) -> Integer.compare(a[0], b[0]));
        
        // b[1], a[1] because we need the 2nd values in descending order
        Arrays.sort(properties, (a,b) -> (a[0] == b[0]) ? Integer.compare(b[1], a[1]) : Integer.compare(a[0], b[0]));
        
        int noOfWeakCharacters = 0;
        int len = properties.length;
       // improvization here - // we need to keep track of the max value
        int max = properties[len-1][1];
        
        for(int i = len-2; i>=0 ;i--) {
            
            if(properties[i][1] < max) {
                noOfWeakCharacters++;
            } else {
                max = properties[i][1];
            }
        }
        return noOfWeakCharacters;
    }
}
