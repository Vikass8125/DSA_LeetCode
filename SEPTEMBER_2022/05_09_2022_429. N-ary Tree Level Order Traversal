Given an n-ary tree, return the level order traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).

 

Example 1:



Input: root = [1,null,3,2,4,null,5,6]
Output: [[1],[3,2,4],[5,6]]
Example 2:



Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]
 

Constraints:

The height of the n-ary tree is less than or equal to 1000
The total number of nodes is between [0, 104]


MY_SOLUTION

Ex: Give the following n-ary tree…

8
/ |
2 3 29
return [[8], [2, 3, 29]]
Ex: Given the following n-ary tree…

 2
/ |
1 6 9
/ |
8 2 2
/ |
19 12 90
return [[2], [1, 6, 9], [8, 2, 2], [19, 12, 90]]

// here we can do a BFS search. But here we can't deal with say node.left, node.right checking as there can be n children for a node.
// so a list of children will be provided and these children must be also added and considered

 2
/ |
1 6 9 -> At first we add 2, then we add all its children to the queue and pops out 2 -> [[2]]
/ | \ -> Next we take 1, 6, 9 , find their children and add them into the queue adn pops each 1, 6, 9 ->[[2],[1,6,9]]
8 2 2 -> Same way we do for 8, 2, 2 and also 19, 12, 90 and add them into the list and our final answer become [[2],[1,6,9],[8,2,2],[19,12,90]]
/ |
19 12 90

// Since we are doing a BFS here and we are going through all the node time = O(nodes) and space = O(width)

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        // 1. initialise our result holding variable
		List<List<Integer>> result = new ArrayList<>();
		if (root == null)
			return result;
		// 2. Initialize queue for BFS
		Queue<Node> queue = new LinkedList<>();
		queue.offer(root); //start by adding the root
		while (!queue.isEmpty()) {
			List<Integer> current = new ArrayList<>(); // inorder to store the current level items
			int size = queue.size();
			for (int i=0; i<size; i++) {
				Node temp = queue.poll(); // pop out the first element from the queue.
				current.add(temp.val);   // add the element into current list.
				queue.addAll(temp.children); // add all the children of the node to the queue.
			}
			result.add(current);  // we have all the elements of current level and add it into the final result
		}
		return result;
    }
}


==========================================================================================
class Solution {

public List<List<Integer>> levelOrder(Node root) {
    List<List<Integer>> nm=new ArrayList<List<Integer>>();
    if(root==null)
        return nm;
    Queue<Node> kk=new LinkedList<>();
    kk.offer(root);
    while(!kk.isEmpty())
    {
        int p=kk.size();
        ArrayList<Integer> k=new ArrayList<>();
        for(int i=0;i<p;i++)
        {
            k.add(kk.peek().val);
            for(Node f:kk.peek().children)
            {
                kk.offer(f);
            }
            kk.poll();
        }
        nm.add(new ArrayList<>(k));
    }
    return nm;
}
}
==============================================================================================
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> res = new ArrayList<>();
        solve(root, 0, res);
        return res;
    }
    
    private void solve(Node root, int level, List<List<Integer>> res){
        if(root == null) return;
        
        // When found a new level, add a new list
        if(level >= res.size())
            res.add(new ArrayList<>());
        
        // Add node in the list at the related level
        res.get(level).add(root.val);
        
        // Traverse all the children
        for(Node n : root.children)
            solve(n, level+1, res);
    }
}
