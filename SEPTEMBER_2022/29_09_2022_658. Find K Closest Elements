Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.

An integer a is closer to x than an integer b if:

|a - x| < |b - x|, or
|a - x| == |b - x| and a < b
 

Example 1:

Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]
Example 2:

Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]
 

Constraints:

1 <= k <= arr.length
1 <= arr.length <= 104
arr is sorted in ascending order.
-104 <= arr[i], x <= 104

MY_SOLUTION

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> list = new ArrayList<Integer>();  // A list to store the resultant subarray
        int low = 0;                                    // A var to point at the left half of the array
        int high = arr.length - 1;                      // A var to point at the right half of the array
        
        while(high - low >= k){                         // Traverse till the difference between 'high' and 'low' is not less than 'k'
            int distLow = Math.abs(arr[low] - x);       // Get the difference between 'x' and the element at index 'low' in 'distLow'
            int distHigh = Math.abs(arr[high] - x);     // Get the difference between 'x' and the element at index 'high' in 'distHigh'
            
            if(distLow <= distHigh)                     // Now, check if 'distLow' less than or equal 'distHigh' or not
                high--;                                 // If Yes, then move the right pointer i.e., decrease the value of 'high' 
            else                                        // Else,
                low++;                                  // Move the left pointer i.e., increase the value of 'low'
        }
        while(low <= high)                              // After traversing the array, traverse another loop to get the resultant values
            list.add(arr[low++]);                       // And, keep adding those values to the resultant list
        
        return list;                                    // Finally, return the resultant list
    }
}



===================================================================================
Java - Two Pointers (Clean Code)

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {

        int start = 0;
        int end = arr.length - 1;
        while (end - start >= k) {
            if (Math.abs(arr[start] - x) > Math.abs(arr[end] - x)) {
                start++;
            } else {
                end--;
            }
        }

        List<Integer> result = new ArrayList<>(k);
        for (int i = start; i <= end; i++) {
            result.add(arr[i]);
        }
        return result;
    }
}
Java - Two Pointers (With Explanation)

class Solution {
    
    // Approach:
    // Using two pointers, we are going the 'start' and 'end' pointers towards each other,
    // until only k elements between 'start' and 'end'.
    
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        
        int start = 0;
        int end = arr.length - 1;
        // Between the 'start' and 'end' pointers, inclusive, contains all the k integers that is closest to x.
        while (end - start >= k) {
            // Move 'start' to the right if 'end' is closer to x, or move 'end' to the left if 'start' is closer to x.
            if (Math.abs(arr[start] - x) > Math.abs(arr[end] - x)) {
                start++;
            } else {
                end--;
            }
        }

        // Input all the k closest integers into the result.
        List<Integer> result = new ArrayList<>(k);
        for (int i = start; i <= end; i++) {
            result.add(arr[i]);
        }
        return result;
    }
}
Java - Binary Search (Clean Code)

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {

        int left = 0, right = arr.length - k;
        while (left < right) {
            int midpoint = left + (right - left) / 2; // same as (left + right) / 2
            if (x - arr[midpoint] > arr[midpoint + k] - x) {
                left = midpoint + 1;
            }
            else {
                right = midpoint;
            }
        }

        List<Integer> result = new ArrayList<>(k);
        for (int i = left; i < left + k; i++) {
            result.add(arr[i]);
        }
        return result;
    }
}
Java - Binary Search (With Explanation)

class Solution {

    // Approach:
    // Using binary search and a sliding window, find the midpoint where,
    // the integers between midpoint and midpoint + k is the k closest integers to x.

    public List<Integer> findClosestElements(int[] arr, int k, int x) {

        // The sliding window is between 'mid' and 'mid' + k.
        int left = 0, right = arr.length - k;
        while (left < right) {
            int midpoint = left + (right - left) / 2; // same as (left + right) / 2

            // With midpoint on the left, we use x - arr[midpoint], while arr[midpoint + k] - x because it is on the right.
            // This is important!
            // Rather than using Math.abs(), we need the direction keep the x within the sliding window.
            // If the window is too far left, we shift the window to the right.
            if (x - arr[midpoint] > arr[midpoint + k] - x) {
                left = midpoint + 1;
            }
            // If the window is too far right, we shift the window to the left.
            else {
                right = midpoint;
            }
        }

        // Input all the k closest integers into the result.
        List<Integer> result = new ArrayList<>(k);
        for (int i = left; i < left + k; i++) {
            result.add(arr[i]);
        }
        return result;
    }
}
Java - Priority Queue (Clean Code)

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for (int integer : arr) {
            if (k > 0) {
                minHeap.offer(integer);
                k--;
            } else if (Math.abs(minHeap.peek() - x) > Math.abs(integer - x)) {
                minHeap.poll();
                minHeap.offer(integer);
            }
        }
        List<Integer> result = new ArrayList<>();
        while (!minHeap.isEmpty()) {
            result.add(minHeap.poll());
        }
        return result;
    }
}
Java - Priority Queue (With Explanation)

class Solution {

    // Approach:
    // Using a min heap priority queue, add all the smallest integers up to k integers.
    // Then, traverse the 'arr' array will replacing the priority queue with integer closer to x.

    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        // Traverse the array with,
        // First, add all the smallest integers up to k number.
        // Second, if found a closer integer to x, remove the smallest integer from the priority queue, and add the new integer.
        // This is because the smallest integer is always the further to x, if a larger number is closer to x.
        for (int integer : arr) {
            if (k > 0) {
                minHeap.offer(integer);
                k--;
            } else if (Math.abs(minHeap.peek() - x) > Math.abs(integer - x)) {
                minHeap.poll();
                minHeap.offer(integer);
            }
        }
        
        // Add the integers from the priority queue to the result.
        // This will automatically add in ascending order, from smallest to largest k integers closest to x.
        List<Integer> result = new ArrayList<>();
        while (!minHeap.isEmpty()) {
            result.add(minHeap.poll());
        }
        return result;
    }
}




===================================================================================
class Solution {

class Pair{
    int key;
    int value;
    
    Pair(int key, int value){
        this.key = key;
        this.value = value;
    }
    
}

public List<Integer> findClosestElements(int[] arr, int k, int x) {
    int n = arr.length;
    List<Integer> list = new ArrayList<>();
    
    // make max priority queue
    PriorityQueue<Pair> pq = new PriorityQueue<>(
        new Comparator<Pair>(){
            public int compare(Pair a, Pair b){
                // if both the keys are same then compare on the bases of their values
                if((b.key - a.key) == 0)
                    return b.value - a.value;
                return b.key - a.key;
            }
    });
    
    for(int i: arr){
        pq.add(new Pair(Math.abs(i-x), i));
        
        if(pq.size() > k)
            pq.poll();
    }
    
    while(pq.size() != 0){
        Pair p = pq.poll();
        list.add(p.value);
    }
    
    Collections.sort(list);
    return list;
}
}





===================================================================================

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        
        Queue<int[]> queue = new PriorityQueue<>((a,b) -> b[1]!=a[1] ? b[1] - a[1] : a[0] - b[0]);
		
        //Defined a priority queue which will always keep the maximum diff element in the top of the 
		// queue whenever we find a element with diff smaller we will pop the queue and add the current 
		// element .

        for(int i=0;i<arr.length;i++){
            if(queue.size() == k){
                if(Math.abs(arr[i]-x) < queue.peek()[1]){
                    queue.poll();
                    queue.add(new int[]{i,Math.abs(x-arr[i])});
                }
            }else{
                queue.add(new int[]{i,Math.abs(x-arr[i])});
            }
            
        }
        List<Integer> result = new ArrayList();
        int size = queue.size();
        for(int i=0;i<size;i++){
            result.add(arr[queue.poll()[0]]);
        }
        Collections.sort(result);
        return result;
    }
}



===================================================================================

The idea is to find the possible possition where x could be.
This could be done using Binary Search in logarithmic time complexity as the array is sorted.

Let's say that the number x was found at position i.
Then we would start with a window of size 2 * k + 1, i.e. in the window will be from [i - k, i + k] (with care for the array boundaries, 
i.e. if say, i - k < 0 then the left boundary of our window would be 0, similarly for right boundary).

Now we would start shrinking our window to a size of k by excluding the element from either side whose difference from x is greater. 
If the two boundary elements have same difference then we would remove the element from the right boundary (as mentioned in the question).

So the total time complexity becomes O(log n) for Binary Search and O(n) for Shrinking window size which gets amortized to a total time complexity of O(n).

Below is the Java code for above approach.

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int n = arr.length;
        // 1. Binary Search for possible possition
        int l = 0, r = n - 1, pos = 0;
        while(l <= r) {
            int m = l + (r - l) / 2;
            if(arr[m] <= x) {
                pos = m;
                l = m + 1;
            }
            else {
                r = m - 1;
            }
        }
        
        // 2. Window from i - k to i + k
        l = (pos - k < 0) ? 0 : pos - k;
        r = (pos + k >= n) ? n - 1 : pos + k;
        // 3. Shrink window to size k
        while(r - l + 1 != k) {
            if(Math.abs(arr[l] - x) > Math.abs(arr[r] - x)) {
                l++;
            }
            else r--;
        }
        
        // 4. Our answer is from l to r
        List<Integer> ans = new ArrayList<>();
        for(int i = l; i <= r; i++) {
            ans.add(arr[i]);
        }
        return ans;
    }
}


===================================================================================
Noticing the array is sorted, so we can using binary search to get a rough area of target numbers, 
and then expand it to the left k-1 more and right k-1 more elements, then searching from the left to right. 
If the left element is more close or equal to the target number x than the right element, then move the right index to the left one step. 
Otherwise, move the left index to right one step. Once, the element between the left and right is k, then return the result.

Java

public class Solution {
	public List<Integer> findClosestElements(List<Integer> arr, int k, int x) {
		int index = Collections.binarySearch(arr, x);
		if (index == -1)
			return arr.subList(0, k);
		else if (index >= arr.size())
			return arr.subList(arr.size() - k, arr.size());
		else {
			if (index < 0)
				index = -index - 1;
			int left = Math.max(0, index - k - 1), right = Math.min(arr.size() - 1, index + k - 1);

			while (right - left > k - 1) {
				if (left < 0 || (x - arr.get(left)) <= (arr.get(right) - x))
					right--;
				else if (right > arr.size() - 1 || (x - arr.get(left)) > (arr.get(right) - x))
					left++;
				else
					System.out.println("unhandled case: " + left + " " + right);
			}

			return arr.subList(left, right + 1);
		}
	}
}
Here is an updated version.

public class Solution {
	public List<Integer> findClosestElements(List<Integer> arr, int k, int x) {
		int n = arr.size();
		if (x <= arr.get(0)) {
			return arr.subList(0, k);
		} else if (arr.get(n - 1) <= x) {
			return arr.subList(n - k, n);
		} else {
			int index = Collections.binarySearch(arr, x);
			if (index < 0)
				index = -index - 1;
			int low = Math.max(0, index - k - 1), high = Math.min(arr.size() - 1, index + k - 1);

			while (high - low > k - 1) {
				if (low < 0 || (x - arr.get(low)) <= (arr.get(high) - x))
					high--;
				else if (high > arr.size() - 1 || (x - arr.get(low)) > (arr.get(high) - x))
					low++;
				else
					System.out.println("unhandled case: " + low + " " + high);
			}
			return arr.subList(low, high + 1);
		}
	}
}



===================================================================================

class Solution {
    class Pair{
        int key;
        int value;
    }
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        PriorityQueue<Pair> pq=new PriorityQueue<>(
            new Comparator<Pair>(){
                public int compare(Pair a,Pair b){
                    //if(a.key>b.key)return 1;
                     return b.key-a.key;
                }
            }
        );
        int n=arr.length;
        for(int i=0;i<k;i++){
             Pair temp=new Pair();
            temp.key=Math.abs(arr[i]-x);
            temp.value=arr[i];
            pq.add(temp);
        }
        for(int i=k;i<n;i++){
             Pair temp=new Pair();
            temp.key=Math.abs(arr[i]-x);
            temp.value=arr[i];
            
            Pair check=pq.peek();
            if(check.key>temp.key){
                pq.add(temp);
                pq.poll();
            }
        }
      
        List<Integer> res=new ArrayList<>();
        while(pq.size()>0){
            Pair p=pq.peek();
            res.add(p.value);
            pq.poll();
        }
     Collections.sort(res);
        return res;
    }
}
