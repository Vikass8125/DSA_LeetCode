You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4.
Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

Constraints:

0 <= k <= 100
0 <= prices.length <= 1000
0 <= prices[i] <= 1000

MY_SOLUTION

class Solution {
    public int maxProfit(int k, int[] prices) {
        
        int n = prices.length;
        int[][] dp = new int[k+1][n];
        
        if(n < 2) return 0;
        
        for(int i = 1; i <= k; i++) {
            for(int j = 1; j < n; j++) {
                dp[i][j] = Math.max(dp[i][j-1], helper(i, j, prices, dp));
            }
        }
        
        return dp[k][n-1];
        
    }
    
    private int helper(int k, int x, int[] prices, int[][] dp){
        int max = 0;
        for(int i = 0; i < x; i++) {
            //Sell on day_x, buy on day_i and add profit from (i-1) transsactions dp[k-1][i]
            max = Math.max(max, prices[x]-prices[i] + dp[k-1][i]);
        }
        return max;
    }
}



class Solution {
    public int maxProfit(int k, int[] prices) {
        
        int n = prices.length;
        int[][] dp = new int[k+1][n];   //Space : O(KN)
        
        if(n < 2) return 0;
        
        //Time O(K*N)
        for(int i = 1; i <= k; i++) {
            int effectiveBuyPrice = prices[0];
            for(int j = 1; j < n; j++) {
                //Profit by selling on current price (j) 
                // Profit = SP-EBP
                // SP => price[j]
                // BP => Effective Buy Price -> price[j] - previous profit (dp[k-1][j])
                dp[i][j] = Math.max(dp[i][j-1], prices[j] - effectiveBuyPrice);
                effectiveBuyPrice = Math.min(effectiveBuyPrice, prices[j] - dp[i-1][j]);
            }
        }
        return dp[k][n-1];   
    }
}

=======================================================================

/**
 * dp[i, j] represents the max profit up until prices[j] using at most i transactions. 
 * dp[i, j] = max(dp[i, j-1], prices[j] - prices[jj] + dp[i-1, jj]) { jj in range of [0, j-1] }
 *          = max(dp[i, j-1], prices[j] + max(dp[i-1, jj] - prices[jj]))
 * dp[0, j] = 0; 0 transactions makes 0 profit
 * dp[i, 0] = 0; if there is only one price data point you can't make any transaction.
 */
 
 public int maxProfit(int k, int[] prices) {
	int n = prices.length;
	if (n <= 1)
		return 0;
	
	//if k >= n/2, then you can make maximum number of transactions.
	if (k >=  n/2) {
		int maxPro = 0;
		for (int i = 1; i < n; i++) {
			if (prices[i] > prices[i-1])
				maxPro += prices[i] - prices[i-1];
		}
		return maxPro;
	}
	
    int[][] dp = new int[k+1][n];
    for (int i = 1; i <= k; i++) {
    	int localMax = dp[i-1][0] - prices[0];
    	for (int j = 1; j < n; j++) {
    		dp[i][j] = Math.max(dp[i][j-1],  prices[j] + localMax);
    		localMax = Math.max(localMax, dp[i-1][j] - prices[j]);
    	}
    }
    return dp[k][n-1];
}
===================================================================================

class Solution {
    public int maxProfit(int k, int[] prices) {
        if (k == 0) {
            return 0;
        }
        
        int[] buy = new int[k]; // buy[i]: min cost at (i + 1)-th time stock purchased
        int[] sell = new int[k]; // sell[i]: max revenue at (i + 1)-th time stock sold
        Arrays.fill(buy, Integer.MIN_VALUE);
        Arrays.fill(sell, 0);
        
        for (int i : prices) {
            buy[0] = Math.max(buy[0], i * -1);
            sell[0] = Math.max(sell[0], buy[0] + i);
            for (int j = 1; j < k; j++) { // The i-th time buy & sell depens on the (i - 1)-th time buy & sell
                buy[j] = Math.max(buy[j], sell[j - 1] - i);
                sell[j] = Math.max(sell[j], buy[j] + i);
            }
        }
        return sell[k - 1];
    }
}

====================================================================================

The solution I have here is an extension of the official solution of https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/ 
which I find much easier to understand. 
The basic idea really is that the profit of a previous transaction lowers the cost of the current transaction, which in turn increases is possible max profit. 
This concept is very easy to extend to k transactions with the use of a simple 2d array.

class Solution {
    public int maxProfit(int k, int[] prices) {
        
        if(k == 0 || prices.length < 2)
            return 0;
        
        // All k transactions will be stored in an array where index 0 will represent the minimum cost
        // of the transaction and index 1 will represent the maximum profit of that transaction.
        // The first transaction will be built on the idea that 0 transactions have occured before it
        // and the kth transaction will have had k - 1 transactions already occur. The profits from 
        // earlier transactions will affect the total profit of the later transactions, with the kth 
        // transaction experiencing the largest effect. 
        int[][] transactions = new int[k][2];
        
        // Since we are continuously searching for the minumum cost, initalize the cost of each transaction to 
        // be the int max value, the first price will be lower and overwrite this. 
        for(int i = 0; i < k; i++)
            transactions[i][0] = Integer.MAX_VALUE;
        
        for(int price : prices){
            
            // Check the minumum cost and maximum profit possible for all k transactions.
            for(int i = 0; i < k; i++){
                
                // This is the critical concept here, we understand that the profits from an earlier 
                // transaction will actually lower the total cost of the current transaction. If we are on
                // the first transaction however, there are no previous transaction profits that could lower
                // the minumum price of the current transaction. This concept builds cumulatively which 
                // means that the kth transaction will have the lowest possible cost which also means it
                // will have the hightest possible profit.
                int prevProfit = 0;
                
                // Only set the value of the previous transactions profit if we have moved past the first
                // transaction.
                if(i > 0)
                    prevProfit = transactions[i - 1][1];
                
                // set the current cost of the current transaction, if this is not the first transaction, 
                // then the profit of the previous transaction will lower the current price.
                transactions[i][0] = Math.min(transactions[i][0], price - prevProfit);
                
                // given the current lowest possible seen price, check if the current price if 
                // sold produces the maximum possible profit from this transaction.
                transactions[i][1] = Math.max(transactions[i][1], price - transactions[i][0]);
            }
        }
        
        // The kth transaction has the maximum possible profit.
        return transactions[k - 1][1];
    }
}
Runtime: O(k * n)
Space: O(k)

===============================================================================

class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        
        if(2*k >= n){ 
            //basiaclly this means infinte transactions, no need to go for recursion take every local(high,lo) to profit
            return buyAndSellStock2(prices,n);
        }
        
        int[][][]dp = new int[(2*k)+1][2][n+1];
        for(int[][]d : dp){
            for(int[] d1: d){
                Arrays.fill(d1,-1);
            }
        }
        return findProfit(dp,prices,2*k,true,0,n);
    }
    
    int findProfit(int[][][]dp, int[]prices,int transaction,boolean buy, int indx, int end){
        if(dp[transaction][(buy==true ? 1 : 0)][indx] != -1){
            return dp[transaction][(buy==true ? 1 : 0)][indx];
        }        
        if(transaction == 0 || indx == end){
            return dp[transaction][(buy==true ? 1 : 0)][indx] = 0;
        }
        int max = 0;
        int skipping = findProfit(dp,prices,transaction,buy,indx+1,end);
        if(buy){
            int buying = findProfit(dp,prices,transaction-1,!buy,indx+1,end) - prices[indx];
            max = Math.max(skipping,buying);
        }
        else{
            int selling = findProfit(dp,prices,transaction-1,!buy,indx+1,end) + prices[indx];
            max = Math.max(skipping,selling);
        }
        return dp[transaction][(buy==true ? 1 : 0)][indx] = max;
    }
    
    int buyAndSellStock2(int[]prices,int n){
        int profit = 0;
        for(int i=1; i<n; i++){
            int transaction = prices[i]-prices[i-1];
            if(transaction > 0) profit += transaction;
        }
        return profit;
    }
}


=====================================================================================================

class Solution {
    // TC : O(n^2)
    public int maxProfit(int k, int[] A) {
		int n = A.length;
        if(n==0) return 0;
		int[][] dp = new int[k + 1][n];

		int trans, day = 0;
		for (trans = 1; trans <= k; trans++) {
			int mx = Integer.MIN_VALUE;
			for (day = 1; day < n; day++) {
				if (dp[trans - 1][day - 1] - A[day - 1] > mx)
					mx = dp[trans - 1][day - 1] - A[day - 1];

				if (mx + A[day] > dp[trans][day - 1])
					dp[trans][day] = mx + A[day];
				else
					dp[trans][day] = dp[trans][day - 1];

			}
		}
		return dp[k][n-1];       
    }    
    
    
    
    
    

 //    TC: O(n^3)*
    public int maxProfit(int k, int[] A) {
		int n = A.length;
        if(n==0) return 0;
		int[][] dp = new int[k + 1][n];

		int trans, day = 0, pd = 0;
		for (trans = 1; trans <= k; trans++) {
			for (day = 1; day < n; day++) {

				dp[trans][day] = dp[trans][day - 1];
				int mx = Integer.MIN_VALUE;
				for (pd = 0; pd < day; pd++) {
					mx = Math.max(dp[trans - 1][pd] + A[day] - A[pd], mx);
				}

				dp[trans][day] = Math.max(mx, dp[trans][day]);

			}
		}
		return dp[k][n-1];        
    }
   
}

==============================================================================================

This problem is similar to 123. Best Time to Buy and Sell Stock III.
The previous problem define we can only make at most two transactions. In this problem, we can make at most k transactions.
Similarly, we define two array sell and hold to record maximum profit where sell[i] is the maximum profit after selling stock i times and hold[i] is
the maximum profit after buying stock i times.
Since we can only hold at most one stock at the same time, we can make at most prices.length / 2 transactions. 
The length of sell and hold is max(k, prices.length / 2) + 1 (If we don't compare k and prices.length / 2, MLE will occur).
Note that we should initiate elements in hold to Integer.MIN_VALUE (If we set hold[i] to zero, we won't get correct answer).

public int maxProfit(int k, int[] prices) {
	int length = Math.min(k, prices.length / 2) + 1; // caculate the theoretically max transactions we can make
	int sell[] = new int[length];
	int hold[] = new int[length];
	for(int i = 0; i < length; i++)
		hold[i] = Integer.MIN_VALUE;
	for(int i = 0; i < prices.length; i++) {
		for(int j = length - 1; j >= 1; j--) { // index from high to low since hold[k] depends on sell[k - 1]
			sell[j] = Math.max(sell[j], hold[j] + prices[i]);
			hold[j] = Math.max(hold[j], sell[j - 1] - prices[i]);
		}
	}
	return sell[length - 1];
}


============================================================================================

Brute Force (TLE)

class Solution {
    
    int n;
    int[] prices;
    
    // 0 -> noStock, 1 -> sell
    
    public int maxProfit(int k, int[] prices) {
        this.prices = prices;
        n = prices.length;
        
        return dp(0, 0, k);
    }
    
    private int dp(int i, int state, int k) {
        if (k <= 0 || i >= n) return 0;
        
        int doSomething, doNothing;
        
        doNothing = dp(i + 1, state, k);
        
        if (state == 0) {
            doSomething = dp(i + 1, 1, k) - prices[i];
            
        } else {
            doSomething = dp(i + 1, 0, k - 1) + prices[i];
        }
        
        return Math.max(doSomething, doNothing);
    }
}
Memoization

class Solution {
    
    int n;
    int[] prices;
    int[][][] memo;
    
    // 0 -> noStock, 1 -> sell
    
    public int maxProfit(int k, int[] prices) {
        this.prices = prices;
        n = prices.length;
        this.memo = new int[n + 1][2][k + 1];
        
        return dp(0, 0, k);
    }
    
    private int dp(int i, int state, int k) {
        if (k <= 0 || i >= n) return 0;
        
        if (memo[i][state][k] != 0) return memo[i][state][k];
        
        int doSomething, doNothing;
        
        doNothing = dp(i + 1, state, k);
        
        if (state == 0) {
            doSomething = dp(i + 1, 1, k) - prices[i];
            
        } else {
            doSomething = dp(i + 1, 0, k - 1) + prices[i];
        }
        
        return memo[i][state][k] = Math.max(doSomething, doNothing);
    }
}
3D DP

class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n + 1][2][k + 1];
        
        for (int t = 1; t <= k; t++) {
            for (int i = n - 1; i >= 0; i--) {
                for (int j = 0; j < 2; j++) {
                    
                    int doNothing = dp[i + 1][j][t];
                    int doSomething;
                    
                    if (j == 0) {
                        doSomething = dp[i + 1][1][t] - prices[i];
                        
                    } else {
                        doSomething = dp[i + 1][0][t - 1] + prices[i];
                    }
                    
                    dp[i][j][t] = Math.max(doSomething, doNothing);
                }
            }
        }
        
        return dp[0][0][k];
    }
}
2D DP

class Solution {
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n + 1][2];
        
        for (int t = 1; t <= k; t++) {
            
            int[][] temp = new int[n + 1][2];
            
            for (int i = n - 1; i >= 0; i--) {
                for (int j = 1; j >= 0; j--) {
                    
                    int doNothing = temp[i + 1][j];
                    int doSomething;
                    
                    if (j == 0) {
                        doSomething = temp[i + 1][1] - prices[i];
                        
                    } else {
                        doSomething = dp[i + 1][0] + prices[i];
                    }
                    
                    temp[i][j] = Math.max(doSomething, doNothing);
                }
            }
            
            dp = temp;
        }
        
        return dp[0][0];
    }
}
