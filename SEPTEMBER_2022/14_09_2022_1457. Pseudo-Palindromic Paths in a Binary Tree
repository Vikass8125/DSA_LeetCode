Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation 
of the node values in the path is a palindrome.

Return the number of pseudo-palindromic paths going from the root node to leaf nodes.

 

Example 1:

Input: root = [2,3,1,3,1,null,1]
Output: 2 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes:
the red path [2,3,3], the green path [2,1,1], and the path [2,3,1].
Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the
green path [2,1,1] can be rearranged in [1,2,1] (palindrome).


Example 2:

Input: root = [2,1,1,1,3,null,null,null,null,null,1]
Output: 1 
Explanation: The figure above represents the given binary tree. 
There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1].
Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).

Example 3:

Input: root = [9]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 9


HINTS:
Note that the node values of a path form a palindrome if at most one digit has an odd frequency (parity).

Use a Depth First Search (DFS) keeping the frequency (parity) of the digits. Once you are in a leaf node check if at most one digit has an odd frequency (parity).

MY_SOLUTION

/// https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/solution/

Overview
Two subproblems

The problem consists of two subproblems:

Traverse the tree to build all root-to-leaf paths.

For each root-to-leaf path, check if it's a pseudo-palindromic path or not.

diff Figure 1. Two subproblems.

How to traverse the tree to build all root-to-leaf paths

There are three DFS ways to traverse the tree: preorder, postorder and inorder.

Root-to-leaf traversal is so-called DFS preorder traversal. To implement it, one has to follow the straightforward strategy Root->Left->Right.

There are three ways to implement preorder traversal: iterative, recursive, and Morris. Here we're going to implement the first two.

Iterative and recursive approaches here do the job in one pass, but they both need up to O(H) space to keep the stack, where HH is a tree height.

How to check if the path is pseudo-palindromic or not

It's quite evident that the path is pseudo-palindromic, if it has at most one digit with an odd frequency.

How to check that?

The straightforward way is to save each root-to-leaf path into a list and then to check each digit for parity.

public boolean checkPalindrom(ArrayList<Integer> nums) {
    int isPalindrom = 0;

    for (int i = 1; i < 10; ++i) {
        if (Collections.frequency(nums, i) % 2 == 1) {
            ++isPalindrom;
            if (isPalindrom > 1) {
                return false;    
            }     
        }   
    }
    return true;    
}

This method requires to keep each root-to-leaf path, and that becomes space-consuming for the large trees. 
To save the space, let's compute the parity on-the-fly using bitwise operators.

The idea is to keep the frequency of digit 1 in the first bit, 2 in the second bit, etc: path ^= (1 << node.val).

Left shift operator is used to define the bit, and XOR operator - to compute the digit frequency.

// compute occurences of each digit 
// in the corresponding bit
path = path ^ (1 << node.val);

Now, to ensure that at most one digit has an odd frequency, one has to check that path is a power of two, i.e., at most one bit is set to one. 
That could be done by turning off (= setting to 0) the rightmost 1-bit: path & (path - 1) == 0.
You might want to check the article Power of Two for the detailed explanation of this bitwise trick.

// if it's a leaf, 
// check that at most one digit has an odd frequency
if ((path & (path - 1)) == 0) {
    ++count;
}


Approach 1: Iterative Preorder Traversal.

Here we implement standard iterative preorder traversal with the stack:

->Initialize the counter to zero.
->Push root into stack.
->While stack is not empty:
->Pop out a node from the stack and update the current number.
->If the node is a leaf, update the root-to-leaf path, check it for being pseudo-palindromic, and update the count.
->Push right and left child nodes into stack.
->Return count.

Implementation

Note, that Javadocs recommends to use ArrayDeque, and not Stack as a stack implementation.

class Solution {
    public int pseudoPalindromicPaths (TreeNode root) {
        int count = 0, path = 0;
        
        Deque<Pair<TreeNode, Integer>> stack = new ArrayDeque();
        stack.push(new Pair(root, 0));
        while (!stack.isEmpty()) {
            Pair<TreeNode, Integer> p = stack.pop();
            TreeNode node = p.getKey();
            path = p.getValue();

            if (node != null) {
                // compute occurences of each digit 
                // in the corresponding register
                path = path ^ (1 << node.val);
                // if it's a leaf check if the path is pseudo-palindromic
                if (node.left == null && node.right == null) {
                    // check if at most one digit has an odd frequency
                    if ((path & (path - 1)) == 0) {
                        ++count;
                    }
                } else {
                    stack.push(new Pair(node.right, path));
                    stack.push(new Pair(node.left, path));
                }
            }
        }
        return count;
    }
}

Complexity Analysis

Time complexity: O(N) since one has to visit each node, where N is a number of nodes.

Space complexity: up to O(H) to keep the stack, where H is a tree height.


Approach 2: Recursive Preorder Traversal.
Iterative approach 1 could be converted into a recursive one.

Recursive preorder traversal is extremely simple: follow Root->Left->Right direction, i.e., do all the business with the node
(i.e., update the current path and the counter), and then do the recursive calls for the left and right child nodes.


class Solution {
    int count = 0;
        
    public void preorder(TreeNode node, int path) {
        if (node != null) {
            // compute occurences of each digit 
            // in the corresponding register
            path = path ^ (1 << node.val);
            // if it's a leaf check if the path is pseudo-palindromic
            if (node.left == null && node.right == null) {
                // check if at most one digit has an odd frequency
                if ((path & (path - 1)) == 0) {
                    ++count;
                }
            }
            preorder(node.left, path);
            preorder(node.right, path) ;
        }
    }

    public int pseudoPalindromicPaths (TreeNode root) {
        preorder(root, 0);
        return count;
    }
}

Complexity Analysis

Time complexity: O(N) since one has to visit each node, check if at most one digit has an odd frequency.

Space complexity: up to O(H) to keep the recursion stack, where H is a tree height.

=====================================================================================
Idea. Go from root to leaf, keep track of each value, in the end check if path is palindromic and return 1, otherwise - 0.

Algorithm

Traverse tree from root to leaf, keep track of the current state (bit field)
Current state has a bit set for each number we've seen odd number of times so far. So we just need to flip a bit for each number.
This is achieved by doing xor on certain bit of the state.
In the end, if the path is palindrome state should be 0 or contain only one bit set. n&(n-1) - removes right most bit, 
so if after removing one bit state is not 0 this is not a palindrome.
Details

Store current state as a bit field: 1 - 0001, 2 - 0010, 3 - 0100, 4 - 1000, 5 - 10000 and so on
Values are in [1,9], so integer (32 bit) or even short (16 bit) is enough to store current state.
Palindrome contains at most one odd characheter, others should be present even number of times

Java

public int pseudoPalindromicPaths (TreeNode root) {
    return pseudoPalindromicPaths(root, 0);
}
int pseudoPalindromicPaths (TreeNode root, int c) {
    if (root == null) return 0;
    c ^= 1 << root.val; // toggle bit for each number
    if (root.left == null && root.right == null) return (c&(c - 1)) > 0 ? 0 : 1; // return 1 when there's at most one bit set
    return pseudoPalindromicPaths(root.left, c) + pseudoPalindromicPaths(root.right, c);
}

=====================================================================================

class Solution {
    int ans = 0;
    public int pseudoPalindromicPaths (TreeNode root) {
        ans = 0;
        dfs(root, 0);
        return ans;
    }
    private void dfs(TreeNode root, int count) {
        if (root == null) return;
        count ^= 1 << (root.val - 1);
        dfs(root.left, count);
        dfs(root.right, count);
        if (root.left == null && root.right ==  null && (count & (count - 1)) == 0) ans++;
    }
}


=====================================================================================

The solution to this question is very intuitive, we just need to write the code for Root to Leaf Paths and just check whether any permutation 
of that path can be a palindrome. For a permutation of a path to be a palindrome, it must satisfy one of the 2 conditions given below:

(i) If the number of nodes in the path is even, then the frequency of each node's value in that path must be even.

(ii) If the number of nodes in the path is odd, then the frequency of atmost one node's value in that path must be odd.

	private List<Integer> curr = new ArrayList<>();  // To store the current path. This will be used to check the length of the path.
  You can use a variable in place of this.
    private int[] hm = new int[10];  // Given that 1 <= node.val <= 9, we will use this array as a frequency map.
    private int oc = 0, res = 0;  // oc for keeping odd number count, res for keeping palindromic path count. 
    
    public int pseudoPalindromicPaths (TreeNode root) {
        if(root == null){
            return 0;
        }
        helper(root);
        return res;
    }
    
    public void helper(TreeNode root){
        if(root == null){
            return;
        }
        
        curr.add(root.val);  // add the value of current node to the list
        hm[root.val]++;  // update the frequency of that value for the current path
        
        if(root.left == null && root.right == null){  // leaf node condition
            for(int i = 0; i < 10; i++){
                if(hm[i] != 0 && hm[i] % 2 == 1){  // count the numbers which have odd frequencies in the root to leaf path
                    oc++;
                }
            }
            
            if((curr.size() % 2 == 1 && oc == 1) || (curr.size() % 2 == 0 && oc == 0)){  // the same conditions as explained above
                res++;
            }
            oc = 0;  // reset odd count to 0 as we are done with this path
        }
        
        helper(root.left);
        helper(root.right);
        
        curr.remove(curr.size() - 1);  //remove the last node's value while backtracking
        hm[root.val]--;  // reduce its frequency as we are going to find a new path now
    }

=====================================================================================
2 key takeaways:
Use a bit mask to keep track of odd or even number of digits accumulated, in bits 1-9, using XOR.
(mask & (mask-1)) == 0 is a quick check to see if mask has only one bit set to 1.
Check for palindrome property one a leaf node, that is a node with no children.

class Solution {
    public int pseudoPalindromicPaths (TreeNode root) {
        return dfs(root, 0);
    }
    public int dfs(TreeNode root, int mask) {
        if (root == null) return 0;
        mask = mask ^ (1 << root.val);
        if (root.left == null && root.right == null) {
            if (mask == 0 || (mask & (mask-1)) == 0) return 1;
            return 0;
        }
        return dfs(root.left, mask) + dfs(root.right, mask);
    }
}

=====================================================================================
HashSet
A palindrome has to have an even frequency for all digits, and at most one odd frequency (the middle digit). 
Because of this, a HashSet can be used to keep track of all the digits in the root -> node path that have an odd frequency.
When a digit is encountered, it will be added to the set if the set doesn't contain it, or it will be removed from the set if the set already contains it.
If the current node is a leaf, then the size of the set has to be at most 1 in order for the path to be a permutation of a palindrome.

class Solution {
    public int pseudoPalindromicPaths (TreeNode root) {
        return search(root, new HashSet<>());
    }
    public int search(TreeNode tn, HashSet<Integer> set) {
        if (tn == null) {
            return 0;
        }
        
        if (set.contains(tn.val)) {
            set.remove(tn.val);
        } else {
            set.add(tn.val);
        }
        
        int res = 0;
        if (tn.left == null && tn.right == null && set.size() <= 1) {
            res++;
        }
        
        res += search(tn.left, set) + search(tn.right, set);
        if (set.contains(tn.val)) {
            set.remove(tn.val);
        } else {
            set.add(tn.val);
        }
        return res;
    }
}
Bitwise
Instead of the hashset, an int can be used to store the frequencies. To update, xor it by 2^val. Use Integer.bitCount() to find the number of odds.

class Solution {
    public int pseudoPalindromicPaths (TreeNode root) {
        return search(root, 0);
    }
    public int search(TreeNode tn, int i) {
        if (tn == null) {
            return 0;
        }
        i ^= 1 << tn.val;
        int res = 0;
        if (tn.left == null && tn.right == null && Integer.bitCount(i) <= 1) {
            res++;
        }
        res += search(tn.left, i) + search(tn.right, i);
        return res;
    }
}


=====================================================================================
/*
    Approach: TC-> O(K*N) ; here, K=9
    
    Using count array(of size 10 as tree contains value only from 1-9, so it will be easy to increase and decrease count of values) to store frequencies of
    every node value from root to leaf node
    Traverse to the leaf node and then using the count array check the path can be a palindrome or not, and then backtrack by redcuing the frequency in count array
    
    How to check the path can be a palindrome?
    If the total number of odd frequencies of any values in the count array is more than 1, then the path can never form a palindrome number
    
    EX:
    let's path consist of value -> 2,3,3,2,3 
    count array becomes -> [0,0,2,3,0,0,0,0,0,0]
    there is only one odd frequencies(2->2 times, 3->3 times), so the path form a palindrome (eg, 2,3,3,3,2)
    
    let's check another example
    path values -> 4,2,3,3,4,2,3,4
    count array will be -> [0,0,2,3,3,0,0,0,0,0]
    there are two odd frequencies (3->3 times, 4->3 times), so it can never form a palindrome

*/
class Solution {
    int count = 0;
    public int pseudoPalindromicPaths (TreeNode root) {
        int[] list = new int[10];
        f(root,list);
        return count;
    }
    
    private void f(TreeNode root, int[] list){
        if(root == null) return;
        
        // If leaf node
        if(root.left==null && root.right==null) {
            // ++ leaf count 
            list[root.val]++;
            
            // check, can form palindrome?
            if(isPal(list))count++;
            
            // backtrack
            list[root.val]--;
            return;
        }
        
        // ++ root value
        list[root.val]++;
        
        // traverse left and right child
        f(root.left, list);
        f(root.right,list);
        
        // back track
        list[root.val]--;
    }
    
    private boolean isPal(int[] list){
        int odds = 0;
        for(int e : list){
            if((e&1)==1) odds++;
            if(odds>1)return false;
        }
        return true;
    }
}

=================================================================================================

/**
* For find the count of numbers in all sequences using DFS
* When the control reaches the leaf node, we check if the count
* array is from a pseudo-palindromic sequence and return 1
* if the sequence is pseudo-palindromic, else we return 0.
*
* We can use an accumulator array of size 10 to maintain the
* counts. We have to create deep copies of the accumulator array,
* else we have the same reference in different recursive calls.
* If there are more than 1 numbers in the sequence whose 
* count is odd, then the sequence is not pseudo-palindromic.
**/
class Solution {
    public int pseudoPalindromicPaths (TreeNode root) {
        return res(root, new int[10]);
    }
    
	/**
	* If node is a leaf node, we return 1 if the sequence is palindromic.
	* Else we build the count array until we reach the end of the sequence.
	**/
    private int res(TreeNode node, int[] acc) {
        if (node == null) {
            return 0;
        }
        else if (node.left == null && node.right == null) {
            acc[node.val]++;
            return isPseudoPalindromic(acc) ? 1 : 0;
        }
        else {
            acc[node.val]++;
            return res(node.left, deepCopy(acc)) + res(node.right, deepCopy(acc));
        }
    }
    
	/**
	* Creates a deep copy of the given array.
	**/
    private int[] deepCopy(int[] arr) {
        int[] copy = new int[10];
        for (int i = 0; i < 10; i++) {
            copy[i] = arr[i];
        }
        return copy;
    }
    
	/**
	* Checks if the given count array is from a sequence that is pseudo-palindromic.
	* If there are more than one number whose count is odd, we can not form a pseudo-palindromic sequence.
	**/
    private boolean isPseudoPalindromic(int[] arr) {
        int oddCount = 0;
        for (int k: arr) {
            oddCount += k % 2 == 1 ? 1 : 0;
        }
        return oddCount < 2;
    }
}


=================================================================================================
