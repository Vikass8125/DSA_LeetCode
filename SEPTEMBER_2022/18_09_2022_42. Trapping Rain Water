Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105


MY_SOLUTION
Solution 1: Brute force

Approach: For each index, we have to find the amount of water that can be stored and we have to sum it up.
If we observe carefully the amount the water stored at a particular index is the minimum of maximum elevation to 
the left and right of the index minus the elevation at that index.
public int trap(int[] height) {
  int n = height.length;
  int totalWater = 0;
  for (int k = 0; k < n; ++k) {
    int leftMax = 0;
    for (int i = 0; i <= k - 1; ++i) {
      leftMax = Math.max(leftMax, height[i]);
    }
    int rightMax = 0;
    for (int i = k + 1; i < n; ++i) {
      rightMax = Math.max(rightMax, height[i]);
    }
    int water = Math.min(leftMax, rightMax) - height[k];
    totalWater += (water > 0) ? water : 0;
  }
  return totalWater;
}
=======================================================================
class TUF {
    static int trap(int[] arr) {
        int n = arr.length;
        int waterTrapped = 0;
        for (int i = 0; i < n; i++) {
            int j = i;
            int leftMax = 0, rightMax = 0;
            while (j >= 0) {
                leftMax = Math.max(leftMax, arr[j]);
                j--;
            }
            j = i;
            while (j < n) {
                rightMax = Math.max(rightMax, arr[j]);
                j++;
            }
            waterTrapped += Math.min(leftMax, rightMax) - arr[i];
        }
        return waterTrapped;
    }
==========================================================================
  public int trapBrute(int[] height) {
	int n = height.length;
	if(n <= 2) return 0;
	int sum = 0;
	for(int i = 0; i < n; i++) {
		int j = i, left = Integer.MIN_VALUE, right = Integer.MIN_VALUE;
		while(j >= 0) {
			left = Math.max(left, height[j]);
			j--;
		}
		j = i;
		while(j < n) {
			right = Math.max(right, height[j]);
			j++;
		}
		sum += Math.min(left, right) - height[i];
	}

	return sum;
}


Time Complexity: O(N*N) as for each index we are calculating leftMax and rightMax so it is a nested loop.

Space Complexity: O(1).

======================================================================================================================

Solution 2:Better solution

Intuition: We are taking O(N) for computing leftMax and rightMax at each index. 
The complexity can be boiled down to O(1) if we precompute the leftMax and rightMax at each index.

Approach:Take 2 array prefix and suffix array and precompute the leftMax and rightMax for each index beforehand.
Then use the formula min(prefix[i],suffix[i])-arr[i] to compute water trapped at each index.

class Solution {
    public int trap(int[] height) {
        //BETTER SOLUTION ; T.C -> O(N), S.C -> O(N)
        int len = height.length;
        if(len <= 2) return 0;
        
        int[] leftMax = new int[len];
        int[] rightMax = new int[len];
        
        leftMax[0] = height[0];
        for(int i = 1; i < len ; i++){
            leftMax[i] = Math.max(leftMax[i - 1], height[i]);
        }
        
        rightMax[len - 1] = height[len - 1];
        for(int i = len - 2; i >= 0 ; i--){
            rightMax[i] = Math.max(rightMax[i + 1], height[i]);
        }
        
        
        int waterTapped = 0;
        for(int i = 0; i < len; i++){
            waterTapped += Math.min(leftMax[i], rightMax[i]) - height[i];
        }
        
        return waterTapped;
    }
}
====================================================================
class Solution {
    public int trap(int[] height) {
        int n = height.length;
        if(n<3){
            return 0;
        }
        int leftMax[] = new int[n];
        int rightMax[] = new int[n];
        leftMax[0] = height[0];
        rightMax[n-1] = height[n-1];
        for(int i=1;i<n;i++){
            leftMax[i] = Math.max(leftMax[i-1], height[i]);
            rightMax[n-i-1] = Math.max(rightMax[n-i], height[n-i-1]);
        }
        
        int trappedWater = 0;
        for(int i=0;i<n;i++){
            trappedWater += Math.min(leftMax[i], rightMax[i])-height[i];
        }
        
        return trappedWater;
    }
}
========================================================================
public int trap(int[] height) {
  int n = height.length;
  if (n <= 2) return 0;
  // pre-compute
  int[] leftMax = new int[n];
  int[] rightMax = new int[n];
  leftMax[0] = height[0]; // init
  rightMax[n - 1] = height[n - 1];
  for (int i = 1, j = n - 2; i < n; ++i, --j) {
    leftMax[i] = Math.max(leftMax[i - 1], height[i]);
    rightMax[j] = Math.max(rightMax[j + 1], height[j]);
  }
  // water
  int totalWater = 0;
  for (int k = 1; k < n - 1; ++k) { // do not consider the first and the last places
    int water = Math.min(leftMax[k - 1], rightMax[k + 1]) - height[k];
    totalWater += (water > 0) ? water : 0;
  }
  return totalWater;
}


Time Complexity: O(3*N) as we are traversing through the array only once. 
And O(2*N) for computing prefix and suffix array.

Space Complexity: O(N)+O(N) for prefix and suffix arrays.

==============================================================================================================================================
Solution 3:Optimal Solution(Two pointer approach)

Approach: Take 2 pointer l(left pointer) and r(right pointer) pointing to 0th and (n-1)th index respectively.
Take two variables leftMax and rightMax and initialise it to 0.
If heigh[l] is less than or equal to height[r] then if leftMax is less then height[l] update leftMax to height[l] else add leftMax-height[l] to your 
final answer and move the l pointer to the right i.e l++.If height[r] is less then height[l],then now we are dealing with the right block.
If height[r] is greater then rightMax,then update rightMax to height[r] else add rightMax-height[r] to the final answer.Now move r to the left. 
Repeat theses steps till l and r crosses each other.

Intuition: We need a minimum of leftMax and rightMax.So if we take the case when height[l]<=height[r] we increase l++, so we can surely say that 
there is a block with a height more than height[l] to the right of l.
And for the same reason when height[r]<=height[l] we can surely say that there is a block to the left of r which is at least of height[r]. 
So by traversing these cases and using two pointers approach the time complexity can be decreased without using extra space.

class Solution {
    public int trap(int[] height) {
        
        //OPTIMISED : T.C -> O(N), S.C -> O(1)
        int len = height.length;
        int result = 0;
        
        int left = 0;
        int right = len - 1;
        
        int left_max = 0;
        int right_max = 0;
        
        while(left <= right){
            if(height[left] < height[right]){
                if(height[left] >= left_max){
                    left_max = height[left];
                }
                else{
                    result += left_max - height[left];
                }
                left++;
            }
            else{
                if(height[right] >= right_max){
                    right_max = height[right];
                }
                else{
                    result += right_max - height[right];
                }
                right--;
            }

        }
        return result;
    }
}

==========================================================================
public int trap(int[] height) {
  int n = height.length;
  int lo = 0, hi = n - 1;
  int leftMax = 0, rightMax = 0;
  int water = 0;
  while (lo < hi) {
    // update
    if (height[lo] > leftMax)  leftMax = height[lo];
    if (height[hi] > rightMax) rightMax = height[hi];
    // compute
    if (leftMax < rightMax) { // consider the min
        water += (leftMax - height[lo]); // leftMax >= height[lo]
        ++lo;
    } else {
        water += (rightMax - height[hi]);
        --hi;
    }
  }
  return totalWater;
}


============================================================================
class Solution {
    public int trap(int[] heights) {
        int n = heights.length;
        if(n<3){
            return 0;
        }
        int leftMax = heights[0];
        int rightMax = heights[n-1];
        int l = 1;
        int r = n-2;
        
        int trappedWater = 0;
        while(l<=r){
            if(leftMax<rightMax){
                if(heights[l]>leftMax){
                    leftMax = heights[l];
                } else {
                    trappedWater+=(leftMax-heights[l]);
                }
                l++;
            } else {
                if(heights[r]>rightMax){
                    rightMax = heights[r];
                } else {
                    trappedWater+=(rightMax-heights[r]);
                }
                r--;
            }
        }
        
        return trappedWater;
    }
}


Time Complexity: O(N) because we are using 2 pointer approach.

Space Complexity: O(1) because we are not using anything extra.

======================================================================================================================

Approach 1: Brute force
Intuition

Do as directed in question.
For each element in the array, we find the maximum level of water it can trap after the rain, which is 
equal to the minimum of maximum height of bars on both the sides minus its own height.

Algorithm

-> Initialize ans=0
-> Iterate the array from left to right:
    -> Initialize left_max=0 and right_max=0
    -> Iterate from the current element to the beginning of array updating:
        -> left_max=max(left_max,height[j])
    -> Iterate from the current element to the end of array updating:
        -> right_max=max(right_max,height[j])
    -> Add min(left_max,right_max)−height[i] to ans

Complexity Analysis

Time complexity: O(n^2). For each element of array, we iterate the left and right parts.

Space complexity: O(1) extra space.

==============================================================

Approach 2: Dynamic Programming
Intuition

In brute force, we iterate over the left and right parts again and again just to find the highest bar size
upto that index. But, this could be stored. Voila, dynamic programming.

Algorithm

-> Find maximum height of bar from the left end upto an index i in the array left_max.
-> Find maximum height of bar from the right end upto an index i in the array right_max.
-> Iterate over the height array and update ans:
      -> Add min(left_max[i],right_max[i])−height[i] to ans
      
      
      
int trap(vector<int>& height)
{
    if(height.empty())
        return 0;
    int ans = 0;
    int size = height.size();
    vector<int> left_max(size), right_max(size);
    left_max[0] = height[0];
    for (int i = 1; i < size; i++) {
        left_max[i] = max(height[i], left_max[i - 1]);
    }
    right_max[size - 1] = height[size - 1];
    for (int i = size - 2; i >= 0; i--) {
        right_max[i] = max(height[i], right_max[i + 1]);
    }
    for (int i = 1; i < size - 1; i++) {
        ans += min(left_max[i], right_max[i]) - height[i];
    }
    return ans;
}


Complexity analysis

Time complexity: O(n).

We store the maximum heights upto a point using 2 iterations of O(n) each.
We finally updateans using the stored values in O(n).
Space complexity: O(n) extra space.

Additional O(n) space for left_max and right_max arrays than in Approach 1.


=================================================

Approach 3: Using stacks
Intuition

Instead of storing the largest bar upto an index as in Approach 2, we can use stack to keep track of the 
bars that are bounded by longer bars and hence, may store water. 
Using the stack, we can do the calculations in only one iteration.

We keep a stack and iterate over the array. We add the index of the bar to the stack if bar is smaller
than or equal to the bar at top of stack, which means that the current bar is bounded by the previous bar
in the stack. If we found a bar longer than that at the top, we are sure that the bar at the top of the
stack is bounded by the current bar and a previous bar in the stack, hence, we can pop it and add resulting
trapped water to ans.

Algorithm

-> Use stack to store the indices of the bars.
-> Iterate the array:
      -> While stack is not empty and height[current]>height[st.top()]
      -> It means that the stack element can be popped. Pop the top element as top.
      -> Find the distance between the current element and the element at top of stack, which is to be filled. distance = current − st.top() − 1
      -> Find the bounded height bounded_height=min(height[current],height[st.top()])−height[top]
      -> Add resulting trapped water to answer ans += distance × bounded_height
-> Push current index to top of the stack
-> Move current to the next position


int trap(vector<int>& height)
{
    int ans = 0, current = 0;
    stack<int> st;
    while (current < height.size()) {
        while (!st.empty() && height[current] > height[st.top()]) {
            int top = st.top();
            st.pop();
            if (st.empty())
                break;
            int distance = current - st.top() - 1;
            int bounded_height = min(height[current], height[st.top()]) - height[top];
            ans += distance * bounded_height;
        }
        st.push(current++);
    }
    return ans;
}


Complexity analysis

Time complexity: O(n).
Single iteration of O(n) in which each bar can be touched at most twice(due to insertion and deletion from stack)
and insertion and deletion from stack takes O(1) time.
Space complexity: O(n). Stack can take upto O(n) space in case of stairs-like or flat structure.


=================================================

Approach 4: Using 2 pointers
Intuition

As in Approach 2, instead of computing the left and right parts seperately, we may think of some way to do it in one iteration. 
Algorithm

-> Initialize left pointer to 0 and right pointer to size-1
-> While left<right, do:
    -> If height[left] is smaller than height[right]
          -> If height[left]≥left_max, update left_max
          -> Else add left_max−height[left] to ans
          -> Add 1 toleft.
    -> Else
          -> If height[right]≥right_max, update right_max
          -> Else add right_max−height[right] to ans
          -> Subtract 1 from right.

int trap(vector<int>& height)
{
    int left = 0, right = height.size() - 1;
    int ans = 0;
    int left_max = 0, right_max = 0;
    while (left < right) {
        if (height[left] < height[right]) {
            height[left] >= left_max ? (left_max = height[left]) : ans += (left_max - height[left]);
            ++left;
        }
        else {
            height[right] >= right_max ? (right_max = height[right]) : ans += (right_max - height[right]);
            --right;
        }
    }
    return ans;
}


Complexity analysis

Time complexity: O(n). Single iteration of O(n).
Space complexity: O(1) extra space. Only constant space required for left_max and right_max.
