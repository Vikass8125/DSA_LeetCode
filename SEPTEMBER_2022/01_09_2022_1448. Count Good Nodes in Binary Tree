Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.

 

Example 1:



Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.
Root Node (3) is always a good node.
Node 4 -> (3,4) is the maximum value in the path starting from the root.
Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.
Example 2:



Input: root = [3,3,null,4,2]
Output: 3
Explanation: Node 2 -> (3, 3, 2) is not good, because "3" is higher than it.
Example 3:

Input: root = [1]
Output: 1
Explanation: Root is considered as good.
 

Constraints:

The number of nodes in the binary tree is in the range [1, 10^5].
Each node's value is between [-10^4, 10^4].


MY_SOLUTION
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int good;
    public int goodNodes(TreeNode root) {
        good = 0;
        cal(root, Integer.MIN_VALUE);
        return good;
    }
    void cal(TreeNode root, int max){
        if(root == null) return;
        if(root.val >= max) good++;
        max = Math.max(max, root.val);
        cal(root.left, max);
        cal(root.right, max);
        
    }
}
========================================================================
Intuition
For each path all we really need to check is that the current point we are looking at is the largest one we have seen so far in our path from the root, 
so this is a manual search over all nodes while keeping reference to the largest value we have seen in our path.

Solution: Java

class Solution {
    public int goodNodes(TreeNode root) {
        if(root == null){ return 0; }
        int count = 1;
        
        count += dfs(root.left, root.val);
        count += dfs(root.right, root.val);
        return count;
    }
    
    public int dfs(TreeNode root, int currentMax){
        
        int amount = 0; 
        if(root == null){ return 0; }
        if(root.val >= currentMax){
            amount++; 
            currentMax = root.val;
        }
        
        amount += dfs(root.left, currentMax);
        amount += dfs(root.right, currentMax);
        return amount; 
    }
}
Explanation:
Time complexity: O(# of nodes in tree)
Space complexity: O(h) where h is the height of the tree
=========================================================================

int count = 0; // global variable to count

    public int goodNodes(TreeNode root) {
        helper(root, root.val);
        return count; // returning the count value
    }

    private void helper(TreeNode root, int max) {
        if (root != null) {
            if (root.val >= max) { // if root.val > the max value of path from root of the tree to current node 
                count++; //increment count
            }
            helper(root.left, Math.max(root.val, max));  // updating max value of current path and traversing left to the current node
            helper(root.right, Math.max(root.val, max));  // updating max value of current path and traversing right to the current node
        }
    }
 =============================================================================
 
 // TC - O(n)
class Solution {
    public int goodNodes(TreeNode root) {
        
        if(root == null) return 0;
        return count(root, root.val);
    }
    
    private int count(TreeNode node, int max){
        
        if(node == null) return 0; 
        
        max = Math.max(node.val, max); // max node value in current path
        int left = count(node.left, max); // count all good nodes in left
        int right = count(node.right, max); // count all good nodes in right
        
        int res = left + right;
        if(node.val >= max) res++; // if current node is good, add that in res
        
        return res;
    }
}

=======================================================================
