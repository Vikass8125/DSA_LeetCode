You are given an integer array nums and an array queries where queries[i] = [vali, indexi].

For each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.

Return an integer array answer where answer[i] is the answer to the ith query.

 

Example 1:

Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]
Output: [8,6,2,4]
Explanation: At the beginning, the array is [1,2,3,4].
After adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.
After adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.
After adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.
After adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.
Example 2:

Input: nums = [1], queries = [[4,0]]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
1 <= queries.length <= 104
-104 <= vali <= 104
0 <= indexi < nums.length


MY_SOLUTION

class Solution {
    public int[] sumEvenAfterQueries(int[] nums, int[][] queries) {
        
        int sum = 0;
        for(int ele : nums){
            if(ele % 2 == 0) sum += ele;
        }
        
        int[] ans = new int[queries.length];
        
        for(int i = 0; i < queries.length; i++){
            int index = queries[i][1];
            int value = queries[i][0];
            
            if(nums[index] % 2 == 0) sum -= nums[index];
            
            nums[index] = nums[index] + value;
            
            if(nums[index] % 2 == 0) sum += nums[index];
            
        
            ans[i] = sum;
        }
        
        return ans;
        
    }
    
   }
   
==========================================================================================

Approach 1: Maintain Array Sum
Intuition and Algorithm

Let's try to maintain S, the sum of the array throughout one query operation.

When acting on an array element A[index], the rest of the values of A remain the same. 
Let's remove A[index] from S if it is even, then add A[index] + val back (if it is even.)

Here are some examples:

If we have A = [2,2,2,2,2], S = 10, and we do A[0] += 4: we will update S -= 2, then S += 6. At the end, we will have A = [6,2,2,2,2] and S = 14.

If we have A = [1,2,2,2,2], S = 8, and we do A[0] += 3: we will skip updating S (since A[0] is odd), then S += 4. 
  At the end, we will have A = [4,2,2,2,2] and S = 12.

If we have A = [2,2,2,2,2], S = 10 and we do A[0] += 1: we will update S -= 2, then skip updating S (since A[0] + 1 is odd.) 
  At the end, we will have A = [3,2,2,2,2] and S = 8.

If we have A = [1,2,2,2,2], S = 8 and we do A[0] += 2: we will skip updating S (since A[0] is odd), then skip updating S again (since A[0] + 2 is odd.) 
  At the end, we will have A = [3,2,2,2,2] and S = 8.

These examples help illustrate that our algorithm actually maintains the value of S throughout each query operation.


class Solution {
    public int[] sumEvenAfterQueries(int[] A, int[][] queries) {
        int S = 0;
        for (int x: A)
            if (x % 2 == 0)
                S += x;

        int[] ans = new int[queries.length];

        for (int i = 0; i < queries.length; ++i) {
            int val = queries[i][0], index = queries[i][1];
            if (A[index] % 2 == 0) S -= A[index];
            A[index] += val;
            if (A[index] % 2 == 0) S += A[index];
            ans[i] = S;
        }

        return ans;
    }
}


Complexity Analysis

Time Complexity: O(N+Q), where NN is the length of A and Q is the number of queries.

Space Complexity: O(Q), though we only allocate O(1) additional space.


==========================================================================================
class Solution {
    // the idea is we don't calculate the even sum from scratch for each query
    // instead, we calculate it at the beginning
    // since each query only updates one value, 
    // so we can adjust the even sum base on the original value and new value
    public int[] sumEvenAfterQueries(int[] nums, int[][] queries) {
        int evenSum = 0, n = queries.length;
        // calculate the sum of all even numbers
        for (int x : nums) {
            if (x % 2 == 0) {
                evenSum += x;
            }
        }
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            int val = queries[i][0], idx = queries[i][1];
            // if original nums[idx] is even, then we deduct it from evenSum
            if (nums[idx] % 2 == 0) evenSum -= nums[idx];
            // in-place update nums
            nums[idx] += val;
            // check if we need to update evenSum for the new value
            if (nums[idx] % 2 == 0) evenSum += nums[idx];
            // then we have evenSum after this query, push it to ans 
            ans[i] = evenSum;
        }
        return ans;
    }
}

==========================================================================================
class Solution {
    public int[] sumEvenAfterQueries(int[] nums, int[][] queries) 
    {
        int arr[] = new int[nums.length];
        int sum = sumOfArray(nums);
        int i=0;
        for(int query[]:queries)
        {
            if(nums[query[1]]%2==0)
                sum-=nums[query[1]];
            nums[query[1]]+=query[0];
            if(nums[query[1]]%2==0)
                sum+=(nums[query[1]]);
            arr[i++]=sum;
        }
        return arr;
    }
    public int sumOfArray(int arr[])
    {
        int sum=0;
        for(int a:arr)
        {
            if(a%2==0)
                sum+=a;
        }
        return sum;
    }
}
==========================================================================================
/*
        TC -> O(n)
        SC -> O(n), where n=length of queries array 
        
        Approach:
        We have to update items of nums array according to the queries and then count the sum of even numbers in the nums again.
        As we can see that, we are updating the nums' items one at a time and the update is making effect on the sum of even values what we can do is, 
        first calculate the sum of even values of nums array(say, eSum) and then make update in the eSum when applying every query,
        and then store the updated value in a result array.
        
        Ex: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]
        now, eSum = 6
        
        perform every query on eSum and make changes in nums and res array
        
        for query [1,0] -> val=1, idx=0
                           (element at idx)ele=1
                           as 1 is odd, it is sure that this is not included in eSum, so eSum remains unchanged
                           now what will be the changed value at index idx in nums, i.e, nums[idx] = nums[idx]+val
                           so, nums[idx] -> nums[0] = 2
                           as nums[idx](2) is even it will be included in the eSum, so eSum -> eSum+2=8
                           now change the 0th item of result array to 8
                           updated value, nums -> [2,2,3,4], eSum -> 8, res -> [8]
                           
        for query [-3,1] -> val=-3, idx=1
                            ele=2
                            2 is even, so it is included in eSum, hence update it(reduce eSum by ele, 
                            as eSum will change by the new value of nums[idx] if it is even)
                            eSum -> 6
                            nums[idx] = 2 + (-3) = -1(odd)
                            so it will not be included in eSum
                            updated values, nums -> [2,-1,3,4], eSum -> 6, res -> [8,6]
                            

    Now in the same way explained above, generate all the values of result array and return it
*/
class Solution {
    public int[] sumEvenAfterQueries(int[] nums, int[][] queries) {
	
		// get sum of even values of nums
        int eSum = 0;
        for(int e : nums) if((e&1)==0) eSum += e;
        
        int i=0;
        int[] res = new int[nums.length];
        
        for(int[] e : queries){
            
            // Value and Index to apply query
            int val = e[0], idx = e[1];
            int ele = nums[idx];
            
            // Reduce eSum if ele is included in eSum
            if((ele&1)==0) eSum -= ele;
            
            // Increase eSum if new nums[idx] is making an even value
            int sum = ele+val;
            if((sum&1)==0) eSum += sum;
            
            // now update the arrays
            nums[idx] = sum;
            res[i++] = eSum;
        }
        
        return res;
    }
}

==========================================================================================
Java - With Explanation

// Time Complexity : O(N + M)
// Space Complexity: O(M)
// where N is nums.length and M is queries.length.

class Solution {

    // The approach is to get the sum of the even numbers in nums array first.
    // Each time we update nums with queries, 2 things will happen:
    // 1. If previously nums[index] is even, we subtract from the sum.
    // 2. If now updated nums[index] is even, we add to the sum.
    // In both cases, no action is needed when the number (previous and updated) is odd.
    // Then record the sum in the result array.

    public int[] sumEvenAfterQueries(int[] nums, int[][] queries) {
        // Get the sum of the even numbers in nums.
        int sumEven = 0;
        for (int number : nums) {
            if (number % 2 == 0) {
                sumEven += number;
            }
        }

        // Traverse the queries array, and update the numbers in nums.
        // Also, perform the operations as 1. and 2. described above.
        int[] result = new int[queries.length];
        int numsIndex;
        for (int i = 0; i < queries.length; i++) {
            numsIndex = queries[i][1];

            // 1. If previously nums[index] is even, we subtract from the sum.
            if (nums[numsIndex] % 2 == 0) {
                sumEven -= nums[numsIndex];
            }

            // 2. If now updated nums[index] is even, we add to the sum.
            nums[numsIndex] += queries[i][0];
            if (nums[numsIndex] % 2 == 0) {
                sumEven += nums[numsIndex];
            }

            // Record the sum in the result array.
            result[i] = sumEven;
        }
        return result;
    }
}
Java - Clean Code

class Solution {
    public int[] sumEvenAfterQueries(int[] nums, int[][] queries) {
        int sumEven = 0;
        for (int number : nums) {
            if (number % 2 == 0) {
                sumEven += number;
            }
        }
        int[] result = new int[queries.length];
        int numsIndex;
        for (int i = 0; i < queries.length; i++) {
            numsIndex = queries[i][1];
            if (nums[numsIndex] % 2 == 0) {
                sumEven -= nums[numsIndex];
            }
            nums[numsIndex] += queries[i][0];
            if (nums[numsIndex] % 2 == 0) {
                sumEven += nums[numsIndex];
            }
            result[i] = sumEven;
        }
        return result;
    }
}

==========================================================================================
1. Brute force approach (TLE):
class Solution {
    public int[] sumEvenAfterQueries(int[] nums, int[][] queries) {
        int[] ans = new int[nums.length];

        for (int i = 0; i < queries.length; i++) {
            int value = queries[i][0];
            int index = queries[i][1];

            nums[index] += value;
            int sum = 0;

            for (int n : nums) {
                if (n % 2 == 0) sum += n;
            }

            ans[i] = sum;
        }

        return ans;
    }
}

// TC: O(n * m),
// SC: O(n) - if output array considered otherwise O(1)
2. Optimal solution:
class Solution {

    // the idea is we don't calculate the even sum from scratch for each query
    // instead, we calculate it at the beginning
    // since each query only updates one value,
    // so we can adjust the even sum base on the original value and new value

    public int[] sumEvenAfterQueries(int[] nums, int[][] queries) {
        int[] ans = new int[nums.length];
        int evenSum = 0;

        for (int n : nums) {                                // calculate the sum of all even numbers
            if (n % 2 == 0) evenSum += n;
        }

        for (int i = 0; i < queries.length; i++) {
            int val = queries[i][0], idx = queries[i][1];

            if (nums[idx] % 2 == 0) evenSum -= nums[idx];   // if original nums[idx] is even, then we deduct it from evenSum

            nums[idx] += val;                               // in-place update nums

            if (nums[idx] % 2 == 0) evenSum += nums[idx];   // check if we need to update evenSum for the new value

            ans[i] = evenSum;                               // then we have evenSum after this query, push it to ans
        }

        return ans;
    }
}

// TC: O(n) + O(m)
// SC: O(n) - if output array considered otherwise O(1)
