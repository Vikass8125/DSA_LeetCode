You have an initial power of power, an initial score of 0, and a bag of tokens where tokens[i] is the value of the ith token (0-indexed).

Your goal is to maximize your total score by potentially playing each token in one of two ways:

If your current power is at least tokens[i], you may play the ith token face up, losing tokens[i] power and gaining 1 score.
If your current score is at least 1, you may play the ith token face down, gaining tokens[i] power and losing 1 score.
Each token may be played at most once and in any order. You do not have to play all the tokens.

Return the largest possible score you can achieve after playing any number of tokens.

 

Example 1:

Input: tokens = [100], power = 50
Output: 0
Explanation: Playing the only token in the bag is impossible because you either have too little power or too little score.
Example 2:

Input: tokens = [100,200], power = 150
Output: 1
Explanation: Play the 0th token (100) face up, your power becomes 50 and score becomes 1.
There is no need to play the 1st token since you cannot play it face up to add to your score.
Example 3:

Input: tokens = [100,200,300,400], power = 200
Output: 2
Explanation: Play the tokens in this order to get a score of 2:
1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.
2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.
3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.
4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.
 

Constraints:

0 <= tokens.length <= 1000
0 <= tokens[i], power < 104


MY_SOLUTION

Solution
Approach 1: Greedy
Intuition

If we play a token face up, we might as well play the one with the smallest value. 
Similarly, if we play a token face down, we might as well play the one with the largest value.

Algorithm

We don't need to play anything until absolutely necessary. Let's play tokens face up until we can't, then play a token face down and continue.

We must be careful, as it is easy for our implementation to be incorrect if we do not handle corner cases correctly.
We should always play tokens face up until exhaustion, then play one token face down and continue.

Our loop must be constructed with the right termination condition: we can either play a token face up or face down.

Our final answer could be any of the intermediate answers we got after playing tokens face up (but before playing them face down.)

class Solution {
    public int bagOfTokensScore(int[] tokens, int P) {
        Arrays.sort(tokens);
        int lo = 0, hi = tokens.length - 1;
        int points = 0, ans = 0;
        while (lo <= hi && (P >= tokens[lo] || points > 0)) {
            while (lo <= hi && P >= tokens[lo]) {
                P -= tokens[lo++];
                points++;
            }

            ans = Math.max(ans, points);
            if (lo <= hi && points > 0) {
                P += tokens[hi--];
                points--;
            }
        }

        return ans;
    }
}


Complexity Analysis

Time Complexity: )O(NlogN), where N is the length of tokens.

Space complexity : O(N) or O(logN)

The space complexity of the sorting algorithm depends on the implementation of each program language.

For instance, the sorted() function in Python is implemented with the Timsort algorithm whose space complexity is O(N).

In Java, the Arrays.sort() is implemented as a variant of quicksort algorithm whose space complexity is O(logN).


=============================================================================================

Explanation

It is always profitable to face up (loss power, gain score) tokens with less power and face down (gain power, loss score) token with more power.

1.sort the token in increasing order
2.create two pointer i, j, where i = 0, j = n ; initially
3.0 <= x <= i represent the tokens face up i.e, [Score ⬆, Power ⬇]
4.j <= x <= n represent the tokens face down i.e, [Score ⬇, Power⬆]
5.if we have sufficient power to face up ith token, power - token[i], i++.
6.else if we have some score [i - (n - j)] face down jth token, j--, power + token[j].
  i - (n - j) represents the score since (face up - face down) = score, face up = i and face down = n - j
  Note :we also need to check if we face down j we should have some unplayed token to face up. That's why we are checking j > i + 1
7.if we have no move to make break the loop.

class Solution {
    public int bagOfTokensScore(int[] a, int p) {
        int n = a.length;
        if(n == 0)
            return 0;
        Arrays.sort(a);
        int i=0;
        int j = n-1;
        int cur = 0;
        int max = 0;
        while(i<=j){
            if(p>=a[i]){
                p -= a[i];
                cur++;
                if(cur>max)
                    max = cur;
                i++;
            }
            else if(cur>=1){
                p += a[j];
                j--;
                cur--;
            }
            else
                break;
        }
        return max;
    }
}
Time Complexity : O(nlogn)
Space Complexity : O(1)


===================================

// Time Complexity: O(NlogN) (O(NlogN) for sorting & O(N) for two pointers.)
// Space Complexity: O(logN)
// where N is the number of tokens
class Solution {
    public int bagOfTokensScore(int[] tokens, int power) {
        // play i-th token face up -> lose tokens[i] power -> choose the smallest one
        // play i-th token face down -> gain tokens[i] power -> choose the largest one
        // hence, sort tokens first
        Arrays.sort(tokens);
        // two pointes - l for tracking face up & r for tracking face down
        int l = 0, r = tokens.length - 1;
        int cur_score = 0, mx_score = 0;
        while (l <= r) {
            // there are 3 cases
            if (tokens[l] <= power) {
                // case 1. play l-th tokens face up if its power <= the current power
                // ---
                // losing tokens[l] power
                power -= tokens[l];
                // and gaining 1 score
                cur_score += 1;
                // cur_score can be mx_score potentially
                mx_score = Math.max(mx_score, cur_score);
                // move the pointer to the right
                l += 1;
            } else if (cur_score >= 1) {
                // case 2. play r-th tokens face down if the current score is at least 1
                // ---
                // gaining tokens[r] power
                power += tokens[r];
                // and losing 1 score
                cur_score -= 1;
                // move the pointer to the left
                r -= 1;
            } else {
                // case 3. impossible to play
                // ---
                // either you don't enough power or enough score
                break;
            }
        }
        return mx_score;
    }
}

===============================================================

class Solution {
    public int bagOfTokensScore(int[] tokens, int P) {
        int score = 0;
        Arrays.sort(tokens);

        if(tokens.length == 0 || tokens[0] > P)
            return score;
			
        int left = 0,right = tokens.length-1;
        int tempScore = 0;
        while(left <= right){
            if(tokens[left] <= P){
                tempScore++;
                P-=tokens[left++];
            }else if(tokens[right] <= P){
                tempScore++;
                P-=tokens[right--];
            }else{
                if(tokens[left] > tokens[right])
                    P+=tokens[left++];
                else
                    P+=tokens[right--];
                tempScore--;
            }
            score = Math.max(tempScore,score);
        }
        return score;
    }
}

=====================================================

class Solution {
    public int bagOfTokensScore(int[] tokens, int p) {
        Arrays.sort(tokens);
        if(tokens.length == 0 || p < tokens[0]) return 0;
        int score = 0, maxScore = 0;  
        int left = 0, right = tokens.length - 1;
        while(left <= right){
            if(p < tokens[left]){
                if(score > 0){
                    p += tokens[right--];
                    score--;
                }else return score;
            }else {
                p -= tokens[left++];
                score++;
                maxScore = Math.max(score, maxScore);
            } 
        }
        return maxScore;
    }
}



====================================================

public int bagOfTokensScore(int[] tokens, int P) {

        Arrays.sort(tokens);
        return helper(tokens, P, 0, tokens.length - 1, 0);

    }

    private int helper(int[] tokens, int power, int start, int end, int score) {

        //2 pointer greedy approach.
        if (start > end) {
            return score;
        }

        int max = score;

        if (power >= tokens[start]) {
            max = Math.max(max, helper(tokens, power - tokens[start], start + 1, end, score + 1)); //play face up
        } else if (score > 0) {
            max = Math.max(max, helper(tokens, power + tokens[end], start, end - 1, score - 1)); //play face down

        }

        return max;
    }
    
    
  =================================================
  
Approach

Step 1: Sort the tokens in increasing order
Step 2: If we have sufficient power, we can leverage that to increase our score. (keep track of the maximum possible score that we have achieved so far)
Step 3: Otherwise, we'll just spend our points to gain more power.
Step 4: return the answer
Complexity: 
	TC: O(N*log(N))      // Sorting
	SC: O(1)           // Constant Space
  
  
  class Solution {
    public int bagOfTokensScore(int[] tokens, int power) {
        
        Arrays.sort(tokens);                                    // Step 1
        
        int score = 0, ans = 0;
        int lo = 0, hi = tokens.length-1;
        
        if( hi < 0 || tokens[0] > power) return 0;
        
        while(lo <= hi && score >= 0) {
            if(power >= tokens[lo]) {                           // Step 2
                power -= tokens[lo++];
                score++;
                ans = Math.max(ans, score);
            }
            else {                                              // Step 3
               power += tokens[hi--];
               score--; 
           }
        }
        return ans;                                             // Step 4
    }
}
  
